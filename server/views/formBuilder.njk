{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/radios/macro.njk" import govukRadios %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% from "govuk/components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "partials/datePicker.njk" import datePicker %}
{% from "partials/timePicker.njk" import timePicker %}

{# TODO: Currently, this form builder only supports the "add another" functionality for the text input type. #}
{# It can be extended in future if the other field types require Add Another functionality #}

{%  macro formBuilder(config, additionalCondition, validationErrors, formResponses) %}
    {% for input in config.inputs %}
        {% set validationError = validationErrors | findError(input.name) %}
        {% set formValues = getFormResponses(formResponses, input.name) or getValueFromAdditionalCondition(additionalCondition, input.name) %}

        <div data-module="moj-add-another">
            {% if input.type == 'text' %}
                    {% for item in formValues %}
                        {{ textInput(input, validationError, item, loop.index0, formValues.length > 1) }}
                    {% else %}
                        {{ textInput(input, validationError, "", 0, false) }}
                    {% endfor %}
            {% endif %}

            {% if input.type == 'dropdown' %}
                {% set options = [{
                    value: "",
                    text: "-"
                }] %}
                {% for option in input.options %}
                    {% set options = (options.push({
                        text: option.value,
                        value: option.value,
                        selected: option.value in formValues
                    }), options) %}
                {% endfor %}

                {{ govukSelect({
                    id: input.name,
                    name: input.name,
                    classes: "govuk-!-width-one-half",
                    label: {
                        text: input.label,
                        classes: "govuk-!-font-weight-bold"
                    },
                    items: options,
                    errorMessage: validationError
                }) }}
            {% endif %}

            {% if input.type == 'radio' %}
                {% set options = [] %}
                {% for option in input.options %}
                    {% set options = (options.push({
                        text: option.value,
                        value: option.value,
                        checked: option.value in formValues,
                        conditional: {
                            html: formBuilder(option.conditional, additionalCondition, validationErrors, formResponses)
                        } if option.conditional
                    }), options) %}
                {% endfor %}

                {{ govukRadios({
                    idPrefix: input.name,
                    name: input.name,
                    fieldset: {
                        legend: {
                            text: input.label,
                            classes: "govuk-!-font-weight-bold"
                        }
                    },
                    items: options,
                    errorMessage: validationError
                }) }}
            {% endif %}

            {% if input.type == 'datePicker' %}
                {{ datePicker({
                    id: input.name,
                    label: {
                        text: input.label,
                        classes: "govuk-!-font-weight-bold"
                    },
                    hint: {
                        text: "For example, 12 11 2022"
                    },
                    errorMessage: validationError,
                    formResponses: formValues | getValuesFromSimpleDates
                }) }}
            {% endif %}

            {% if input.type == 'timePicker' %}
                {{ timePicker({
                    id: input.name,
                    label: {
                        text: input.label,
                        classes: "govuk-!-font-weight-bold"
                    },
                    hint: {
                        text: "For example, 9:30am or 2:55pm"
                    },
                    errorMessage: validationError,
                    formResponses: formValues | getValuesFromSimpleTimes
                }) }}
            {% endif %}

            {% if input.type == 'address' %}
                {% call govukFieldset({
                    legend: {
                        text: input.label,
                        classes: "govuk-!-font-weight-bold"
                    }
                }) %}
                    {{ govukInput({
                        id: 'addressLine1',
                        label: {
                            html: 'Building and street <span class="govuk-visually-hidden">line 1 of 2</span>'
                        },
                        name: input.name + "[addressLine1]",
                        autocomplete: "address-line1",
                        classes: 'govuk-!-width-one-half',
                        classes: 'govuk-!-width-one-half',
                        errorMessage: validationErrors | findError('addressLine1'),
                        value: formValues | getValueFromAddress('addressLine1')
                    }) }}

                    {{ govukInput({
                        id: 'addressLine2',
                        label: {
                            html: '<span class="govuk-visually-hidden">Building and street line 2 of 2</span>'
                        },
                        name: input.name + "[addressLine2]",
                        autocomplete: "address-line2",
                        classes: 'govuk-!-width-one-half',
                        errorMessage: validationErrors | findError('addressLine2'),
                        value: formValues | getValueFromAddress('addressLine2')
                    }) }}

                    {{ govukInput({
                        id: 'addressTown',
                        label: {
                            text: "Town or city"
                        },
                        name: input.name + "[addressTown]",
                        classes: "govuk-!-width-one-third",
                        autocomplete: "address-level2",
                        errorMessage: validationErrors | findError('addressTown'),
                        value: formValues | getValueFromAddress('addressTown')
                    }) }}

                    {{ govukInput({
                        id: 'addressCounty',
                        label: {
                            text: "County"
                        },
                        name: input.name + "[addressCounty]",
                        classes: "govuk-!-width-one-third",
                        errorMessage: validationErrors | findError('addressCounty'),
                        value: formValues | getValueFromAddress('addressCounty')
                    }) }}

                    {{ govukInput({
                        id: 'addressPostcode',
                        label: {
                            text: "Postcode"
                        },
                        name: input.name + "[addressPostcode]",
                        classes: "govuk-input--width-10",
                        autocomplete: "postal-code",
                        errorMessage: validationErrors | findError('addressPostcode'),
                        value: formValues | getValueFromAddress('addressPostcode')
                    }) }}
                {% endcall %}
            {% endif %}

            {% if input.type == 'check' %}
                {% set options = [] %}
                {% for option in input.options %}
                    {% set options = (options.push({
                        text: option.value,
                        value: option.value,
                        checked: option.value in formValues,
                        conditional: {
                            html: formBuilder(option.conditional, additionalCondition, validationErrors, formResponses)
                        } if option.conditional
                    }), options) %}
                {% endfor %}

                {{ govukCheckboxes({
                    idPrefix: input.name,
                    name: input.name,
                    fieldset: {
                        legend: {
                            text: input.label,
                            classes: "govuk-!-font-weight-bold"
                        }
                    },
                    errorMessage: validationError,
                    items: options
                }) }}
            {% endif %}

            {% if input.addAnother %}
                <div class="moj-button-action">
                    {{ govukButton({
                        text: input.addAnother.label,
                        classes: 'govuk-button--secondary moj-add-another__add-button govuk-!-margin-bottom-4'
                    }) }}
                </div>
            {% endif %}
        </div>
    {% endfor %}
{% endmacro %}

{% macro textInput(input, validationError, value, index, removeButton) %}
    {% if index == 0 or (index > 0 and input.addAnother) %}
        {% call govukFieldset({
            classes: 'moj-add-another__item',
            legend: {
                text: input.label,
                classes: 'moj-add-another__title govuk-visually-hidden',
                isPageHeading: false
            }
        }) %}
            {{ govukInput({
                id: input.name if not input.addAnother else input.name + '[' + index + ']',
                name: input.name if not input.addAnother else input.name + '[' + index + ']',
                classes: "govuk-!-width-one-half",
                label: {
                    text: input.label,
                    classes: "govuk-!-font-weight-bold"
                },
                attributes: {
                    'data-name': input.name + '[%index%]',
                    'data-id': input.name + '[%index%]'
                } if input.addAnother,
                errorMessage: validationError,
                value: value
            }) }}

            {% if input.addAnother and removeButton %}
                <button type="button" class="govuk-button govuk-button--secondary moj-add-another__remove-button">Remove</button>
            {% endif %}
        {% endcall %}
    {% endif %}
{% endmacro %}
