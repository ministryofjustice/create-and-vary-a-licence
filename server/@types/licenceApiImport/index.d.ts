/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/omu/{prisonCode}/contact/email': {
    /**
     * Get OMU email address.
     * @description Obtain prison Offender Management Unit email address. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getOmuContactByPrisonCode']
    /**
     * Updates the OMU email address.
     * @description Updates the OMU email address used to contact members of a prison OMU. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateOmuEmail']
    /**
     * Delete the OMU email address.
     * @description Delete prison Offender Management Unit email address. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    delete: operations['deleteOmuContactByPrisonCode']
  }
  '/offender/nomisid/{nomsId}/update-offender-details': {
    /**
     * Updates the offender's personal information on all of their licences.
     * @description Updates the name and date of birth stored on all licences associated with the given offender. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateOffenderDetails']
  }
  '/offender/crn/{crn}/responsible-com': {
    /**
     * Updates in-flight licences associated with an offender with the community offender manager who is responsible for that offender.
     * @description Updates in-flight licences associated with an offender with the community offender manager who is responsible for that offender. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateResponsibleCom']
  }
  '/offender/crn/{crn}/probation-team': {
    /**
     * Updates in-flight licences associated with an offender with a new probation team.
     * @description Updates in-flight licences associated with an offender with a new probation team. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateProbationTeam']
  }
  '/licence/id/{licenceId}/vlo-discussion': {
    /**
     * Sets whether the variation has been discussed with a VLO.
     * @description Sets whether the variation has been discussed with a VLO. Either Yes or Not applicable. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateVloDiscussion']
  }
  '/licence/id/{licenceId}/submit': {
    /**
     * Update the status of a licence to SUBMITTED or VARIATION_SUBMITTED.
     * @description Update the status of a licence to SUBMITTED or VARIATION_SUBMITTED, and record the details of the COM who submitted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['submitLicence']
  }
  '/licence/id/{licenceId}/status': {
    /**
     * Update the status of a licence.
     * @description Update the status of a licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateLicenceStatus']
  }
  '/licence/id/{licenceId}/standard-conditions': {
    /**
     * Update the standard conditions for a licence.
     * @description Replace the standard conditions against a licence if policy changes. Existing data for a condition which does not appear in this request will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateStandardConditions']
  }
  '/licence/id/{licenceId}/spo-discussion': {
    /**
     * Sets whether the variation has been discussed with an SPO.
     * @description Sets whether the variation has been discussed with an SPO. Either Yes or No. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateSpoDiscussion']
  }
  '/licence/id/{licenceId}/sentence-dates': {
    /**
     * Updates the sentence dates.
     * @description Updates the sentence dates. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateSentenceDates']
  }
  '/licence/id/{licenceId}/refer-variation': {
    /**
     * Updates a licence to referred and stores the reason provided.
     * @description Updates a licence to referred and stores the reason provided by the approver. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['referVariation']
  }
  '/licence/id/{licenceId}/reason-for-variation': {
    /**
     * Updates the reason for the licence variation.
     * @description Updates the reason for the licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateReasonForVariation']
  }
  '/licence/id/{licenceId}/prison-information': {
    /**
     * Updates the prison information.
     * @description Updates the prison information. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updatePrisonInformation']
  }
  '/licence/id/{licenceId}/override/dates': {
    /**
     * Override licence dates
     * @description Override the dates for an exising licence. Only to be used in exceptional circumstances. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['changeDates']
  }
  '/licence/id/{licenceId}/contact-number': {
    /**
     * Update the officer contact number for a licence
     * @description Update the contact number for the officer related to this licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateContactNumber']
  }
  '/licence/id/{licenceId}/bespoke-conditions': {
    /**
     * Add or replace the bespoke conditions for a licence.
     * @description Add or replace the bespoke conditions on a licence with the content of this request. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateBespokeConditions']
  }
  '/licence/id/{licenceId}/approve-variation': {
    /**
     * Approves a licence variation.
     * @description Approves a licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['approveVariation']
  }
  '/licence/id/{licenceId}/appointmentTime': {
    /**
     * Update the appointment date and time
     * @description Update the date and time for the initial appointment. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateAppointmentTime']
  }
  '/licence/id/{licenceId}/appointmentPerson': {
    /**
     * Update the person to meet at the initial appointment
     * @description Update the person the person on probation will meet at the initial appointment Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateAppointmentPerson']
  }
  '/licence/id/{licenceId}/appointment-address': {
    /**
     * Update the address where the initial appointment will take place
     * @description Update the address where the initial appointment will take place. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateAppointmentAddress']
  }
  '/licence/id/{licenceId}/additional-conditions': {
    /**
     * Update the set of additional conditions on the licence.
     * @description Update the set of additional conditions on the licence. This does not include accompanying data per condition. Existing conditions which appear on the licence but which are not supplied to this endpoint will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateAdditionalConditions']
  }
  '/licence/id/{licenceId}/additional-conditions/condition/{additionalConditionId}': {
    /**
     * Update the user entered data to accompany an additional condition template.
     * @description Update the user entered data to accompany an additional condition template. Existing data for a condition which does not appear in this request will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateAdditionalConditionData']
  }
  '/exclusion-zone/id/{licenceId}/condition/id/{conditionId}/remove-upload': {
    /**
     * Removes a previously uploaded exclusion zone file from an additional condition.
     * @description Removes a previously uploaded exclusion zone file. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['removeExclusionZoneFile']
  }
  '/com/update': {
    /**
     * Updates the details of a community offender manager.
     * @description Updates the details of a community offender manager (e.g. email address). Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    put: operations['updateComDetails']
  }
  '/audit/save': {
    /**
     * Records an auditable event.
     * @description Records an auditable event related to an action taken by a user or an automated in-service process. Requires ROLE_CVL_ADMIN.
     */
    put: operations['recordAuditEvent']
  }
  '/run-remove-expired-conditions-job': {
    /**
     * Job to remove AP conditions.
     * @description Triggers a job that removes AP conditions for all licences that are in PSS period and status equal to 'VARIATION_IN_PROGRESS' or 'VARIATION_SUBMITTED' or 'VARIATION_REJECTED' or 'VARIATION_APPROVED'. Requires ROLE_CVL_ADMIN.
     */
    post: operations['runRemoveExpiredConditionsJob']
  }
  '/run-activation-job': {
    /**
     * Triggers the licence activation job.
     * @description Triggers a job that causes licences with a status of APPROVED, a CRD or ARD of today, and that are either IS91 cases or have an NOMIS status beginning with 'INACTIVE' to be activated. Deactivates offenders with approved HDC licences. Requires ROLE_CVL_ADMIN.
     */
    post: operations['runLicenceActivationJob']
  }
  '/notify-probation-of-unapproved-licences': {
    /**
     * Send an email to probation practitioner of any previously approved licences that have been edited but not re-approved by prisoners release date
     * @description Send email to probation practioner. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['notifyProbationOfUnapprovedLicences']
  }
  '/licence/recently-approved': {
    /**
     * Get a list of recently approved licence summaries matching the supplied list of prisons.
     * @description Get the recently approved licences matching the supplied list of prisons. Requires ROLE_CVL_ADMIN.
     */
    post: operations['getRecentlyApprovedLicences']
  }
  '/licence/match': {
    /**
     * Get a list of licence summaries matching the supplied criteria.
     * @description Get the licences matching the supplied lists of status, prison, staffId, nomsId and PDU. Requires ROLE_CVL_ADMIN.
     */
    post: operations['getLicencesMatchingCriteria']
  }
  '/licence/inactivate-licences': {
    /**
     * Inactivate licences in bulk
     * @description Set licence statuses to INACTIVE. Accepts a list of licence IDs. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['inactivateLicences']
  }
  '/licence/id/{licenceId}/override/status': {
    /**
     * Override a licence status
     * @description Override the status for an exising licence. Only to be used in exceptional circumstances. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['changeStatus']
  }
  '/licence/id/{licenceId}/edit': {
    /**
     * Create a new version of an approved licence
     * @description Create a new version of an  approved licence. The new licence will have a new id and have status IN_PROGRESS. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['editLicence']
  }
  '/licence/id/{licenceId}/create-variation': {
    /**
     * Create a variation of this licence
     * @description Create a variation of this licence. The new licence will have a new ID and have a status VARIATION_IN_PROGRESS. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['createVariation']
  }
  '/licence/id/{licenceId}/additional-condition/{conditionType}': {
    /**
     * Add additional condition to the licence.
     * @description Add additional condition to the licence. This does not include accompanying data per condition. Existing conditions which appear on the licence will be unaffected. More than one condition with the same code can be added Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['addAdditionalCondition']
  }
  '/licence/create': {
    /**
     * Create a licence
     * @description Creates a licence with the default status IN_PROGRESS and populates with the details provided. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['createLicence']
  }
  '/licence/activate-licences': {
    /**
     * Activate licences in bulk
     * @deprecated
     * @description Set licence statuses to ACTIVE. Accepts a list of licence IDs. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['activateLicences']
  }
  '/exclusion-zone/id/{licenceId}/condition/id/{conditionId}/file-upload': {
    /**
     * Upload a multipart/form-data request containing a PDF exclusion zone file.
     * @description Uploads a PDF file containing an exclusion zone map and description. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['uploadExclusionZoneFile']
  }
  '/com/prompt-licence-creation': {
    /**
     * Notifies the COM of upcoming releases which they need to create a licence for.
     * @description Notifies the COM of upcoming releases which they need to create a licence for. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['notifyOfUpcomingReleasesRequiringLicence']
  }
  '/com/case-search': {
    /**
     * Search for offenders on a given staff member's caseload.
     * @description Search for offenders on a given staff member's caseload.. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    post: operations['searchForOffenderOnStaffCaseload']
  }
  '/audit/retrieve': {
    /**
     * Retrieves a list of auditable events matching the criteria provided.
     * @description Retrieves a list of auditable events matching the criteria provided. Requires ROLE_CVL_ADMIN.
     */
    post: operations['requestAuditEvents']
  }
  '/support/licence-statistics': {
    /**
     * Get licence statistics.
     * @deprecated
     * @description Licence statistics data required by the support staff. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getLicenceStatistics']
  }
  '/licence/variations/submitted/area/{areaCode}': {
    /**
     * Get a list of licence summaries for submitted variations by probation area.
     * @description Get a list of licence summaries for all submitted variations belonging to the specified probation area code. Requires ROLE_CVL_ADMIN.
     */
    get: operations['submittedVariations']
  }
  '/licence/id/{licenceId}': {
    /**
     * Get a licence by its licence id
     * @description Returns a single licence detail by its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getLicenceById']
  }
  '/licence-policy/version/{version}': {
    /**
     * Get licence policy be version number
     * @description Returns a single policy using its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getPolicyByVersion']
  }
  '/licence-policy/compare/{version}/licence/{licenceId}': {
    /**
     * Get differences between saved licences conditions and new policy
     * @description Returns condition data saved against a licence no longer present within the new licence policyRequires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['compareLicence']
  }
  '/licence-policy/active': {
    /**
     * Get the active licence policy
     * @description Returns the active policy using its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getCurrentPolicy']
  }
  '/licence-policy/': {
    /**
     * Get all licence policy versions
     * @description Returns a list of policies, active and presentRequires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getPolicies']
  }
  '/exclusion-zone/id/{licenceId}/condition/id/{conditionId}/full-size-image': {
    /**
     * Get the exclusion zone map image for a specified licence and condition
     * @description Get the exclusion zone map image. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    get: operations['getExclusionZoneImage']
  }
  '/events/match': {
    /**
     * Get a list of licence events that match the supplied criteria.
     * @description Get a list of licence events that match the supplied criteria. Requires ROLE_CVL_ADMIN.
     */
    get: operations['getEventsMatchingCriteria']
  }
  '/licence/id/{licenceId}/discard': {
    /**
     * Discards a licence record.
     * @description Discards a licence record. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
     */
    delete: operations['discard']
  }
  '/licence/id/{licenceId}/additional-condition/id/{conditionId}': {
    /**
     * Remove additional condition with specified condition Id
     * @description Remove additional condition from the licence list of additional conditions.All user submitted condition data will also be removed.
     */
    delete: operations['deleteAdditionalCondition']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Request object for updating / creating OMU email contact */
    UpdateOmuEmailRequest: {
      /**
       * @description The email used to contact the OMU
       * @example test@omu.prison.com
       */
      email: string
    }
    OmuContact: {
      /** Format: int64 */
      id: number
      prisonCode: string
      email: string
      /** Format: date-time */
      dateCreated: string
      /** Format: date-time */
      dateLastUpdated?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Request object for updating an offender's personal details */
    UpdateOffenderDetailsRequest: {
      /**
       * @description The offender forename
       * @example Steven
       */
      forename: string
      /**
       * @description The offender middle names
       * @example Jason Kyle
       */
      middleNames?: string
      /**
       * @description The offender surname
       * @example Smith
       */
      surname: string
      /**
       * Format: date
       * @description The offender's date of birth, from either prison or probation services
       */
      dateOfBirth: string
    }
    /** @description Request object for updating the COM responsible for an offender */
    UpdateComRequest: {
      /**
       * Format: int64
       * @description The unique identifier of the COM, retrieved from Delius
       * @example 22003829
       */
      staffIdentifier: number
      /**
       * @description The Delius username for the COM
       * @example jbloggs
       */
      staffUsername: string
      /**
       * @description The email address of the COM
       * @example jbloggs@probation.gov.uk
       */
      staffEmail?: string
      /**
       * @description The first name of the COM
       * @example Joseph
       */
      firstName?: string
      /**
       * @description The last name of the COM
       * @example Bloggs
       */
      lastName?: string
    }
    /** @description Request object for updating an offender's probation team */
    UpdateProbationTeamRequest: {
      /**
       * @description The probation area code supervising this licence
       * @example N01
       */
      probationAreaCode: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The probation delivery unit (PDU or borough) code
       * @example NA01A12
       */
      probationPduCode?: string
      /**
       * @description The PDU description
       * @example Cardiff
       */
      probationPduDescription?: string
      /**
       * @description The local administrative unit (LAU or district) code
       * @example NA01A12
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example Cardiff North
       */
      probationLauDescription?: string
      /**
       * @description The probation team code supervising this licence
       * @example NA01A12-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff North A
       */
      probationTeamDescription?: string
    }
    /** @description Request object for updating the VLO discussion */
    UpdateVloDiscussionRequest: {
      /**
       * @description Whether or not the licence variation has been discussed with a VLO
       * @example Yes
       */
      vloDiscussion: string
    }
    /** @description Request object for creating a new licence */
    NotifyRequest: {
      /**
       * @description The name of the person to contact
       * @example Joe Bloggs
       */
      name?: string
      /**
       * @description The email address to send the notification to
       * @example joebloggs@probation.gov.uk
       */
      email?: string
    }
    /** @description Request object for updating the status of a licence */
    StatusUpdateRequest: {
      /**
       * @description The new status for this licence
       * @example APPROVED
       * @enum {string}
       */
      status:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /**
       * @description The username of the person who is updating this status
       * @example X12333
       */
      username: string
      /**
       * @description The full name of the person who is updating this status
       * @example John Smythe
       */
      fullName?: string
    }
    /** @description Describes a standard condition on this licence */
    StandardCondition: {
      /**
       * Format: int64
       * @description The internal ID for this standard condition on this licence
       * @example 98987
       */
      id?: number
      /**
       * @description The unique code for this standard condition
       * @example 9ce9d594-e346-4785-9642-c87e764bee37
       */
      code?: string
      /**
       * Format: int32
       * @description The sequence of this standard condition
       * @example 1
       */
      sequence?: number
      /**
       * @description The text of this standard condition
       * @example Be of generally good behaviour
       */
      text?: string
    }
    UpdateStandardConditionDataRequest: {
      /** @description The list of standard licence conditions from service configuration */
      standardLicenceConditions: components['schemas']['StandardCondition'][]
      /** @description The list of standard post sentence supervision conditions from service configuration */
      standardPssConditions: components['schemas']['StandardCondition'][]
    }
    /** @description Request object for updating the SPO discussion */
    UpdateSpoDiscussionRequest: {
      /**
       * @description Whether or not the licence variation has been discussed with an SPO
       * @example Yes
       */
      spoDiscussion: string
    }
    /** @description Request object for updating sentence dates */
    UpdateSentenceDatesRequest: {
      /**
       * Format: date
       * @description The conditional release date, from prison services
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date, from prison services
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date, from prison services
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date, from prison services
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The licence start date, from prison services
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The licence end date, from prison services
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts, from prison services
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends, from prison services
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description The date when a person is recalled to prison, after being released on a license
       */
      postRecallReleaseDate?: string
    }
    /** @description Request object for referring a licence variation */
    ReferVariationRequest: {
      /** @description A large string containing rich text markup. A reason for referring the licence variation. */
      reasonForReferral: string
    }
    /** @description Request object for updating the reason for variation */
    UpdateReasonForVariationRequest: {
      /** @description A large string containing rich text markup. A reason for varying the licence. */
      reasonForVariation: string
    }
    /** @description Request object for updating the prison information on a licence */
    UpdatePrisonInformationRequest: {
      /**
       * @description The identifier of the prison
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The detailed name of the prison
       * @example Pentonville (HMP)
       */
      prisonDescription: string
      /**
       * @description The prison telephone number
       * @example +44 276 54545
       */
      prisonTelephone?: string
    }
    /** @description Request object for overriding licence dates */
    OverrideLicenceDatesRequest: {
      /**
       * Format: date
       * @description The conditional release date
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The licence start date
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The licence expiry date
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends
       */
      topupSupervisionExpiryDate?: string
      /** @description Reason for overriding the licence dates */
      reason: string
    }
    /** @description Request object for updating the contact number of the officer on a licence */
    ContactNumberRequest: {
      /**
       * @description The UK telephone number to contact the person the offender should meet for their initial meeting
       * @example 0114 2557665
       */
      telephone: string
    }
    /** @description A list of bespoke conditions to add to a licence */
    BespokeConditionRequest: {
      /**
       * @description A list of bespoke conditions to add to a licence
       * @example ['cond1', 'cond2']
       */
      conditions: string[]
    }
    /** @description Request object for updating the date and time of the initial appointment */
    AppointmentTimeRequest: {
      /**
       * Format: date-time
       * @description The date and time of the initial appointment
       */
      appointmentTime: string
    }
    /** @description Request object for updating the person the person on probation will meet at the initial appointment */
    AppointmentPersonRequest: {
      /**
       * @description The name of the person the person on probation will meet at the initial appointment
       * @example John Smith
       */
      appointmentPerson: string
    }
    /** @description Request object for updating the address of the initial appointment */
    AppointmentAddressRequest: {
      /**
       * @description The address of initial appointment
       * @example Manchester Probation Service, Unit 4, Smith Street, Stockport, SP1 3DN
       */
      appointmentAddress: string
    }
    /** @description Describes an additional condition to create/update */
    AdditionalConditionRequest: {
      /**
       * @description Coded value for the additional condition
       * @example meetingAddress
       */
      code?: string
      /**
       * @description The category of the additional condition
       * @example Freedom of movement
       */
      category?: string
      /**
       * Format: int32
       * @description Sequence of this additional condition within the additional conditions
       * @example 1
       */
      sequence?: number
      /**
       * @description The textual value for this additional condition
       * @example You must not enter the location [DESCRIPTION]
       */
      text?: string
    }
    /** @description Request object for updating the list of additional conditions on a licence */
    AdditionalConditionsRequest: {
      /** @description The list of additional conditions */
      additionalConditions: components['schemas']['AdditionalConditionRequest'][]
      /**
       * @description The type of additional condition, either licence or post sentence supervision
       * @enum {string}
       */
      conditionType: 'AP' | 'PSS'
    }
    /** @description Describes the data entered for an additional condition */
    AdditionalConditionData: {
      /**
       * Format: int64
       * @description The internal ID of this data item, for this condition on this licence
       * @example 98989
       */
      id: number
      /**
       * @description The field name of this data item for this condition on this licence
       * @example location
       */
      field?: string
      /**
       * @description The value of this data item
       * @example Norfolk
       */
      value?: string
      /**
       * Format: int32
       * @description The sequence of this data item, for this condition on this licence
       * @example 1
       */
      sequence: number
    }
    /** @description Request object for updating the list of additional conditions on a licence */
    UpdateAdditionalConditionDataRequest: {
      /** @description The list of data inputs associated with this additional condition */
      data: components['schemas']['AdditionalConditionData'][]
    }
    /** @description Describes an audit event request */
    AuditEvent: {
      /**
       * Format: int64
       * @description The internal ID of the audit event
       * @example 1234
       */
      id?: number
      /**
       * Format: int64
       * @description The internal ID of the licence that this event related to, or null if unrelated to a licence
       * @example 1234
       */
      licenceId?: number
      /**
       * Format: date-time
       * @description The date and time of the event
       */
      eventTime: string
      /**
       * @description Username who initiated the event, if a user event, or SYSTEM if an automated event
       * @example X63533
       */
      username?: string
      /**
       * @description The full name of the person who performed this auditable event, or SYSTEM if an automated event.
       * @example Robert Mortimer
       */
      fullName?: string
      /**
       * @description The event type. One of SYSTEM_EVENT or USER_EVENT
       * @example USER_EVENT
       * @enum {string}
       */
      eventType: 'USER_EVENT' | 'SYSTEM_EVENT'
      /**
       * @description A summary of the action taken
       * @example Updated a bespoke condition
       */
      summary: string
      /**
       * @description A detailed description of the action taken
       * @example Updated a bespoke condition
       */
      detail?: string
    }
    /** @description Describes a prisoner's first and last name, their CRN if present and a COM's contact details for use in an email to COM */
    UnapprovedLicence: {
      /**
       * @description The Crime Reference Number
       * @example Z882661
       */
      crn?: string
      /**
       * @description The prisoner's first name
       * @example Jim
       */
      forename?: string
      /**
       * @description The prisoner's last name
       * @example Smith
       */
      surname?: string
      /**
       * @description The COM's first name
       * @example Joseph
       */
      comFirstName?: string
      /**
       * @description The COM's last name
       * @example Bloggs
       */
      comLastName?: string
      /**
       * @description The COM's email address
       * @example jbloggs@probation.gov.uk
       */
      comEmail?: string
    }
    /** @description Request object for searching for recently approved licences */
    RecentlyApprovedLicencesRequest: {
      /**
       * @description A list of prison codes
       * @example ['PVI', 'BAI']
       */
      prisonCodes: string[]
    }
    /** @description Response object which summarises a licence */
    LicenceSummary: {
      /**
       * Format: int64
       * @description Internal identifier for this licence generated within this service
       * @example 123344
       */
      licenceId: number
      /**
       * @description Licence type code
       * @example AP
       * @enum {string}
       */
      licenceType: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The status of this licence
       * @example IN_PROGRESS
       * @enum {string}
       */
      licenceStatus:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /**
       * @description The prison nomis identifier for this offender
       * @example A1234AA
       */
      nomisId?: string
      /**
       * @description The offender surname
       * @example Smith
       */
      surname?: string
      /**
       * @description The offender forename
       * @example Brian
       */
      forename?: string
      /**
       * @description The prison code where this offender resides or was released from
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The prison where this offender resides or was released from
       * @example Moorland (HMP)
       */
      prisonDescription?: string
      /**
       * @description The probation area code where the licence is supervised
       * @example N01
       */
      probationAreaCode?: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The probation delivery unit (PDU or borough) where the licence is supervised
       * @example N01CA
       */
      probationPduCode?: string
      /**
       * @description The description for the PDU
       * @example North Wales
       */
      probationPduDescription?: string
      /**
       * @description The local administrative unit (LAU or district) where the licence is supervised
       * @example NA01CA-02
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example North Wales
       */
      probationLauDescription?: string
      /**
       * @description The probation team code which supervises the licence
       * @example NA01CA-02-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff South
       */
      probationTeamDescription?: string
      /**
       * Format: date
       * @description The conditional release date on the licence
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date on the licence
       */
      actualReleaseDate?: string
      /**
       * @description The case reference number (CRN) of this person, from either prison or probation service
       * @example X12344
       */
      crn?: string
      /**
       * Format: date
       * @description The offender's date of birth, from either prison or probation services
       */
      dateOfBirth?: string
      /**
       * @description The username of the responsible probation officer
       * @example jsmith
       */
      comUsername?: string
      /**
       * Format: int64
       * @description The bookingId associated with the licence
       * @example 773722
       */
      bookingId?: number
      /**
       * Format: date-time
       * @description The date the licence was created
       */
      dateCreated?: string
      /**
       * @description The full name of the person who approved the licence
       * @example John Smith
       */
      approvedByName?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was approved
       */
      approvedDate?: string
    }
    /** @description Request object for searching licences by field */
    MatchLicencesRequest: {
      /**
       * @description A list of prison codes
       * @example ['PVI', 'BAI']
       */
      prison?: string[]
      /**
       * @description A list of licence status codes
       * @example ['ACTIVE', 'APPROVED']
       */
      status?: (
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      )[]
      /**
       * @description A list of staff identifiers - the responsible probation officer
       * @example [
       *   1234,
       *   4321
       * ]
       */
      staffId?: number[]
      /**
       * @description A list of NOMIS ID's
       * @example ['B76546GH', 'Y76499GY']
       */
      nomsId?: string[]
      /**
       * @description A list of probation delivery unit codes
       * @example ['N55', 'P66']
       */
      pdu?: string[]
    }
    /** @description Request object for overriding a licence status */
    OverrideLicenceStatusRequest: {
      /**
       * @description The new status code to assign to the licence
       * @enum {string}
       */
      statusCode:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /** @description Reason for overriding the licence status */
      reason: string
    }
    /** @description Describes an additional condition request */
    AddAdditionalConditionRequest: {
      /**
       * @description Coded value for the additional condition
       * @example meetingAddress
       */
      conditionCode: string
      /**
       * @description Condition type, either AP or PSS
       * @example AP
       */
      conditionType: string
      /**
       * @description The category of the additional condition
       * @example Freedom of movement
       */
      conditionCategory?: string
      /**
       * Format: int32
       * @description Sequence of this additional condition within the additional conditions
       * @example 1
       */
      sequence?: number
      /**
       * @description The textual value for this additional condition
       * @example You must not enter the location [DESCRIPTION]
       */
      conditionText: string
      /**
       * @description The condition text with the users data inserted into the template
       * @example You must not enter the location Tesco Superstore
       */
      expandedText: string
    }
    /** @description Describes an additional condition */
    AdditionalCondition: {
      /**
       * Format: int64
       * @description The internal ID for this additional condition for this licence
       * @example 98989
       */
      id?: number
      /**
       * @description Coded value for the additional condition
       * @example meetingAddress
       */
      code?: string
      /**
       * @description Version number for condition
       * @example 2.1
       */
      version?: string
      /**
       * @description The category of the additional condition
       * @example Freedom of movement
       */
      category?: string
      /**
       * Format: int32
       * @description Sequence of this additional condition within the additional conditions
       * @example 1
       */
      sequence?: number
      /**
       * @description The textual value for this additional condition
       * @example You must not enter the location [DESCRIPTION]
       */
      text?: string
      /**
       * @description The condition text with the users data inserted into the template
       * @example You must not enter the location Tesco Superstore
       */
      expandedText?: string
      /** @description The list of data items entered for this additional condition */
      data: components['schemas']['AdditionalConditionData'][]
      /** @description The list of file upload summary for this additional condition */
      uploadSummary: components['schemas']['AdditionalConditionUploadSummary'][]
    }
    /** @description Describes the files uploaded for an additional condition */
    AdditionalConditionUploadSummary: {
      /**
       * Format: int64
       * @description The internal ID of this upload for this condition on this licence
       * @example 98989
       */
      id: number
      /**
       * @description The original file name uploaded for this condition on this licence
       * @example exclusion-zone.pdf
       */
      filename?: string
      /**
       * @description The file type uploaded for this condition on this licence
       * @example application/pdf
       */
      fileType?: string
      /**
       * Format: int32
       * @description The original file size in bytes
       * @example 27566
       */
      fileSize: number
      /**
       * Format: date-time
       * @description The date and time this file was uploaded
       */
      uploadedTime: string
      /**
       * @description The description provided in this document
       * @example A description of the exclusion zone boundaries
       */
      description?: string
      /**
       * @description The thumbnail for the  exclusion zone map as a base64-encoded JPEG image
       * @example Base64 string
       */
      thumbnailImage?: string
      /**
       * Format: int64
       * @description The id which references the original file data and full size image
       * @example 9999
       */
      uploadDetailId: number
    }
    /** @description Request object for creating a new licence */
    CreateLicenceRequest: {
      /**
       * @description Type of licence requested - one of AP, PSS or AP_PSS
       * @example AP
       * @enum {string}
       */
      typeCode: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The version of licence conditions currently active as a string value
       * @example 1.0
       */
      version: string
      /**
       * @description The prison nomis identifier for this offender
       * @example A1234AA
       */
      nomsId: string
      /**
       * @description The prison booking number for the current sentence for this offender
       * @example 12334
       */
      bookingNo: string
      /**
       * Format: int64
       * @description The prison booking id for the current sentence for this offender
       * @example 87666
       */
      bookingId: number
      /**
       * @description The case reference number (CRN) of this person, from either prison or probation service
       * @example X12344
       */
      crn: string
      /**
       * @description The police national computer number (PNC) of this person, from either prison or probation service
       * @example 2014/12344A
       */
      pnc?: string
      /**
       * @description The criminal records office (CRO) identifier police of this person, from either prison or probation service
       * @example 2014/12344A
       */
      cro?: string
      /**
       * @description The prison location code where this person is currently resident - leave null if not in prison
       * @example MDI
       */
      prisonCode: string
      /**
       * @description The prison description - leave null if not in prison
       * @example Leeds (HMP)
       */
      prisonDescription: string
      /**
       * @description The prison telephone number - leave null if not in prison
       * @example +44 276 54545
       */
      prisonTelephone?: string
      /**
       * @description The offender forename
       * @example Steven
       */
      forename: string
      /**
       * @description The offender middle names
       * @example Jason Kyle
       */
      middleNames?: string
      /**
       * @description The offender surname
       * @example Smith
       */
      surname: string
      /**
       * Format: date
       * @description The offender's date of birth, from either prison or probation services
       */
      dateOfBirth: string
      /**
       * Format: date
       * @description The conditional release date, from prison services
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date, from prison services
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date, from prison services
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date, from prison services
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The licence start date, from prison services
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The licence end date, from prison services
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts, from prison services
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends, from prison services
       */
      topupSupervisionExpiryDate?: string
      /**
       * @description The probation area code supervising this licence
       * @example N01
       */
      probationAreaCode: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The probation delivery unit (PDU or borough) code
       * @example NA01A12
       */
      probationPduCode?: string
      /**
       * @description The PDU description
       * @example Cardiff
       */
      probationPduDescription?: string
      /**
       * @description The local administrative unit (LAU or district) code
       * @example NA01A12
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example Cardiff North
       */
      probationLauDescription?: string
      /**
       * @description The probation team code supervising this licence
       * @example NA01A12-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff North A
       */
      probationTeamDescription?: string
      /** @description The list of standard licence conditions from service configuration */
      standardLicenceConditions: components['schemas']['StandardCondition'][]
      /** @description The list of standard post sentence supervision conditions from service configuration */
      standardPssConditions: components['schemas']['StandardCondition'][]
      /**
       * Format: int64
       * @description The community offender manager who is responsible for this case
       * @example 1231332
       */
      responsibleComStaffId: number
    }
    /** @description Describes a prisoner due for release */
    PrisonerForRelease: {
      /**
       * @description The full name of the prisoner
       * @example John Smith
       */
      name: string
      /**
       * Format: date
       * @description The date on which the prisoner leaves custody
       */
      releaseDate: string
    }
    /** @description Describes a COM's contact details and the upcoming releases that they must consider for licence creation */
    PromptLicenceCreationRequest: {
      /**
       * @description The email address of the COM
       * @example jbloggs@probation.gov.uk
       */
      email: string
      /**
       * @description The full name of the COM
       * @example Joseph Bloggs
       */
      comName: string
      /** @description The list of prisoners for whom the COM should be notified of needing a licence */
      initialPromptCases: components['schemas']['PrisonerForRelease'][]
      /** @description The list of prisoners for whom the COM should be notified of needing a licence urgently */
      urgentPromptCases: components['schemas']['PrisonerForRelease'][]
    }
    /** @description A list of fields to sort by along with the sort direction for each */
    ProbationSearchSortBy: {
      /** @enum {string} */
      field: 'FORENAME' | 'SURNAME' | 'CRN' | 'COM_FORENAME' | 'COM_SURNAME'
      /** @enum {string} */
      direction: 'ASC' | 'DESC'
    }
    /** @description Request object for searching for offenders within a set of teams attached to a staff member */
    ProbationUserSearchRequest: {
      /**
       * @description The query the user wishes to search for (e.g. CRN, name, NOMIS ID)
       * @example Joe Bloggs
       */
      query: string
      /**
       * Format: int64
       * @description The delius staff identifier of the probation staff member
       * @example 14829475
       */
      staffIdentifier: number
      /** @description A list of fields to sort by along with the sort direction for each */
      sortBy: components['schemas']['ProbationSearchSortBy'][]
    }
    /** @description Describes a search result which has been found and enriched */
    FoundProbationRecord: {
      /** @description The forename and surname of the offender */
      name: string
      /**
       * @description The case reference number (CRN) of the offender,
       * @example X12344
       */
      crn?: string
      /**
       * @description The prison nomis number for the offender
       * @example A1234AA
       */
      nomisId?: string
      /** @description The forename and surname of the COM */
      comName: string
      /** @description The COM's staff code */
      comStaffCode?: string
      /** @description The description of the COM's team */
      teamName?: string
      /**
       * Format: date
       * @description The release date of the offender
       */
      releaseDate?: string
      /**
       * Format: int64
       * @description The ID of the most recent and relevant licence
       * @example 123344
       */
      licenceId?: number
      /**
       * @description The type of licence
       * @enum {string}
       */
      licenceType?: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The status of the licence
       * @enum {string}
       */
      licenceStatus?:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /** @description Indicates whether the offender is in prison or out on probation */
      isOnProbation?: boolean
    }
    /** @description Describes an enriched probation search result */
    ProbationSearchResult: {
      /** @description A list of probation search results */
      results: components['schemas']['FoundProbationRecord'][]
      /**
       * Format: int32
       * @description Based on the search results, the number of results where an offender is in prison
       * @example 10
       */
      inPrisonCount: number
      /**
       * Format: int32
       * @description Based on the search results, the number of results where an offender is on probation
       * @example 10
       */
      onProbationCount: number
    }
    /** @description Describes an audit event request */
    AuditRequest: {
      /**
       * Format: int64
       * @description The internal ID of the licence to request audit events for
       * @example 1234
       */
      licenceId?: number
      /**
       * @description Username to request events for
       * @example X63533
       */
      username?: string
      /**
       * Format: date-time
       * @description The start date and time to query for events (default is 1 month ago)
       */
      startTime: string
      /**
       * Format: date-time
       * @description The end time to query for events (default is now)
       */
      endTime: string
    }
    /** @description Management stats */
    LicenceStatistics: {
      /** @description Prison ID */
      prison?: string
      /**
       * @description Type of licence
       * @example AP, PSS, APPSS
       */
      licenceType?: string
      /**
       * Format: int32
       * @description Number eligible for CVL within timeframe
       * @example 10
       */
      eligibleForCvl?: number
      /**
       * Format: int32
       * @description Status of In progress
       * @example 2
       */
      inProgress?: number
      /**
       * Format: int32
       * @description Status of Submitted
       * @example 2
       */
      submitted?: number
      /**
       * Format: int32
       * @description Status of Approved
       * @example 8
       */
      approved?: number
      /**
       * Format: int32
       * @description Status of Active
       * @example 5
       */
      active?: number
      /**
       * Format: int32
       * @description Total inactive
       * @example 5
       */
      inactiveTotal?: number
      /**
       * Format: int32
       * @description Status of Inactive not approved
       * @example 6
       */
      inactiveNotApproved?: number
      /**
       * Format: int32
       * @description Status of Inactive aprroved
       * @example 3
       */
      inactiveApproved?: number
      /**
       * Format: int32
       * @description Inactive because HDC approved
       * @example 2
       */
      inactiveHdcApproved?: number
      /**
       * Format: int32
       * @description Approved but never printed
       * @example 1
       */
      approvedNotPrinted?: number
    }
    /** @description Describes a bespoke condition on a licence */
    BespokeCondition: {
      /**
       * Format: int64
       * @description The internal ID for this condition on this licence
       * @example 98989
       */
      id: number
      /**
       * Format: int32
       * @description The sequence of this bespoke condition on this licence
       * @example 1
       */
      sequence?: number
      /**
       * @description The text of this bespoke condition
       * @example You should not visit any music venues
       */
      text?: string
    }
    /** @description Describes a licence within this service */
    Licence: {
      /**
       * Format: int64
       * @description Unique identifier for this licence within the service
       * @example 99999
       */
      id: number
      /**
       * @description The licence type code
       * @example AP
       * @enum {string}
       */
      typeCode: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The version number used for standard and additional conditions
       * @example 1.4
       */
      version?: string
      /**
       * @description The current status code for this licence
       * @example IN_PROGRESS
       * @enum {string}
       */
      statusCode?:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /**
       * @description The prison identifier for the person on this licence
       * @example A9999AA
       */
      nomsId?: string
      /**
       * @description The prison booking number for the person on this licence
       * @example F12333
       */
      bookingNo?: string
      /**
       * Format: int64
       * @description The prison internal booking ID for the person on this licence
       * @example 989898
       */
      bookingId?: number
      /**
       * @description The case reference number (CRN) for the person on this licence
       * @example X12444
       */
      crn?: string
      /**
       * @description The police national computer number (PNC) for the person on this licence
       * @example 2015/12444
       */
      pnc?: string
      /**
       * @description The criminal records office number (CRO) for the person on this licence
       * @example A/12444
       */
      cro?: string
      /**
       * @description The agency code of the detaining prison
       * @example LEI
       */
      prisonCode?: string
      /**
       * @description The agency description of the detaining prison
       * @example Leeds (HMP)
       */
      prisonDescription?: string
      /**
       * @description The telephone number to contact the prison
       * @example 0161 234 4747
       */
      prisonTelephone?: string
      /**
       * @description The first name of the person on licence
       * @example Michael
       */
      forename?: string
      /**
       * @description The middle names of the person on licence
       * @example John Peter
       */
      middleNames?: string
      /**
       * @description The family name of the person on licence
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The date of birth of the person on licence
       */
      dateOfBirth?: string
      /**
       * Format: date
       * @description The earliest conditional release date of the person on licence
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date (if set)
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The date that the licence will start
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The date that the licence will expire
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts, from prison services
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends, from prison services
       */
      topupSupervisionExpiryDate?: string
      /**
       * @description The nDELIUS user name for the supervising probation officer
       * @example X32122
       */
      comUsername?: string
      /**
       * Format: int64
       * @description The nDELIUS staff identifier for the supervising probation officer
       * @example 12345
       */
      comStaffId?: number
      /**
       * @description The email address for the supervising probation officer
       * @example jane.jones@nps.gov.uk
       */
      comEmail?: string
      /**
       * @description The probation area code where this licence is supervised from
       * @example N01
       */
      probationAreaCode?: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The Probation Delivery Unit (PDU or borough) supervising this licence
       * @example PDU01
       */
      probationPduCode?: string
      /**
       * @description The description for the PDU
       * @example North Wales
       */
      probationPduDescription?: string
      /**
       * @description The Local Administrative Unit (LAU or district) supervising this licence
       * @example LAU01
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example North Wales
       */
      probationLauDescription?: string
      /**
       * @description The team code that is supervising this licence
       * @example Cardiff-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff South
       */
      probationTeamDescription?: string
      /**
       * @description Who the person will meet at their initial appointment
       * @example Duty officer
       */
      appointmentPerson?: string
      /**
       * Format: date-time
       * @description The date and time of the initial appointment
       */
      appointmentTime?: string
      /**
       * @description The address of initial appointment
       * @example Manchester Probation Service, Unit 4, Smith Street, Stockport, SP1 3DN
       */
      appointmentAddress?: string
      /**
       * @description The UK telephone number to contact the person the offender should meet for their initial meeting
       * @example 0114 2557665
       */
      appointmentContact?: string
      /**
       * @description Have you have discussed this variation request with your SPO?
       * @example Yes
       */
      spoDiscussion?: string
      /**
       * @description Have you consulted with the victim liaison officer (VLO) for this case?
       * @example Yes
       */
      vloDiscussion?: string
      /**
       * Format: date-time
       * @description The date and time that this prison approved this licence
       */
      approvedDate?: string
      /**
       * @description The username who approved the licence on behalf of the prison governor
       * @example X33221
       */
      approvedByUsername?: string
      /**
       * @description The full name of the person who approved the licence on behalf of the prison governor
       * @example John Smith
       */
      approvedByName?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was superseded by a new variant
       */
      supersededDate?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was first created
       */
      dateCreated?: string
      /**
       * @description The username which created this licence
       * @example X12333
       */
      createdByUsername?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was last updated
       */
      dateLastUpdated?: string
      /**
       * @description The username of the person who last updated this licence
       * @example X34433
       */
      updatedByUsername?: string
      /** @description The list of standard licence conditions on this licence */
      standardLicenceConditions?: components['schemas']['StandardCondition'][]
      /** @description The list of standard post sentence supervision conditions on this licence */
      standardPssConditions?: components['schemas']['StandardCondition'][]
      /** @description The list of additional licence conditions on this licence */
      additionalLicenceConditions: components['schemas']['AdditionalCondition'][]
      /** @description The list of additional post sentence supervision conditions on this licence */
      additionalPssConditions: components['schemas']['AdditionalCondition'][]
      /** @description The list of bespoke conditions on this licence */
      bespokeConditions: components['schemas']['BespokeCondition'][]
      /** @description Is this licence a variation of another licence? */
      isVariation: boolean
      /**
       * Format: int64
       * @description The licence Id which this licence is a variation of
       */
      variationOf?: number
      /**
       * @description The full name of the person who created licence or variation
       * @example Gordon Sumner
       */
      createdByFullName?: string
      /** @description Is this licence in PSS period?(LED < TODAY <= TUSED) */
      isInPssPeriod?: boolean
      /** @description Is this licence activated in PSS period?(LED < LAD <= TUSED) */
      isActivatedInPssPeriod?: boolean
    }
    AddAnother: {
      label: string
    }
    AdditionalConditionAp: {
      code: string
      category: string
      text: string
      tpl?: string
      requiresInput: boolean
      inputs?: components['schemas']['Input'][]
      categoryShort?: string
      subtext?: string
      type?: string
    }
    AdditionalConditionPss: {
      code: string
      category: string
      text: string
      tpl?: string
      requiresInput: boolean
      categoryShort?: string
      pssDates?: boolean
      inputs?: components['schemas']['Input'][]
      type?: string
    }
    AdditionalConditions: {
      AP: components['schemas']['AdditionalConditionAp'][]
      PSS: components['schemas']['AdditionalConditionPss'][]
    }
    ChangeHint: {
      previousCode: string
      replacements: string[]
    }
    Conditional: {
      inputs: components['schemas']['ConditionalInput'][]
    }
    ConditionalInput: {
      /** @enum {string} */
      type: 'radio' | 'address' | 'timePicker' | 'datePicker' | 'fileUpload' | 'text' | 'check'
      label: string
      name: string
      /** @enum {string} */
      case?: 'lower' | 'upper' | 'capitalised'
      handleIndefiniteArticle?: boolean
      includeBefore?: string
      subtext?: string
    }
    Input: {
      /** @enum {string} */
      type: 'radio' | 'address' | 'timePicker' | 'datePicker' | 'fileUpload' | 'text' | 'check'
      label: string
      name: string
      listType?: string
      options?: components['schemas']['Option'][]
      /** @enum {string} */
      case?: 'lower' | 'upper' | 'capitalised'
      handleIndefiniteArticle?: boolean
      addAnother?: components['schemas']['AddAnother']
      includeBefore?: string
      subtext?: string
    }
    LicencePolicy: {
      version: string
      standardConditions: components['schemas']['StandardConditions']
      additionalConditions: components['schemas']['AdditionalConditions']
      changeHints: components['schemas']['ChangeHint'][]
    }
    Option: {
      value: string
      conditional?: components['schemas']['Conditional']
    }
    StandardConditionAp: {
      /**
       * @description The unique code for this standard AP condition
       * @example 9ce9d594-e346-4785-9642-c87e764bee37
       */
      code: string
      /**
       * @description The text of this standard AP condition
       * @example Be of generally good behaviour
       */
      text: string
      tpl?: string
    }
    StandardConditionPss: {
      /**
       * @description The unique code for this standard PSS condition
       * @example 9ce9d594-e346-4785-9642-c87e764bee37
       */
      code: string
      /**
       * @description The text of this standard PSS condition
       * @example Be of generally good behaviour
       */
      text: string
      tpl?: string
    }
    StandardConditions: {
      AP: components['schemas']['StandardConditionAp'][]
      PSS: components['schemas']['StandardConditionPss'][]
    }
    LicenceConditionChanges: {
      /** @enum {string} */
      changeType: 'DELETED' | 'REPLACED' | 'REMOVED_NO_REPLACEMENTS' | 'NEW_OPTIONS' | 'TEXT_CHANGE'
      code: string
      /** Format: int32 */
      sequence?: number
      previousText: string
      currentText?: string
      suggestions: components['schemas']['SuggestedCondition'][]
    }
    SuggestedCondition: {
      code: string
      currentText: string
    }
    /** @description Describes an event that was related to a licence */
    LicenceEvent: {
      /**
       * Format: int64
       * @description The internal ID of the licence event
       * @example 1234
       */
      id?: number
      /**
       * Format: int64
       * @description The internal ID of the licence that this event relates to
       * @example 1234
       */
      licenceId?: number
      /**
       * @description The licence event type
       * @example LicenceEventType.VARIATION_SUBMITTED
       * @enum {string}
       */
      eventType?:
        | 'CREATED'
        | 'SUBMITTED'
        | 'BACK_IN_PROGRESS'
        | 'APPROVED'
        | 'ACTIVATED'
        | 'SUPERSEDED'
        | 'VARIATION_CREATED'
        | 'VARIATION_SUBMITTED_REASON'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REFERRED'
        | 'VARIATION_APPROVED'
        | 'INACTIVE'
        | 'RECALLED'
      /**
       * @description The username related to this event or SYSTEM if an automated event
       * @example X63533
       */
      username?: string
      /**
       * @description The forename of the person related to this event, or SYSTEM if an automated event.
       * @example Robert Mortimer
       */
      forenames?: string
      /**
       * @description The surname of the person related to this event, or SYSTEM if an automated event.
       * @example Robert Mortimer
       */
      surname?: string
      /**
       * @description A reason or description related to the event
       * @example Reason for variation
       */
      eventDescription?: string
      /**
       * Format: date-time
       * @description The date and time of the event
       */
      eventTime?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Get OMU email address.
   * @description Obtain prison Offender Management Unit email address. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getOmuContactByPrisonCode: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description The OMU was found */
      200: {
        content: {
          'application/json': components['schemas']['OmuContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found, the OMU email was not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the OMU email address.
   * @description Updates the OMU email address used to contact members of a prison OMU. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateOmuEmail: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateOmuEmailRequest']
      }
    }
    responses: {
      /** @description The OMU was updated */
      200: {
        content: {
          'application/json': components['schemas']['OmuContact']
        }
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete the OMU email address.
   * @description Delete prison Offender Management Unit email address. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  deleteOmuContactByPrisonCode: {
    parameters: {
      path: {
        prisonCode: string
      }
    }
    responses: {
      /** @description The OMU email address was deleted */
      200: {
        content: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the offender's personal information on all of their licences.
   * @description Updates the name and date of birth stored on all licences associated with the given offender. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateOffenderDetails: {
    parameters: {
      path: {
        nomsId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateOffenderDetailsRequest']
      }
    }
    responses: {
      /** @description The offender details were updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates in-flight licences associated with an offender with the community offender manager who is responsible for that offender.
   * @description Updates in-flight licences associated with an offender with the community offender manager who is responsible for that offender. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateResponsibleCom: {
    parameters: {
      path: {
        crn: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateComRequest']
      }
    }
    responses: {
      /** @description The responsible COM was updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates in-flight licences associated with an offender with a new probation team.
   * @description Updates in-flight licences associated with an offender with a new probation team. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateProbationTeam: {
    parameters: {
      path: {
        crn: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProbationTeamRequest']
      }
    }
    responses: {
      /** @description The probation team was updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Sets whether the variation has been discussed with a VLO.
   * @description Sets whether the variation has been discussed with a VLO. Either Yes or Not applicable. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateVloDiscussion: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVloDiscussionRequest']
      }
    }
    responses: {
      /** @description VLO discussion updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the status of a licence to SUBMITTED or VARIATION_SUBMITTED.
   * @description Update the status of a licence to SUBMITTED or VARIATION_SUBMITTED, and record the details of the COM who submitted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  submitLicence: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['NotifyRequest'][]
      }
    }
    responses: {
      /** @description Licence submitted for approval */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the status of a licence.
   * @description Update the status of a licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateLicenceStatus: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['StatusUpdateRequest']
      }
    }
    responses: {
      /** @description Licence status updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the standard conditions for a licence.
   * @description Replace the standard conditions against a licence if policy changes. Existing data for a condition which does not appear in this request will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateStandardConditions: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStandardConditionDataRequest']
      }
    }
    responses: {
      /** @description Standard conditions updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Sets whether the variation has been discussed with an SPO.
   * @description Sets whether the variation has been discussed with an SPO. Either Yes or No. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateSpoDiscussion: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSpoDiscussionRequest']
      }
    }
    responses: {
      /** @description SPO discussion updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the sentence dates.
   * @description Updates the sentence dates. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateSentenceDates: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSentenceDatesRequest']
      }
    }
    responses: {
      /** @description Sentence dates updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates a licence to referred and stores the reason provided.
   * @description Updates a licence to referred and stores the reason provided by the approver. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  referVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferVariationRequest']
      }
    }
    responses: {
      /** @description Licence updated to referred and the referral reason stored */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the reason for the licence variation.
   * @description Updates the reason for the licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateReasonForVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateReasonForVariationRequest']
      }
    }
    responses: {
      /** @description Reason for variation updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the prison information.
   * @description Updates the prison information. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updatePrisonInformation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePrisonInformationRequest']
      }
    }
    responses: {
      /** @description Prison information updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Override licence dates
   * @description Override the dates for an exising licence. Only to be used in exceptional circumstances. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  changeDates: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OverrideLicenceDatesRequest']
      }
    }
    responses: {
      /** @description Licence dates have been updated */
      200: {
        content: never
      }
      /** @description Accepted */
      202: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the officer contact number for a licence
   * @description Update the contact number for the officer related to this licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateContactNumber: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ContactNumberRequest']
      }
    }
    responses: {
      /** @description Contact number updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add or replace the bespoke conditions for a licence.
   * @description Add or replace the bespoke conditions on a licence with the content of this request. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateBespokeConditions: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BespokeConditionRequest']
      }
    }
    responses: {
      /** @description Bespoke conditions added or replaced */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Approves a licence variation.
   * @description Approves a licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  approveVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** @description Variation approved */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the appointment date and time
   * @description Update the date and time for the initial appointment. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateAppointmentTime: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentTimeRequest']
      }
    }
    responses: {
      /** @description Appointment date and time updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the person to meet at the initial appointment
   * @description Update the person the person on probation will meet at the initial appointment Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateAppointmentPerson: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentPersonRequest']
      }
    }
    responses: {
      /** @description Appointment person updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the address where the initial appointment will take place
   * @description Update the address where the initial appointment will take place. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateAppointmentAddress: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentAddressRequest']
      }
    }
    responses: {
      /** @description Address updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the set of additional conditions on the licence.
   * @description Update the set of additional conditions on the licence. This does not include accompanying data per condition. Existing conditions which appear on the licence but which are not supplied to this endpoint will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateAdditionalConditions: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditionalConditionsRequest']
      }
    }
    responses: {
      /** @description Set of additional conditions updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update the user entered data to accompany an additional condition template.
   * @description Update the user entered data to accompany an additional condition template. Existing data for a condition which does not appear in this request will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateAdditionalConditionData: {
    parameters: {
      path: {
        licenceId: number
        additionalConditionId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAdditionalConditionDataRequest']
      }
    }
    responses: {
      /** @description Additional condition updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Removes a previously uploaded exclusion zone file from an additional condition.
   * @description Removes a previously uploaded exclusion zone file. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  removeExclusionZoneFile: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    responses: {
      /** @description The exclusion zone file was removed */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates the details of a community offender manager.
   * @description Updates the details of a community offender manager (e.g. email address). Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  updateComDetails: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateComRequest']
      }
    }
    responses: {
      /** @description The COM was updated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Records an auditable event.
   * @description Records an auditable event related to an action taken by a user or an automated in-service process. Requires ROLE_CVL_ADMIN.
   */
  recordAuditEvent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditEvent']
      }
    }
    responses: {
      /** @description The audit event was recorded */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Job to remove AP conditions.
   * @description Triggers a job that removes AP conditions for all licences that are in PSS period and status equal to 'VARIATION_IN_PROGRESS' or 'VARIATION_SUBMITTED' or 'VARIATION_REJECTED' or 'VARIATION_APPROVED'. Requires ROLE_CVL_ADMIN.
   */
  runRemoveExpiredConditionsJob: {
    responses: {
      /** @description run-remove-ap-conditions-job */
      200: {
        content: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Triggers the licence activation job.
   * @description Triggers a job that causes licences with a status of APPROVED, a CRD or ARD of today, and that are either IS91 cases or have an NOMIS status beginning with 'INACTIVE' to be activated. Deactivates offenders with approved HDC licences. Requires ROLE_CVL_ADMIN.
   */
  runLicenceActivationJob: {
    responses: {
      /** @description Activation job executed. */
      200: {
        content: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Send an email to probation practitioner of any previously approved licences that have been edited but not re-approved by prisoners release date
   * @description Send email to probation practioner. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  notifyProbationOfUnapprovedLicences: {
    responses: {
      /** @description Emails sent */
      200: {
        content: {
          'application/json': components['schemas']['UnapprovedLicence']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of recently approved licence summaries matching the supplied list of prisons.
   * @description Get the recently approved licences matching the supplied list of prisons. Requires ROLE_CVL_ADMIN.
   */
  getRecentlyApprovedLicences: {
    requestBody: {
      content: {
        'application/json': components['schemas']['RecentlyApprovedLicencesRequest']
      }
    }
    responses: {
      /** @description Returned matching licence summary details - empty if no matches. */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of licence summaries matching the supplied criteria.
   * @description Get the licences matching the supplied lists of status, prison, staffId, nomsId and PDU. Requires ROLE_CVL_ADMIN.
   */
  getLicencesMatchingCriteria: {
    parameters: {
      query?: {
        sortBy?: string
        sortOrder?: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MatchLicencesRequest']
      }
    }
    responses: {
      /** @description Returned matching licence summary details - empty if no matches. */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Inactivate licences in bulk
   * @description Set licence statuses to INACTIVE. Accepts a list of licence IDs. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  inactivateLicences: {
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description Inactivate Licences */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Override a licence status
   * @description Override the status for an exising licence. Only to be used in exceptional circumstances. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  changeStatus: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OverrideLicenceStatusRequest']
      }
    }
    responses: {
      /** @description Status has been updated */
      202: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create a new version of an approved licence
   * @description Create a new version of an  approved licence. The new licence will have a new id and have status IN_PROGRESS. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  editLicence: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** @description Licence version created */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create a variation of this licence
   * @description Create a variation of this licence. The new licence will have a new ID and have a status VARIATION_IN_PROGRESS. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  createVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** @description Licence variation created */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary']
        }
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add additional condition to the licence.
   * @description Add additional condition to the licence. This does not include accompanying data per condition. Existing conditions which appear on the licence will be unaffected. More than one condition with the same code can be added Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  addAdditionalCondition: {
    parameters: {
      path: {
        licenceId: number
        conditionType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddAdditionalConditionRequest']
      }
    }
    responses: {
      /** @description Set of additional conditions added */
      200: {
        content: {
          'application/json': components['schemas']['AdditionalCondition']
        }
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create a licence
   * @description Creates a licence with the default status IN_PROGRESS and populates with the details provided. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  createLicence: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLicenceRequest']
      }
    }
    responses: {
      /** @description Licence created */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Activate licences in bulk
   * @deprecated
   * @description Set licence statuses to ACTIVE. Accepts a list of licence IDs. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  activateLicences: {
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description Licences activated */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Upload a multipart/form-data request containing a PDF exclusion zone file.
   * @description Uploads a PDF file containing an exclusion zone map and description. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  uploadExclusionZoneFile: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string
        }
      }
    }
    responses: {
      /** @description The exclusion zone file was uploaded */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Notifies the COM of upcoming releases which they need to create a licence for.
   * @description Notifies the COM of upcoming releases which they need to create a licence for. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  notifyOfUpcomingReleasesRequiringLicence: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptLicenceCreationRequest'][]
      }
    }
    responses: {
      /** @description The COM was notified */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Search for offenders on a given staff member's caseload.
   * @description Search for offenders on a given staff member's caseload.. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  searchForOffenderOnStaffCaseload: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ProbationUserSearchRequest']
      }
    }
    responses: {
      /** @description The query retrieved a set of enriched results */
      200: {
        content: {
          'application/json': components['schemas']['ProbationSearchResult']
        }
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieves a list of auditable events matching the criteria provided.
   * @description Retrieves a list of auditable events matching the criteria provided. Requires ROLE_CVL_ADMIN.
   */
  requestAuditEvents: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditRequest']
      }
    }
    responses: {
      /** @description The a list of matching auditable events is returned. */
      200: {
        content: {
          'application/json': components['schemas']['AuditEvent'][]
        }
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get licence statistics.
   * @deprecated
   * @description Licence statistics data required by the support staff. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getLicenceStatistics: {
    parameters: {
      query: {
        startDate: string
        endDate: string
      }
    }
    responses: {
      /** @description Licence statistics found */
      200: {
        content: {
          'application/json': components['schemas']['LicenceStatistics']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Licence statistics not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of licence summaries for submitted variations by probation area.
   * @description Get a list of licence summaries for all submitted variations belonging to the specified probation area code. Requires ROLE_CVL_ADMIN.
   */
  submittedVariations: {
    parameters: {
      path: {
        areaCode: string
      }
    }
    responses: {
      /** @description Returned matching licence summary details - empty if no matches. */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a licence by its licence id
   * @description Returns a single licence detail by its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getLicenceById: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** @description Licence found */
      200: {
        content: {
          'application/json': components['schemas']['Licence']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get licence policy be version number
   * @description Returns a single policy using its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getPolicyByVersion: {
    parameters: {
      path: {
        version: string
      }
    }
    responses: {
      /** @description Licence Policy found */
      200: {
        content: {
          'application/json': components['schemas']['LicencePolicy']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get differences between saved licences conditions and new policy
   * @description Returns condition data saved against a licence no longer present within the new licence policyRequires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  compareLicence: {
    parameters: {
      path: {
        version: string
        licenceId: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['LicenceConditionChanges'][]
        }
      }
    }
  }
  /**
   * Get the active licence policy
   * @description Returns the active policy using its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getCurrentPolicy: {
    responses: {
      /** @description Licence Policy found */
      200: {
        content: {
          'application/json': components['schemas']['LicencePolicy']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all licence policy versions
   * @description Returns a list of policies, active and presentRequires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getPolicies: {
    responses: {
      /** @description Licence Policy found */
      200: {
        content: {
          'application/json': components['schemas']['LicencePolicy']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get the exclusion zone map image for a specified licence and condition
   * @description Get the exclusion zone map image. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  getExclusionZoneImage: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    responses: {
      /** @description Image returned */
      200: {
        content: {
          'image/jpeg': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No image was found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a list of licence events that match the supplied criteria.
   * @description Get a list of licence events that match the supplied criteria. Requires ROLE_CVL_ADMIN.
   */
  getEventsMatchingCriteria: {
    parameters: {
      query?: {
        licenceId?: number
        eventType?: (
          | 'CREATED'
          | 'SUBMITTED'
          | 'BACK_IN_PROGRESS'
          | 'APPROVED'
          | 'ACTIVATED'
          | 'SUPERSEDED'
          | 'VARIATION_CREATED'
          | 'VARIATION_SUBMITTED_REASON'
          | 'VARIATION_IN_PROGRESS'
          | 'VARIATION_SUBMITTED'
          | 'VARIATION_REFERRED'
          | 'VARIATION_APPROVED'
          | 'INACTIVE'
          | 'RECALLED'
        )[]
        sortBy?: string
        sortOrder?: string
      }
    }
    responses: {
      /** @description Returned matching licence events - empty if no matches. */
      200: {
        content: {
          'application/json': components['schemas']['LicenceEvent'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Discards a licence record.
   * @description Discards a licence record. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN.
   */
  discard: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** @description Licence discarded */
      200: {
        content: never
      }
      /** @description Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove additional condition with specified condition Id
   * @description Remove additional condition from the licence list of additional conditions.All user submitted condition data will also be removed.
   */
  deleteAdditionalCondition: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    responses: {
      /** @description Condition has been removed from the licence */
      204: {
        content: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
