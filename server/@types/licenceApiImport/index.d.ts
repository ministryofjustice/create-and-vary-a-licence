/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/offender/crn/{crn}/responsible-com': {
    /** Updates in-flight licences associated with an offender with the community offender manager who is responsible for that offender. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateResponsibleCom']
  }
  '/licence/id/{licenceId}/vlo-discussion': {
    /** Sets whether the variation has been discussed with a VLO. Either Yes or Not applicable. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateVloDiscussion']
  }
  '/licence/id/{licenceId}/submit': {
    /** Update the status of a licence to SUBMITTED or VARIATION_SUBMITTED, and record the details of the COM who submitted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['submitLicence']
  }
  '/licence/id/{licenceId}/status': {
    /** Update the status of a licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateLicenceStatus']
  }
  '/licence/id/{licenceId}/spo-discussion': {
    /** Sets whether the variation has been discussed with an SPO. Either Yes or No. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateSpoDiscussion']
  }
  '/licence/id/{licenceId}/sentence-dates': {
    /** Updates the sentence dates. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateSentenceDates']
  }
  '/licence/id/{licenceId}/refer-variation': {
    /** Updates a licence to referred and stores the reason provided by the approver. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['referVariation']
  }
  '/licence/id/{licenceId}/reason-for-variation': {
    /** Updates the reason for the licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateReasonForVariation']
  }
  '/licence/id/{licenceId}/prison-information': {
    /** Updates the prison information. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updatePrisonInformation']
  }
  '/licence/id/{licenceId}/contact-number': {
    /** Update the contact number for the officer related to this licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateContactNumber']
  }
  '/licence/id/{licenceId}/bespoke-conditions': {
    /** Add or replace the bespoke conditions on a licence with the content of this request. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateBespokeConditions']
  }
  '/licence/id/{licenceId}/approve-variation': {
    /** Approves a licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['approveVariation']
  }
  '/licence/id/{licenceId}/appointmentTime': {
    /** Update the date and time for the initial appointment. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateAppointmentTime']
  }
  '/licence/id/{licenceId}/appointmentPerson': {
    /** Update the person the person on probation will meet at the initial appointment Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateAppointmentPerson']
  }
  '/licence/id/{licenceId}/appointment-address': {
    /** Update the address where the initial appointment will take place. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateAppointmentAddress']
  }
  '/licence/id/{licenceId}/additional-conditions': {
    /** Update the set of additional conditions on the licence. This does not include accompanying data per condition. Existing conditions which appear on the licence but which are not supplied to this endpoint will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateAdditionalConditions']
  }
  '/licence/id/{licenceId}/additional-conditions/condition/{additionalConditionId}': {
    /** Update the user entered data to accompany an additional condition template. Existing data for a condition which does not appear in this request will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateAdditionalConditionData']
  }
  '/exclusion-zone/id/{licenceId}/condition/id/{conditionId}/remove-upload': {
    /** Removes a previously uploaded exclusion zone file. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['removeExclusionZoneFile']
  }
  '/com/update': {
    /** Updates the details of a community offender manager (e.g. email address). Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    put: operations['updateComDetails']
  }
  '/audit/save': {
    /** Records an auditable event related to an action taken by a user or an automated in-service process. Requires ROLE_CVL_ADMIN. */
    put: operations['recordAuditEvent']
  }
  '/licence/id/{licenceId}/create-variation': {
    /** Create a variation of this licence. The new licence will have a new ID and have a statius VARIATION_IN_PROGRESS. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    post: operations['createVariation']
  }
  '/licence/create': {
    /** Creates a licence with the default status IN_PROGRESS and populates with the details provided. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    post: operations['createLicence']
  }
  '/licence/activate-licences': {
    /** Set licence statuses to ACTIVE. Accepts a list of licence IDs. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    post: operations['activateLicences']
  }
  '/exclusion-zone/id/{licenceId}/condition/id/{conditionId}/file-upload': {
    /** Uploads a PDF file containing an exclusion zone map and description. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    post: operations['uploadExclusionZoneFile']
  }
  '/com/prompt-licence-creation': {
    /** Notifies the COM of upcoming releases which they need to create a licence for. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    post: operations['notifyOfUpcomingReleasesRequiringLicence']
  }
  '/audit/retrieve': {
    /** Retrieves a list of auditable events matching the criteria provided. Requires ROLE_CVL_ADMIN. */
    post: operations['requestAuditEvents']
  }
  '/licence/match': {
    /** Get the licences matching the supplied lists of status, prison, staffId, nomsId and PDU. Requires ROLE_CVL_ADMIN. */
    get: operations['getLicencesMatchingCriteria']
  }
  '/licence/id/{licenceId}': {
    /** Returns a single licence detail by its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    get: operations['getLicenceById']
  }
  '/exclusion-zone/id/{licenceId}/condition/id/{conditionId}/full-size-image': {
    /** Get the exclusion zone map image. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    get: operations['getExclusionZoneImage']
  }
  '/events/match': {
    /** Get a list of licence events that match the supplied criteria. Requires ROLE_CVL_ADMIN. */
    get: operations['getEventsMatchingCriteria']
  }
  '/config/pdu-contacts': {
    /** Retrieves a list of PDU contacts configured in this environment. Requires ROLE_CVL_ADMIN. */
    get: operations['pduContacts']
  }
  '/licence/id/{licenceId}/discard': {
    /** Discards a licence record. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
    delete: operations['discard']
  }
}

export interface components {
  schemas: {
    /** @description Request object for updating the COM responsible for an offender */
    UpdateComRequest: {
      /**
       * Format: int64
       * @description The unique identifier of the COM, retrieved from Delius
       * @example 22003829
       */
      staffIdentifier: number
      /**
       * @description The Delius username for the COM
       * @example jbloggs
       */
      staffUsername: string
      /**
       * @description The email address of the COM
       * @example jbloggs@probation.gov.uk
       */
      staffEmail?: string
      /**
       * @description The first name of the COM
       * @example Joseph
       */
      firstName?: string
      /**
       * @description The last name of the COM
       * @example Bloggs
       */
      lastName?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Request object for updating the VLO discussion */
    UpdateVloDiscussionRequest: {
      /**
       * @description Whether or not the licence variation has been discussed with a VLO
       * @example Yes
       */
      vloDiscussion: string
    }
    /** @description Request object for updating the status of a licence */
    StatusUpdateRequest: {
      /**
       * @description The new status for this licence
       * @example APPROVED
       * @enum {string}
       */
      status:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /**
       * @description The username of the person who is updating this status
       * @example X12333
       */
      username: string
      /**
       * @description The full name of the person who is updating this status
       * @example John Smythe
       */
      fullName?: string
    }
    /** @description Request object for updating the SPO discussion */
    UpdateSpoDiscussionRequest: {
      /**
       * @description Whether or not the licence variation has been discussed with an SPO
       * @example Yes
       */
      spoDiscussion: string
    }
    /** @description Request object for updating sentence dates */
    UpdateSentenceDatesRequest: {
      /**
       * Format: date
       * @description The conditional release date, from prison services
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date, from prison services
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date, from prison services
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date, from prison services
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The licence start date, from prison services
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The licence end date, from prison services
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts, from prison services
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends, from prison services
       */
      topupSupervisionExpiryDate?: string
    }
    /** @description Request object for referring a licence variation */
    ReferVariationRequest: {
      /** @description A large string containing rich text markup. A reason for referring the licence variation. */
      reasonForReferral: string
    }
    /** @description Request object for updating the reason for variation */
    UpdateReasonForVariationRequest: {
      /** @description A large string containing rich text markup. A reason for varying the licence. */
      reasonForVariation: string
    }
    /** @description Request object for updating the prison information on a licence */
    UpdatePrisonInformationRequest: {
      /**
       * @description The identifier of the prison
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The detailed name of the prison
       * @example Pentonville (HMP)
       */
      prisonDescription: string
      /**
       * @description The prison telephone number
       * @example +44 276 54545
       */
      prisonTelephone?: string
    }
    /** @description Request object for updating the contact number of the officer on a licence */
    ContactNumberRequest: {
      /**
       * @description The UK telephone number to contact the person the offender should meet for their initial meeting
       * @example 0114 2557665
       */
      telephone: string
    }
    /** @description A list of bespoke conditions to add to a licence */
    BespokeConditionRequest: {
      /**
       * @description A list of bespoke conditions to add to a licence
       * @example ['cond1', 'cond2']
       */
      conditions: string[]
    }
    /** @description Request object for updating the date and time of the initial appointment */
    AppointmentTimeRequest: {
      /**
       * Format: date-time
       * @description The date and time of the initial appointment
       */
      appointmentTime: string
    }
    /** @description Request object for updating the person the person on probation will meet at the initial appointment */
    AppointmentPersonRequest: {
      /**
       * @description The name of the person the person on probation will meet at the initial appointment
       * @example John Smith
       */
      appointmentPerson: string
    }
    /** @description Request object for updating the address of the initial appointment */
    AppointmentAddressRequest: {
      /**
       * @description The address of initial appointment
       * @example Manchester Probation Service, Unit 4, Smith Street, Stockport, SP1 3DN
       */
      appointmentAddress: string
    }
    /** @description Describes an additional condition */
    AdditionalCondition: {
      /**
       * Format: int64
       * @description The internal ID for this additional condition for this licence
       * @example 98989
       */
      id?: number
      /**
       * @description Coded value for the additional condition
       * @example meetingAddress
       */
      code?: string
      /**
       * @description The category of the additional condition
       * @example Freedom of movement
       */
      category?: string
      /**
       * Format: int32
       * @description Sequence of this additional condition within the additional conditions
       * @example 1
       */
      sequence?: number
      /**
       * @description The textual value for this additional condition
       * @example You must not enter the location [DESCRIPTION]
       */
      text?: string
      /** @description The list of data items entered for this additional condition */
      data: components['schemas']['AdditionalConditionData'][]
      /** @description The list of file upload summary for this additional condition */
      uploadSummary: components['schemas']['AdditionalConditionUploadSummary'][]
    }
    /** @description Describes the data entered for an additional condition */
    AdditionalConditionData: {
      /**
       * Format: int64
       * @description The internal ID of this data item, for this condition on this licence
       * @example 98989
       */
      id: number
      /**
       * @description The field name of this data item for this condition on this licence
       * @example location
       */
      field?: string
      /**
       * @description The value of this data item
       * @example Norfolk
       */
      value?: string
      /**
       * Format: int32
       * @description The sequence of this data item, for this condition on this licence
       * @example 1
       */
      sequence: number
    }
    /** @description Describes the files uploaded for an additional condition */
    AdditionalConditionUploadSummary: {
      /**
       * Format: int64
       * @description The internal ID of this upload for this condition on this licence
       * @example 98989
       */
      id: number
      /**
       * @description The original file name uploaded for this condition on this licence
       * @example exclusion-zone.pdf
       */
      filename?: string
      /**
       * @description The file type uploaded for this condition on this licence
       * @example application/pdf
       */
      fileType?: string
      /**
       * Format: int32
       * @description The original file size in bytes
       * @example 27566
       */
      fileSize: number
      /**
       * Format: date-time
       * @description The date and time this file was uploaded
       */
      uploadedTime: string
      /**
       * @description The description provided in this document
       * @example A description of the exclusion zone boundaries
       */
      description?: string
      /**
       * @description The thumbnail for the  exclusion zone map as a base64-encoded JPEG image
       * @example Base64 string
       */
      thumbnailImage?: string
      /**
       * Format: int64
       * @description The id which references the original file data and full size image
       * @example 9999
       */
      uploadDetailId: number
    }
    /** @description Request object for updating the list of additional conditions on a licence */
    AdditionalConditionsRequest: {
      /** @description The list of additional conditions */
      additionalConditions: components['schemas']['AdditionalCondition'][]
      /**
       * @description The type of additional condition, either licence or post sentence supervision
       * @enum {string}
       */
      conditionType: 'AP' | 'PSS'
    }
    /** @description Request object for updating the list of additional conditions on a licence */
    UpdateAdditionalConditionDataRequest: {
      /** @description The list of data inputs associated with this additional condition */
      data: components['schemas']['AdditionalConditionData'][]
    }
    /** @description Describes an audit event request */
    AuditEvent: {
      /**
       * Format: int64
       * @description The internal ID of the audit event
       * @example 1234
       */
      id?: number
      /**
       * Format: int64
       * @description The internal ID of the licence that this event related to, or null if unrelated to a licence
       * @example 1234
       */
      licenceId?: number
      /**
       * Format: date-time
       * @description The date and time of the event
       */
      eventTime: string
      /**
       * @description Username who initiated the event, if a user event, or SYSTEM if an automated event
       * @example X63533
       */
      username?: string
      /**
       * @description The full name of the person who performed this auditable event, or SYSTEM if an automated event.
       * @example Robert Mortimer
       */
      fullName?: string
      /**
       * @description The event type. One of SYSTEM_EVENT or USER_EVENT
       * @example USER_EVENT
       * @enum {string}
       */
      eventType: 'USER_EVENT' | 'SYSTEM_EVENT'
      /**
       * @description A summary of the action taken
       * @example Updated a bespoke condition
       */
      summary: string
      /**
       * @description A detailed description of the action taken
       * @example Updated a bespoke condition
       */
      detail?: string
    }
    /** @description Response object which summarises a licence */
    LicenceSummary: {
      /**
       * Format: int64
       * @description Internal identifier for this licence generated within this service
       * @example 123344
       */
      licenceId: number
      /**
       * @description Licence type code
       * @example AP
       * @enum {string}
       */
      licenceType: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The status of this licence
       * @example IN_PROGRESS
       * @enum {string}
       */
      licenceStatus:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /**
       * @description The prison nomis identifier for this offender
       * @example A1234AA
       */
      nomisId?: string
      /**
       * @description The offender surname
       * @example Smith
       */
      surname?: string
      /**
       * @description The offender forename
       * @example Brian
       */
      forename?: string
      /**
       * @description The prison code where this offender resides or was released from
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The prison where this offender resides or was released from
       * @example Moorland (HMP)
       */
      prisonDescription?: string
      /**
       * @description The probation area code where the licence is supervised
       * @example N01
       */
      probationAreaCode?: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The probation delivery unit (PDU or borough) where the licence is supervised
       * @example N01CA
       */
      probationPduCode?: string
      /**
       * @description The description for the PDU
       * @example North Wales
       */
      probationPduDescription?: string
      /**
       * @description The local administrative unit (LAU or district) where the licence is supervised
       * @example NA01CA-02
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example North Wales
       */
      probationLauDescription?: string
      /**
       * @description The probation team code which supervises the licence
       * @example NA01CA-02-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff South
       */
      probationTeamDescription?: string
      /**
       * Format: date
       * @description The conditional release date on the licence
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date on the licence
       */
      actualReleaseDate?: string
      /**
       * @description The case reference number (CRN) of this person, from either prison or probation service
       * @example X12344
       */
      crn?: string
      /**
       * Format: date
       * @description The offender's date of birth, from either prison or probation services
       */
      dateOfBirth?: string
      /**
       * @description The username of the responsible probation officer
       * @example jsmith
       */
      comUsername?: string
    }
    /** @description Request object for creating a new licence */
    CreateLicenceRequest: {
      /**
       * @description Type of licence requested - one of AP, PSS or AP_PSS
       * @example AP
       * @enum {string}
       */
      typeCode: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The version of licence conditions currently active as a string value
       * @example 1.0
       */
      version: string
      /**
       * @description The prison nomis identifier for this offender
       * @example A1234AA
       */
      nomsId: string
      /**
       * @description The prison booking number for the current sentence for this offender
       * @example 12334
       */
      bookingNo: string
      /**
       * Format: int64
       * @description The prison booking id for the current sentence for this offender
       * @example 87666
       */
      bookingId: number
      /**
       * @description The case reference number (CRN) of this person, from either prison or probation service
       * @example X12344
       */
      crn: string
      /**
       * @description The police national computer number (PNC) of this person, from either prison or probation service
       * @example 2014/12344A
       */
      pnc?: string
      /**
       * @description The criminal records office (CRO) identifier police of this person, from either prison or probation service
       * @example 2014/12344A
       */
      cro?: string
      /**
       * @description The prison location code where this person is currently resident - leave null if not in prison
       * @example MDI
       */
      prisonCode: string
      /**
       * @description The prison description - leave null if not in prison
       * @example Leeds (HMP)
       */
      prisonDescription: string
      /**
       * @description The prison telephone number - leave null if not in prison
       * @example +44 276 54545
       */
      prisonTelephone?: string
      /**
       * @description The offender forename
       * @example Steven
       */
      forename: string
      /**
       * @description The offender middle names
       * @example Jason Kyle
       */
      middleNames?: string
      /**
       * @description The offender surname
       * @example Smith
       */
      surname: string
      /**
       * Format: date
       * @description The offender's date of birth, from either prison or probation services
       */
      dateOfBirth: string
      /**
       * Format: date
       * @description The conditional release date, from prison services
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date, from prison services
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date, from prison services
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date, from prison services
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The licence start date, from prison services
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The licence end date, from prison services
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts, from prison services
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends, from prison services
       */
      topupSupervisionExpiryDate?: string
      /**
       * @description The probation area code supervising this licence
       * @example N01
       */
      probationAreaCode: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The probation delivery unit (PDU or borough) code
       * @example NA01A12
       */
      probationPduCode?: string
      /**
       * @description The PDU description
       * @example Cardiff
       */
      probationPduDescription?: string
      /**
       * @description The local administrative unit (LAU or district) code
       * @example NA01A12
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example Cardiff North
       */
      probationLauDescription?: string
      /**
       * @description The probation team code supervising this licence
       * @example NA01A12-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff North A
       */
      probationTeamDescription?: string
      /** @description The list of standard licence conditions from service configuration */
      standardLicenceConditions: components['schemas']['StandardCondition'][]
      /** @description The list of standard post sentence supervision conditions from service configuration */
      standardPssConditions: components['schemas']['StandardCondition'][]
      /**
       * Format: int64
       * @description The community offender manager who is responsible for this case
       * @example 1231332
       */
      responsibleComStaffId: number
    }
    /** @description Describes a standard condition on this licence */
    StandardCondition: {
      /**
       * Format: int64
       * @description The internal ID for this standard condition on this licence
       * @example 98987
       */
      id?: number
      /**
       * @description The unique code for this standard condition
       * @example 9ce9d594-e346-4785-9642-c87e764bee37
       */
      code?: string
      /**
       * Format: int32
       * @description The sequence of this standard condition
       * @example 1
       */
      sequence?: number
      /**
       * @description The text of this standard condition
       * @example Be of generally good behaviour
       */
      text?: string
    }
    /** @description Describes a prisoner due for release */
    PrisonerForRelease: {
      /**
       * @description The full name of the prisoner
       * @example John Smith
       */
      name: string
      /**
       * Format: date
       * @description The date on which the prisoner leaves custody
       */
      releaseDate: string
    }
    /** @description Describes a COM's contact details and the upcoming releases that they must consider for licence creation */
    PromptLicenceCreationRequest: {
      /**
       * @description The email address of the COM
       * @example jbloggs@probation.gov.uk
       */
      email: string
      /**
       * @description The full name of the COM
       * @example Joseph Bloggs
       */
      comName: string
      /** @description The list of prisoners for whom the COM should be notified of needing a licence */
      initialPromptCases: components['schemas']['PrisonerForRelease'][]
      /** @description The list of prisoners for whom the COM should be notified of needing a licence urgently */
      urgentPromptCases: components['schemas']['PrisonerForRelease'][]
    }
    /** @description Describes an audit event request */
    AuditRequest: {
      /**
       * Format: int64
       * @description The internal ID of the licence to request audit events for
       * @example 1234
       */
      licenceId?: number
      /**
       * @description Username to request events for
       * @example X63533
       */
      username?: string
      /**
       * Format: date-time
       * @description The start date and time to query for events (default is 1 month ago)
       */
      startTime: string
      /**
       * Format: date-time
       * @description The end time to query for events (default is now)
       */
      endTime: string
    }
    /** @description Describes a bespoke condition on a licence */
    BespokeCondition: {
      /**
       * Format: int64
       * @description The internal ID for this condition on this licence
       * @example 98989
       */
      id: number
      /**
       * Format: int32
       * @description The sequence of this bespoke condition on this licence
       * @example 1
       */
      sequence?: number
      /**
       * @description The text of this bespoke condition
       * @example You should not visit any music venues
       */
      text?: string
    }
    /** @description Describes a licence within this service */
    Licence: {
      /**
       * Format: int64
       * @description Unique identifier for this licence within the service
       * @example 99999
       */
      id: number
      /**
       * @description The licence type code
       * @example AP
       * @enum {string}
       */
      typeCode: 'AP' | 'AP_PSS' | 'PSS'
      /**
       * @description The version number used for standard and additional conditions
       * @example 1.4
       */
      version?: string
      /**
       * @description The current status code for this licence
       * @example IN_PROGRESS
       * @enum {string}
       */
      statusCode?:
        | 'IN_PROGRESS'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVE'
        | 'REJECTED'
        | 'INACTIVE'
        | 'RECALLED'
        | 'VARIATION_IN_PROGRESS'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REJECTED'
        | 'VARIATION_APPROVED'
      /**
       * @description The prison identifier for the person on this licence
       * @example A9999AA
       */
      nomsId?: string
      /**
       * @description The prison booking number for the person on this licence
       * @example F12333
       */
      bookingNo?: string
      /**
       * Format: int64
       * @description The prison internal booking ID for the person on this licence
       * @example 989898
       */
      bookingId?: number
      /**
       * @description The case reference number (CRN) for the person on this licence
       * @example X12444
       */
      crn?: string
      /**
       * @description The police national computer number (PNC) for the person on this licence
       * @example 2015/12444
       */
      pnc?: string
      /**
       * @description The criminal records office number (CRO) for the person on this licence
       * @example A/12444
       */
      cro?: string
      /**
       * @description The agency code of the detaining prison
       * @example LEI
       */
      prisonCode?: string
      /**
       * @description The agency description of the detaining prison
       * @example Leeds (HMP)
       */
      prisonDescription?: string
      /**
       * @description The telephone number to contact the prison
       * @example 0161 234 4747
       */
      prisonTelephone?: string
      /**
       * @description The first name of the person on licence
       * @example Michael
       */
      forename?: string
      /**
       * @description The middle names of the person on licence
       * @example John Peter
       */
      middleNames?: string
      /**
       * @description The family name of the person on licence
       * @example Smith
       */
      surname?: string
      /**
       * Format: date
       * @description The date of birth of the person on licence
       */
      dateOfBirth?: string
      /**
       * Format: date
       * @description The earliest conditional release date of the person on licence
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description The actual release date (if set)
       */
      actualReleaseDate?: string
      /**
       * Format: date
       * @description The sentence start date
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date
       */
      sentenceEndDate?: string
      /**
       * Format: date
       * @description The date that the licence will start
       */
      licenceStartDate?: string
      /**
       * Format: date
       * @description The date that the licence will expire
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period starts, from prison services
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description The date when the post sentence supervision period ends, from prison services
       */
      topupSupervisionExpiryDate?: string
      /**
       * @description The nDELIUS user name for the supervising probation officer
       * @example X32122
       */
      comUsername?: string
      /**
       * Format: int64
       * @description The nDELIUS staff identifier for the supervising probation officer
       * @example 12345
       */
      comStaffId?: number
      /**
       * @description The email address for the supervising probation officer
       * @example jane.jones@nps.gov.uk
       */
      comEmail?: string
      /**
       * @description The probation area code where this licence is supervised from
       * @example N01
       */
      probationAreaCode?: string
      /**
       * @description The probation area description
       * @example Wales
       */
      probationAreaDescription?: string
      /**
       * @description The Probation Delivery Unit (PDU or borough) supervising this licence
       * @example PDU01
       */
      probationPduCode?: string
      /**
       * @description The description for the PDU
       * @example North Wales
       */
      probationPduDescription?: string
      /**
       * @description The Local Administrative Unit (LAU or district) supervising this licence
       * @example LAU01
       */
      probationLauCode?: string
      /**
       * @description The LAU description
       * @example North Wales
       */
      probationLauDescription?: string
      /**
       * @description The team code that is supervising this licence
       * @example Cardiff-A
       */
      probationTeamCode?: string
      /**
       * @description The team description
       * @example Cardiff South
       */
      probationTeamDescription?: string
      /**
       * @description Who the person will meet at their initial appointment
       * @example Duty officer
       */
      appointmentPerson?: string
      /**
       * Format: date-time
       * @description The date and time of the initial appointment
       */
      appointmentTime?: string
      /**
       * @description The address of initial appointment
       * @example Manchester Probation Service, Unit 4, Smith Street, Stockport, SP1 3DN
       */
      appointmentAddress?: string
      /**
       * @description The UK telephone number to contact the person the offender should meet for their initial meeting
       * @example 0114 2557665
       */
      appointmentContact?: string
      /**
       * @description Have you have discussed this variation request with your SPO?
       * @example Yes
       */
      spoDiscussion?: string
      /**
       * @description Have you consulted with the victim liaison officer (VLO) for this case?
       * @example Yes
       */
      vloDiscussion?: string
      /**
       * Format: date-time
       * @description The date and time that this prison approved this licence
       */
      approvedDate?: string
      /**
       * @description The username who approved the licence on behalf of the prison governor
       * @example X33221
       */
      approvedByUsername?: string
      /**
       * @description The full name of the person who approved the licence on behalf of the prison governor
       * @example John Smith
       */
      approvedByName?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was superseded by a new variant
       */
      supersededDate?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was first created
       */
      dateCreated?: string
      /**
       * @description The username which created this licence
       * @example X12333
       */
      createdByUsername?: string
      /**
       * Format: date-time
       * @description The date and time that this licence was last updated
       */
      dateLastUpdated?: string
      /**
       * @description The username of the person who last updated this licence
       * @example X34433
       */
      updatedByUsername?: string
      /** @description The list of standard licence conditions on this licence */
      standardLicenceConditions?: components['schemas']['StandardCondition'][]
      /** @description The list of standard post sentence supervision conditions on this licence */
      standardPssConditions?: components['schemas']['StandardCondition'][]
      /** @description The list of additional licence conditions on this licence */
      additionalLicenceConditions: components['schemas']['AdditionalCondition'][]
      /** @description The list of additional post sentence supervision conditions on this licence */
      additionalPssConditions: components['schemas']['AdditionalCondition'][]
      /** @description The list of bespoke conditions on this licence */
      bespokeConditions: components['schemas']['BespokeCondition'][]
      /** @description Is this licence a variation of another licence? */
      isVariation: boolean
      /**
       * Format: int64
       * @description The licence Id which this licence is a variation of
       */
      variationOf?: number
      /**
       * @description The full name of the person who created licence or variation
       * @example Gordon Sumner
       */
      createdByFullName?: string
    }
    /** @description Describes an event that was related to a licence */
    LicenceEvent: {
      /**
       * Format: int64
       * @description The internal ID of the licence event
       * @example 1234
       */
      id?: number
      /**
       * Format: int64
       * @description The internal ID of the licence that this event relates to
       * @example 1234
       */
      licenceId?: number
      /**
       * @description The licence event type
       * @example LicenceEventType.VARIATION_SUBMITTED
       * @enum {string}
       */
      eventType?:
        | 'CREATED'
        | 'SUBMITTED'
        | 'APPROVED'
        | 'ACTIVATED'
        | 'SUPERSEDED'
        | 'VARIATION_CREATED'
        | 'VARIATION_SUBMITTED_REASON'
        | 'VARIATION_SUBMITTED'
        | 'VARIATION_REFERRED'
        | 'VARIATION_APPROVED'
      /**
       * @description The username related to this event or SYSTEM if an automated event
       * @example X63533
       */
      username?: string
      /**
       * @description The forename of the person related to this event, or SYSTEM if an automated event.
       * @example Robert Mortimer
       */
      forenames?: string
      /**
       * @description The surname of the person related to this event, or SYSTEM if an automated event.
       * @example Robert Mortimer
       */
      surname?: string
      /**
       * @description A reason or description related to the event
       * @example Reason for variation
       */
      eventDescription?: string
      /**
       * Format: date-time
       * @description The date and time of the event
       */
      eventTime?: string
    }
  }
}

export interface operations {
  /** Updates in-flight licences associated with an offender with the community offender manager who is responsible for that offender. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateResponsibleCom: {
    parameters: {
      path: {
        crn: string
      }
    }
    responses: {
      /** The responsible COM was updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateComRequest']
      }
    }
  }
  /** Sets whether the variation has been discussed with a VLO. Either Yes or Not applicable. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateVloDiscussion: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** VLO discussion updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVloDiscussionRequest']
      }
    }
  }
  /** Update the status of a licence to SUBMITTED or VARIATION_SUBMITTED, and record the details of the COM who submitted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  submitLicence: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Licence submitted for approval */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Update the status of a licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateLicenceStatus: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Licence status updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['StatusUpdateRequest']
      }
    }
  }
  /** Sets whether the variation has been discussed with an SPO. Either Yes or No. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateSpoDiscussion: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** SPO discussion updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSpoDiscussionRequest']
      }
    }
  }
  /** Updates the sentence dates. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateSentenceDates: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Sentence dates updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSentenceDatesRequest']
      }
    }
  }
  /** Updates a licence to referred and stores the reason provided by the approver. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  referVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Licence updated to referred and the referral reason stored */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferVariationRequest']
      }
    }
  }
  /** Updates the reason for the licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateReasonForVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Reason for variation updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateReasonForVariationRequest']
      }
    }
  }
  /** Updates the prison information. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updatePrisonInformation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Prison information updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePrisonInformationRequest']
      }
    }
  }
  /** Update the contact number for the officer related to this licence. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateContactNumber: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Contact number updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ContactNumberRequest']
      }
    }
  }
  /** Add or replace the bespoke conditions on a licence with the content of this request. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateBespokeConditions: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Bespoke conditions added or replaced */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BespokeConditionRequest']
      }
    }
  }
  /** Approves a licence variation. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  approveVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Variation approved */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Update the date and time for the initial appointment. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateAppointmentTime: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Appointment date and time updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentTimeRequest']
      }
    }
  }
  /** Update the person the person on probation will meet at the initial appointment Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateAppointmentPerson: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Appointment person updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentPersonRequest']
      }
    }
  }
  /** Update the address where the initial appointment will take place. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateAppointmentAddress: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Address updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentAddressRequest']
      }
    }
  }
  /** Update the set of additional conditions on the licence. This does not include accompanying data per condition. Existing conditions which appear on the licence but which are not supplied to this endpoint will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateAdditionalConditions: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Set of additional conditions updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdditionalConditionsRequest']
      }
    }
  }
  /** Update the user entered data to accompany an additional condition template. Existing data for a condition which does not appear in this request will be deleted. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateAdditionalConditionData: {
    parameters: {
      path: {
        licenceId: number
        additionalConditionId: number
      }
    }
    responses: {
      /** Additional condition updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAdditionalConditionDataRequest']
      }
    }
  }
  /** Removes a previously uploaded exclusion zone file. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  removeExclusionZoneFile: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    responses: {
      /** The exclusion zone file was removed */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates the details of a community offender manager (e.g. email address). Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  updateComDetails: {
    responses: {
      /** The COM was updated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateComRequest']
      }
    }
  }
  /** Records an auditable event related to an action taken by a user or an automated in-service process. Requires ROLE_CVL_ADMIN. */
  recordAuditEvent: {
    responses: {
      /** The audit event was recorded */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditEvent']
      }
    }
  }
  /** Create a variation of this licence. The new licence will have a new ID and have a statius VARIATION_IN_PROGRESS. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  createVariation: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Licence variation created */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary']
        }
      }
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates a licence with the default status IN_PROGRESS and populates with the details provided. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  createLicence: {
    responses: {
      /** Licence created */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLicenceRequest']
      }
    }
  }
  /** Set licence statuses to ACTIVE. Accepts a list of licence IDs. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  activateLicences: {
    responses: {
      /** Licences activated */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Uploads a PDF file containing an exclusion zone map and description. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  uploadExclusionZoneFile: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    responses: {
      /** The exclusion zone file was uploaded */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file: string
        }
      }
    }
  }
  /** Notifies the COM of upcoming releases which they need to create a licence for. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  notifyOfUpcomingReleasesRequiringLicence: {
    responses: {
      /** The COM was notified */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptLicenceCreationRequest'][]
      }
    }
  }
  /** Retrieves a list of auditable events matching the criteria provided. Requires ROLE_CVL_ADMIN. */
  requestAuditEvents: {
    responses: {
      /** The a list of matching auditable events is returned. */
      200: {
        content: {
          'application/json': components['schemas']['AuditEvent'][]
        }
      }
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditRequest']
      }
    }
  }
  /** Get the licences matching the supplied lists of status, prison, staffId, nomsId and PDU. Requires ROLE_CVL_ADMIN. */
  getLicencesMatchingCriteria: {
    parameters: {
      query: {
        prison?: string[]
        status?: (
          | 'IN_PROGRESS'
          | 'SUBMITTED'
          | 'APPROVED'
          | 'ACTIVE'
          | 'REJECTED'
          | 'INACTIVE'
          | 'RECALLED'
          | 'VARIATION_IN_PROGRESS'
          | 'VARIATION_SUBMITTED'
          | 'VARIATION_REJECTED'
          | 'VARIATION_APPROVED'
        )[]
        staffId?: number[]
        nomsId?: string[]
        pdu?: string[]
        sortBy?: string
        sortOrder?: string
      }
    }
    responses: {
      /** Returned matching licence summary details - empty if no matches. */
      200: {
        content: {
          'application/json': components['schemas']['LicenceSummary'][]
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns a single licence detail by its unique identifier. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  getLicenceById: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Licence found */
      200: {
        content: {
          'application/json': components['schemas']['Licence']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the exclusion zone map image. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  getExclusionZoneImage: {
    parameters: {
      path: {
        licenceId: number
        conditionId: number
      }
    }
    responses: {
      /** Image returned */
      200: {
        content: {
          'image/jpeg': unknown
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** No image was found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get a list of licence events that match the supplied criteria. Requires ROLE_CVL_ADMIN. */
  getEventsMatchingCriteria: {
    parameters: {
      query: {
        licenceId?: number
        eventType?: (
          | 'CREATED'
          | 'SUBMITTED'
          | 'APPROVED'
          | 'ACTIVATED'
          | 'SUPERSEDED'
          | 'VARIATION_CREATED'
          | 'VARIATION_SUBMITTED_REASON'
          | 'VARIATION_SUBMITTED'
          | 'VARIATION_REFERRED'
          | 'VARIATION_APPROVED'
        )[]
        sortBy?: string
        sortOrder?: string
      }
    }
    responses: {
      /** Returned matching licence events - empty if no matches. */
      200: {
        content: {
          'application/json': components['schemas']['LicenceEvent'][]
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a list of PDU contacts configured in this environment. Requires ROLE_CVL_ADMIN. */
  pduContacts: {
    responses: {
      /** The configured list of PDU contacts. */
      200: {
        content: {
          'application/json': string
        }
      }
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Discards a licence record. Requires ROLE_SYSTEM_USER or ROLE_CVL_ADMIN. */
  discard: {
    parameters: {
      path: {
        licenceId: number
      }
    }
    responses: {
      /** Licence discarded */
      200: unknown
      /** Bad request, request body must be valid */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The licence for this ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
