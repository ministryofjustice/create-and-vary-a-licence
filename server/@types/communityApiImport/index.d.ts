/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
/* eslint-disable camelcase */
export interface paths {
  '/health': {
    get: operations['handleUsingGET']
  }
  '/health/**': {
    get: operations['handleUsingGET_1']
  }
  '/info': {
    get: operations['handleUsingGET_2']
  }
  '/ping': {
    get: operations['handleUsingGET_3']
  }
  '/secure/appointment-types': {
    get: operations['getAllAppointmentTypesUsingGET']
  }
  '/secure/authenticate': {
    post: operations['authenticateUsingPOST']
  }
  '/secure/contact-types': {
    get: operations['getContactTypesUsingGET']
  }
  '/secure/contact-types/{contactTypeCode}/outcome-types': {
    get: operations['getContactTypeOutcomesUsingGET']
  }
  '/secure/courtAppearances': {
    get: operations['getCourtAppearancesUsingGET']
  }
  '/secure/courts': {
    /** requires ROLE_MAINTAIN_REF_DATA and read scope */
    get: operations['getCourtsUsingGET']
    /** requires ROLE_MAINTAIN_REF_DATA and write scope */
    post: operations['insertCourtUsingPOST']
  }
  '/secure/courts/code/{code}': {
    /** requires ROLE_MAINTAIN_REF_DATA and read scope */
    get: operations['getCourtUsingGET']
    /** requires ROLE_MAINTAIN_REF_DATA and write scope */
    put: operations['updateCourtUsingPUT']
  }
  '/secure/nomisCaseNotes/{nomisId}/{caseNotesId}': {
    put: operations['upsertCaseNotesToDeliusUsingPUT']
  }
  '/secure/offenderDeltaIds': {
    get: operations['getOffenderDeltasUsingGET']
    delete: operations['deleteOffenderDeltasUsingDELETE']
  }
  '/secure/offenders/crn/{crn}': {
    get: operations['getOffenderSummaryByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/activity-log': {
    get: operations['getActivityLogByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/all': {
    get: operations['getOffenderDetailByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/allOffenderManagers': {
    /** Accepts an offender CRN in the format A999999 */
    get: operations['getAllOffenderManagersForOffenderbyCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/appointments': {
    get: operations['getOffenderAppointmentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}': {
    get: operations['getOffenderAppointmentByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}/outcome/context/{contextName}': {
    post: operations['updateAppointmentOutcomeWithContextUsingPOST']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}/relocate': {
    post: operations['relocateAppointmentUsingPOST']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}/reschedule/context/{contextName}': {
    post: operations['rescheduleAppointmentWithContextNameUsingPOST']
  }
  '/secure/offenders/crn/{crn}/assessments': {
    get: operations['getAssessmentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/contact-summary': {
    get: operations['getOffenderContactSummariesByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/contact-summary/inductions': {
    get: operations['getOffenderInitialAppointmentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/contacts/{contactId}': {
    get: operations['getOffenderContactSummaryByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions': {
    get: operations['getConvictionsForOffenderByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions-with-rar': {
    get: operations['getOffenderConvictionsWithRarByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/active/nsis': {
    get: operations['getNsisForOffenderByCrnAndActiveConvictionsUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}': {
    get: operations['getConvictionForOffenderByCrnAndConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/attendances': {
    get: operations['getAttendancesUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/attendancesFilter': {
    get: operations['getAttendancesByConvictionUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/courtAppearances': {
    get: operations['getOffenderCourtAppearancesByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/courtReports': {
    get: operations['getOffenderCourtReportsByCrnAndConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/document': {
    post: operations['createUPWDocumentInDeliusUsingPOST']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/licenceConditions': {
    get: operations['getLicenceConditionsByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/nsis': {
    get: operations['getNsiForOffenderByCrnAndConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/nsis/{nsiId}': {
    get: operations['getNsiByNsiIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/pssRequirements': {
    get: operations['getPssRequirementsByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/requirements': {
    get: operations['getRequirementsByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/sentenceStatus': {
    get: operations['getSentenceStatusByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/courtReports/{courtReportId}': {
    get: operations['getOffenderCourtReportByCrnAndCourtReportIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/custody/convictionId/{convictionId}': {
    get: operations['getCustodyByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByCrnUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByCrnUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByCrnUsingDELETE']
  }
  '/secure/offenders/crn/{crn}/documents/grouped': {
    get: operations['getOffenderDocumentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/documents/{documentId}': {
    get: operations['getOffenderDocumentByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/identifiers': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderIdentifiersByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/manage-supervisions-eligibility': {
    /** No backward compatibility guaranteed - intended for the use of the Manage a Supervision service, behaviour or responses may be modified in the future. */
    get: operations['getManageSupervisionsEligibilityUsingGET']
  }
  '/secure/offenders/crn/{crn}/nomsNumber': {
    put: operations['updateOffenderNomsNumberUsingPUT']
  }
  '/secure/offenders/crn/{crn}/personalCircumstances': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderPersonalCircumstancesByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/personalContacts': {
    get: operations['getAllOffenderPersonalContactsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/probationStatus': {
    get: operations['getOffenderProbationStatusByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/referral/end/context/{context}': {
    post: operations['endReferralContextLessUsingPOST']
  }
  '/secure/offenders/crn/{crn}/referral/start/context/{context}': {
    post: operations['startReferralContextLessUsingPOST']
  }
  '/secure/offenders/crn/{crn}/registrations': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/registrations/{registrationId}': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationDetailsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/release': {
    /** Accepts an offender CRN in the format A999999 */
    get: operations['getLatestRecallAndReleaseForOffenderByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/risk/mappa': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderMappaDetailsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/risk/resourcing/latest': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderResourcingDetailsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/sentence/{sentenceId}/appointments': {
    post: operations['createAppointmentUsingPOST']
  }
  '/secure/offenders/crn/{crn}/sentence/{sentenceId}/appointments/context/{contextName}': {
    post: operations['createAppointmentWithContextNameUsingPOST']
  }
  '/secure/offenders/crn/{crn}/sentences/{sentenceId}/notifications/context/{contextName}': {
    post: operations['notifyWithContextNameUsingPOST']
  }
  '/secure/offenders/crn/{crn}/tier/{tier}': {
    post: operations['updateTierUsingPOST']
  }
  '/secure/offenders/crn/{crn}/user/{username}/userAccess': {
    get: operations['checkUserAccessByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/userAccess': {
    get: operations['checkUserAccessByCrnUsingGET_1']
  }
  '/secure/offenders/nextUpdate': {
    /** requires ROLE_COMMUNITY_EVENTS */
    get: operations['getAndLockNextOffenderUpdateUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}': {
    get: operations['getOffenderDetailsUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/all': {
    get: operations['getOffenderDetailByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/allOffenderManagers': {
    /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
    get: operations['getAllOffenderManagersForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/bookingNumber/{bookingNumber}/custody/keyDates': {
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    post: operations['replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/contacts': {
    get: operations['getOffenderContactReportByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/convictions': {
    get: operations['getConvictionsForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/convictions/active/nsis/recall': {
    get: operations['getRecallNsisForOffenderByNomsNumberAndActiveConvictionsUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber': {
    put: operations['updateCustodyBookingNumberUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber/{bookingNumber}': {
    get: operations['getCustodyByBookNumberUsingGET']
    put: operations['updateCustodyUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByNomsNumberUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByNomsNumberUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByNomsNumberUsingDELETE']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/documents/grouped': {
    /** <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
    get: operations['getOffenderDocumentsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/documents/{documentId}': {
    get: operations['getOffenderDocumentUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/identifiers': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderIdentifiersByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/personalCircumstances': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderPersonalCircumstancesByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/prisonOffenderManager': {
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['allocatePrisonOffenderManagerByNomsNumberUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deallocatePrisonOffenderManagerByNomsNumberUsingDELETE']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/recalled': {
    put: operations['offenderRecalledUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/registrations': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/release': {
    /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
    get: operations['getLatestRecallAndReleaseForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/released': {
    put: operations['offenderReleasedUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/responsibleOfficer/switch': {
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['switchResponsibleOfficerUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/responsibleOfficers': {
    /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
    get: operations['getResponsibleOfficersForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/risk/mappa': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderMappaDetailsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/risk/resourcing/latest': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderResourcingDetailsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{originalNomsNumber}/nomsNumber': {
    /** In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned. */
    put: operations['replaceOffenderNomsNumberUsingPUT']
  }
  '/secure/offenders/offenderId/{offenderId}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByOffenderIdUsingGET']
  }
  '/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByOffenderIdUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByOffenderIdUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByOffenderIdUsingDELETE']
  }
  '/secure/offenders/offenderId/{offenderId}/identifiers': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderIdentifiersByOffenderIdUsingGET']
  }
  '/secure/offenders/offenderId/{offenderId}/personalCircumstances': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderPersonalCircumstancesByOffenderIdUsingGET']
  }
  '/secure/offenders/offenderId/{offenderId}/registrations': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationsByOffenderIdUsingGET']
  }
  '/secure/offenders/primaryIdentifiers': {
    get: operations['getOffenderIdsUsingGET']
  }
  '/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByPrisonBookingNumberUsingGET']
  }
  '/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByPrisonBookingNumberUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByPrisonBookingNumberUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE']
  }
  '/secure/offenders/update/{offenderDeltaId}': {
    /** requires ROLE_COMMUNITY_EVENTS */
    delete: operations['deleteOffenderUpdateUsingDELETE']
  }
  '/secure/offenders/update/{offenderDeltaId}/markAsFailed': {
    /** requires ROLE_COMMUNITY_EVENTS */
    put: operations['markAsFailedUsingPUT']
  }
  '/secure/probationAreas': {
    /** Accepts filtering to only return active areas */
    get: operations['getProbationAreaCodesUsingGET']
  }
  '/secure/probationAreas/code/{code}/localDeliveryUnits': {
    /** Accepts a probation area code */
    get: operations['getLdusForProbationCodeUsingGET']
  }
  '/secure/probationAreas/code/{code}/localDeliveryUnits/code/{lduCode}/teams': {
    /** Accepts a probation area code and local delivery unit code */
    get: operations['getTeamsForLduUsingGET']
  }
  '/secure/probationAreas/localDeliveryUnits': {
    /** Accepts filtering to only return active areas */
    get: operations['getProbationAreasAndLocalDeliveryUnitsUsingGET']
  }
  '/secure/referenceData/set/{set}': {
    get: operations['getReferenceDataUsingGET']
  }
  '/secure/referenceData/sets': {
    /** It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint */
    get: operations['getReferenceDataSetsUsingGET']
  }
  '/secure/smoketest/offenders/crn/{crn}/custody/reset': {
    /** Only used for smoke tests, not production ready */
    post: operations['resetCustodySmokeTestDataUsingPOST']
  }
  '/secure/smoketest/offenders/crn/{crn}/details': {
    /** Only used for smoke tests, not production ready */
    post: operations['updateOffenderDetailsUsingPOST']
  }
  '/secure/staff/list': {
    /** staff details for supplied usernames */
    post: operations['getStaffDetailsList']
  }
  '/secure/staff/staffCode/{staffCode}/caseload': {
    /** Currently, this endpoint is restricted to offender managers and order supervisors. Additional management types (e.g. requirements, reports) may be added later. */
    get: operations['getCaseloadForStaffUsingGET_1']
  }
  '/secure/staff/staffCode/{staffCode}/caseload/managedOffenders': {
    get: operations['getCaseloadOffendersForStaffUsingGET_1']
  }
  '/secure/staff/staffCode/{staffCode}/caseload/supervisedOrders': {
    get: operations['getCaseloadOrdersForStaffUsingGET_1']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}': {
    /** Accepts a Delius staff officer identifier */
    get: operations['getStaffDetailsForStaffIdentifierUsingGET']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}/caseload': {
    /** Currently, this endpoint is restricted to offender managers and order supervisors. Additional management types (e.g. requirements, reports) may be added later. */
    get: operations['getCaseloadForStaffUsingGET']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}/caseload/managedOffenders': {
    get: operations['getCaseloadOffendersForStaffUsingGET']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}/caseload/supervisedOrders': {
    get: operations['getCaseloadOrdersForStaffUsingGET']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}/managedOffenders': {
    /** Accepts a Delius staff officer identifier */
    get: operations['getOffendersForResponsibleOfficerIdentifierUsingGET']
  }
  '/secure/staff/username/{username}': {
    /** Accepts a Delius staff username */
    get: operations['getStaffDetailsForUsernameUsingGET']
  }
  '/secure/staff/username/{username}/manage-supervisions-eligible-offenders': {
    /** Accepts a Delius Username. No backward compatibility guaranteed - intended for the use of the Manage a Supervision service, behaviour or responses may be modified in the future. */
    get: operations['getManageSupervisionsEligibleOffendersUsingGET']
  }
  '/secure/team/{teamCode}/caseload': {
    /** Currently, this endpoint is restricted to offender managers and order supervisors. Additional management types (e.g. requirements, reports) may be added later. */
    get: operations['getCaseloadForTeamUsingGET']
  }
  '/secure/team/{teamCode}/caseload/managedOffenders': {
    get: operations['getCaseloadOffendersForTeamUsingGET']
  }
  '/secure/team/{teamCode}/caseload/supervisedOrders': {
    get: operations['getCaseloadOrdersForTeamUsingGET']
  }
  '/secure/teams/prisonOffenderManagers/create': {
    post: operations['createMissingPrisonOffenderManagerTeamsUsingPOST']
  }
  '/secure/teams/{teamCode}/office-locations': {
    get: operations['getAllOfficeLocationsUsingGET']
  }
  '/secure/users/search/email/{email}/details': {
    get: operations['findUserByEmailUsingGET']
  }
  '/secure/users/{username}/details': {
    get: operations['findUserUsingGET']
  }
  '/secure/users/{username}/password': {
    post: operations['changePasswordUsingPOST']
  }
  '/secure/users/{username}/roles/{roleId}': {
    put: operations['addRoleUsingPUT']
  }
}

export interface definitions {
  /** AccessLimitation */
  AccessLimitation: {
    exclusionMessage?: string
    restrictionMessage?: string
    userExcluded: boolean
    userRestricted: boolean
  }
  /** ActivityLogEntry */
  ActivityLogEntry: {
    /** Format: int64 */
    contactId: number
    /** Format: int64 */
    convictionId?: number
    /** @example 13:00:00+01:00 */
    endTime?: string
    enforcement?: definitions['Enforcement']
    lastUpdatedByUser?: definitions['Human']
    /**
     * Format: date-time
     * @example 2021-05-25T10:00:00+01:00
     */
    lastUpdatedDateTime?: string
    notes?: string
    outcome?: definitions['AppointmentOutcome']
    rarActivity?: definitions['ContactRarActivity']
    /** @example true */
    sensitive?: boolean
    staff: definitions['StaffHuman']
    /** @example 12:00:00+01:00 */
    startTime?: string
    type: definitions['ContactType']
  }
  /** ActivityLogGroup */
  ActivityLogGroup: {
    /**
     * Format: date
     * @example 2021-05-25
     */
    date?: string
    entries?: definitions['ActivityLogEntry'][]
    /** @example true */
    rarDay?: boolean
  }
  /**
   * AdditionalIdentifier
   * @description Additional Identifier.
   * Current active values for the type are
   *  LIFN	Lifer Number
   * OTHR	Other Personal Identifier
   * SPNC	Scottish/Old PNC Number
   * NPNC	Verified No PNC Date
   * VISO	ViSOR Number
   * PCRN	Other Previous CRN
   * IMMN	Immigration Number
   * YCRN	YOT Identifier/CRN
   * APNC	Additional PNC
   * URN	CPS Unique Reference Number
   * AI02	Previous Prison Number
   * DOFF	Duplicate Offender CRN
   * NINO	National Insurance Number
   * DNOMS	Duplicate NOMIS Number
   * Full list can be found calling "/secure/referenceData/set/ADDITIONAL IDENTIFIER TYPE"
   */
  AdditionalIdentifier: {
    /**
     * Format: int64
     * @description unique id of identifier
     * @example 23456789
     */
    additionalIdentifierId?: number
    /** @description identifier name and description */
    type?: definitions['KeyValue']
    /**
     * @description value of identifier
     * @example X1234
     */
    value?: string
  }
  /** AdditionalSentence */
  AdditionalSentence: {
    /**
     * Format: int64
     * @example 2500000001
     */
    additionalSentenceId?: number
    /** @example 100 */
    amount?: number
    /**
     * Format: int64
     * @example 14
     */
    length?: number
    /** @example Some additional sentence notes */
    notes?: string
    type?: definitions['KeyValue']
  }
  /** Address */
  Address: {
    /** @example 32 */
    addressNumber?: string
    /** @example HMPPS Digital Studio */
    buildingName?: string
    /** @example South Yorkshire */
    county?: string
    /**
     * Format: date-time
     * @example 2021-06-11T13:00:00
     */
    createdDatetime?: string
    /** @example Sheffield City Centre */
    district?: string
    /**
     * Format: date
     * @example 2021-06-10
     */
    from: string
    /**
     * Format: date-time
     * @example 2021-06-11T14:00:00
     */
    lastUpdatedDatetime?: string
    /**
     * Format: date-time
     * @example 2021-06-11T12:00:00
     */
    latestAssessmentDate?: string
    /** @example true */
    noFixedAbode?: boolean
    /** @example Some address notes */
    notes?: string
    /** @example S3 7BS */
    postcode?: string
    status?: definitions['KeyValue']
    /** @example Scotland Street */
    streetName?: string
    /** @example 0123456789 */
    telephoneNumber?: string
    /**
     * Format: date
     * @example 2021-07-10
     */
    to?: string
    /** @example Sheffield */
    town?: string
    type?: definitions['KeyValue']
    /** @example true */
    typeVerified?: boolean
  }
  /** AddressSummary */
  AddressSummary: {
    /** @example 32 */
    addressNumber?: string
    /** @example HMPPS Digital Studio */
    buildingName?: string
    /** @example South Yorkshire */
    county?: string
    /** @example Sheffield City Centre */
    district?: string
    /** @example S3 7BS */
    postcode?: string
    /** @example Scotland Street */
    streetName?: string
    /** @example 0123456789 */
    telephoneNumber?: string
    /** @example Sheffield */
    town?: string
  }
  /** AllTeam */
  AllTeam: {
    borough?: definitions['KeyValue']
    code?: string
    description?: string
    district?: definitions['KeyValue']
    externalProvider?: definitions['KeyValue']
    isPrivate?: boolean
    localDeliveryUnit?: definitions['KeyValue']
    name?: string
    /** Format: int64 */
    providerTeamId: number
    scProvider?: definitions['KeyValue']
    /** Format: int64 */
    teamId: number
  }
  /** AppointmentCreateRequest */
  AppointmentCreateRequest: {
    /** Format: date-time */
    appointmentEnd: string
    /** Format: date-time */
    appointmentStart: string
    contactType: string
    enforcement?: string
    notes: string
    /** Format: int64 */
    nsiId?: number
    officeLocationCode: string
    outcome?: string
    providerCode: string
    rarActivity?: boolean
    /** Format: int64 */
    requirementId?: number
    sensitive?: boolean
    staffCode: string
    teamCode: string
  }
  /** AppointmentCreateResponse */
  AppointmentCreateResponse: {
    /** Format: date-time */
    appointmentEnd: string
    /** Format: int64 */
    appointmentId: number
    /** Format: date-time */
    appointmentStart: string
    sensitive?: boolean
    type: string
    typeDescription: string
  }
  /** AppointmentDetail */
  AppointmentDetail: {
    /**
     * Format: date-time
     * @example 2021-05-25T11:00:00+01:00
     */
    appointmentEnd?: string
    /**
     * Format: int64
     * @example 1
     */
    appointmentId?: number
    /**
     * Format: date-time
     * @example 2021-05-25T10:00:00+01:00
     */
    appointmentStart?: string
    /** @example Some interesting notes about the appointment. */
    notes?: string
    officeLocation: definitions['OfficeLocation']
    outcome?: definitions['AppointmentOutcome']
    provider?: definitions['KeyValue']
    /** @example true */
    rarActivity?: boolean
    requirement?: definitions['AppointmentRequirementDetail']
    /** @example true */
    sensitive?: boolean
    staff?: definitions['StaffHuman']
    team?: definitions['KeyValue']
    type: definitions['AppointmentType']
  }
  /** AppointmentOutcome */
  AppointmentOutcome: {
    /** @example true */
    attended?: boolean
    /** @example ABC123 */
    code?: string
    /** @example true */
    complied?: boolean
    /** @example Some appointment outcome */
    description?: string
    /**
     * Format: double
     * @example 1.5
     */
    hoursCredited?: number
  }
  /** AppointmentRelocateRequest */
  AppointmentRelocateRequest: {
    officeLocationCode: string
  }
  /** AppointmentRelocateResponse */
  AppointmentRelocateResponse: {
    /** Format: int64 */
    appointmentId: number
  }
  /** AppointmentRequirementDetail */
  AppointmentRequirementDetail: {
    /** @example true */
    isActive?: boolean
    /** @example true */
    isRar?: boolean
    /**
     * Format: int64
     * @example 25000000
     */
    requirementId?: number
  }
  /** AppointmentRescheduleResponse */
  AppointmentRescheduleResponse: {
    /** Format: int64 */
    appointmentId: number
  }
  /** AppointmentType */
  AppointmentType: {
    /** @example CHVS */
    contactType?: string
    /** @example Home Visit to Case (NS) */
    description?: string
    nationalStandard?: boolean
    offenderLevel?: boolean
    /** @example LEGACY,CJA */
    orderTypes?: ('CJA' | 'LEGACY')[]
    requirementTypeMainCategories?: definitions['KeyValue'][]
    /**
     * @example REQUIRED
     * @enum {string}
     */
    requiresLocation?: 'NOT_REQUIRED' | 'OPTIONAL' | 'REQUIRED'
    wholeOrderLevel?: boolean
  }
  /** AppointmentUpdateResponse */
  AppointmentUpdateResponse: {
    /** Format: int64 */
    appointmentId: number
  }
  /** Appointments */
  Appointments: {
    /**
     * Format: int64
     * @description Number of appointments recorded to date as not attended and compliant - i.e. with an acceptable reason for absence
     */
    acceptableAbsences?: number
    /**
     * Format: int64
     * @description Number of appointments recorded to date as attended
     */
    attended?: number
    /**
     * Format: int64
     * @description Number of appointments to date where no attendance or compliance information has been recorded
     */
    noOutcomeRecorded?: number
    /**
     * Format: int64
     * @description Total number of appointments to date
     */
    total?: number
    /**
     * Format: int64
     * @description Number of appointments recorded to date as not attended and uncompliant - i.e. without an acceptable reason for absence
     */
    unacceptableAbsences?: number
  }
  /** Attendance */
  Attendance: {
    /** Format: date */
    attendanceDate: string
    attended: boolean
    complied: boolean
    /** Format: int64 */
    contactId: number
    contactType?: definitions['ContactTypeDetail']
    outcome?: string
  }
  /**
   * Attendances
   * @description Attendance Wrapper
   */
  Attendances: {
    /** @description List of Attendances */
    attendances?: definitions['Attendance'][]
  }
  /**
   * AuthPassword
   * @description Password Credentials
   */
  AuthPassword: {
    /**
     * @description LDAP password
     * @example password123456
     */
    password: string
  }
  /**
   * AuthUser
   * @description Authentication Details
   */
  AuthUser: {
    /**
     * @description LDAP password
     * @example password123456
     */
    password: string
    /**
     * @description LDAP username
     * @example TEST_USER_NPS
     */
    username: string
  }
  /** AvailableContactOutcomeTypes */
  AvailableContactOutcomeTypes: {
    /** @enum {string} */
    outcomeRequired: 'NOT_REQUIRED' | 'OPTIONAL' | 'REQUIRED'
    outcomeTypes: definitions['ContactOutcomeTypeDetail'][]
  }
  /**
   * Caseload
   * @description A set of managed entities in Delius
   */
  Caseload: {
    /** @description Managed offender CRNs */
    managedOffenders?: definitions['ManagedOffenderCrn'][]
    /** @description Managed order/event/conviction identifiers */
    supervisedOrders?: definitions['ManagedEventId'][]
  }
  /** CommunityOrPrisonOffenderManager */
  CommunityOrPrisonOffenderManager: {
    /**
     * Format: date
     * @description Date since the offender manager was assigned
     * @example 2019-12-04
     */
    fromDate?: string
    /** @description Grade details for this offender manager */
    grade?: definitions['KeyValue']
    /**
     * @description True if this offender manager is the prison OM else False
     * @example true
     */
    isPrisonOffenderManager?: boolean
    /**
     * @description True if this offender manager is the current responsible officer
     * @example true
     */
    isResponsibleOfficer?: boolean
    /**
     * @description True if no real offender manager has been allocated and this is just a placeholder
     * @example true
     */
    isUnallocated?: boolean
    /** @description Probation area / prison institution for this OM */
    probationArea?: definitions['ProbationArea']
    /** @description staff name and contact details */
    staff?: definitions['ContactableHuman']
    /**
     * @description Staff code
     * @example CHSE755
     */
    staffCode?: string
    /**
     * Format: int64
     * @description Staff id
     * @example 123455
     */
    staffId?: number
    /** @description Team details for this offender manager */
    team?: definitions['Team']
  }
  /** Contact */
  Contact: {
    alertActive?: boolean
    attended?: boolean
    complied?: boolean
    /** @example 13:00:00 */
    contactEndTime?: { [key: string]: unknown }
    /** Format: int64 */
    contactId: number
    contactOutcomeType?: definitions['KeyValue']
    /** @example 12:00:00 */
    contactStartTime?: { [key: string]: unknown }
    contactType: definitions['ContactType']
    /** Format: date-time */
    createdDateTime?: string
    documentLinked?: boolean
    /** Format: int64 */
    eventId?: number
    explanation?: definitions['KeyValue']
    /** Format: double */
    hoursCredited?: number
    /** Format: date-time */
    lastUpdatedDateTime?: string
    licenceCondition?: definitions['LicenceCondition']
    /** Format: int64 */
    linkedContactId?: number
    notes?: string
    nsi?: definitions['Nsi']
    partitionArea?: string
    probationArea?: definitions['KeyValue']
    providerEmployee?: definitions['Human']
    providerLocation?: definitions['KeyValue']
    providerTeam?: definitions['KeyValue']
    requirement?: definitions['Requirement']
    softDeleted?: boolean
    staff?: definitions['StaffHuman']
    team?: definitions['KeyValue']
    uploadLinked?: boolean
    visorContact?: boolean
  }
  /** ContactDetails */
  ContactDetails: {
    addresses?: definitions['Address'][]
    allowSMS?: boolean
    emailAddresses?: string[]
    phoneNumbers?: definitions['PhoneNumber'][]
  }
  /** ContactDetailsSummary */
  ContactDetailsSummary: {
    allowSMS?: boolean
    emailAddresses?: string[]
    phoneNumbers?: definitions['PhoneNumber'][]
  }
  /** ContactOutcomeTypeDetail */
  ContactOutcomeTypeDetail: {
    actionRequired: boolean
    attendance?: boolean
    code: string
    compliantAcceptable?: boolean
    description: string
    enforceable?: boolean
    enforcements: definitions['EnforcementAction'][]
  }
  /** ContactRarActivity */
  ContactRarActivity: {
    /** Format: int64 */
    nsiId?: number
    /** Format: int64 */
    requirementId?: number
    subtype?: definitions['KeyValue']
    type?: definitions['KeyValue']
  }
  /** ContactSummary */
  ContactSummary: {
    /**
     * Format: date-time
     * @example 2021-05-25T11:00:00+01:00
     */
    contactEnd?: string
    /** Format: int64 */
    contactId: number
    /**
     * Format: date-time
     * @example 2021-05-25T10:00:00+01:00
     */
    contactStart?: string
    enforcement?: definitions['Enforcement']
    lastUpdatedByUser?: definitions['Human']
    /**
     * Format: date-time
     * @example 2021-05-25T10:00:00+01:00
     */
    lastUpdatedDateTime?: string
    notes?: string
    officeLocation?: definitions['OfficeLocation']
    outcome?: definitions['AppointmentOutcome']
    provider: definitions['KeyValue']
    /** @example true */
    rarActivity?: boolean
    rarActivityDetail?: definitions['ContactRarActivity']
    /** @example true */
    sensitive?: boolean
    staff: definitions['StaffHuman']
    team: definitions['KeyValue']
    type: definitions['ContactType']
  }
  /** ContactType */
  ContactType: {
    appointment?: boolean
    categories?: definitions['KeyValue'][]
    code: string
    description: string
    nationalStandard?: boolean
    shortDescription?: string
    systemGenerated?: boolean
  }
  /** ContactTypeDetail */
  ContactTypeDetail: {
    code: string
    description: string
  }
  /** ContactableHuman */
  ContactableHuman: {
    /**
     * @description Email address
     * @example officer@gov.uk
     */
    email?: string
    /**
     * @description Given names
     * @example Sheila Linda
     */
    forenames?: string
    /**
     * @description Phone number
     * @example 0123411278
     */
    phoneNumber?: string
    /**
     * @description Family name
     * @example Hancock
     */
    surname?: string
  }
  /** ContextlessAppointmentCreateRequest */
  ContextlessAppointmentCreateRequest: {
    /** Format: date-time */
    appointmentEnd: string
    /** Format: date-time */
    appointmentStart: string
    attended?: string
    contractType: string
    countsTowardsRarDays: boolean
    notes: string
    notifyPPOfAttendanceBehaviour?: boolean
    officeLocationCode?: string
    /** Format: uuid */
    referralId?: string
    /** Format: date-time */
    referralStart: string
  }
  /** ContextlessAppointmentOutcomeRequest */
  ContextlessAppointmentOutcomeRequest: {
    attended: string
    notes: string
    notifyPPOfAttendanceBehaviour: boolean
  }
  /** ContextlessAppointmentRescheduleRequest */
  ContextlessAppointmentRescheduleRequest: {
    initiatedByServiceProvider: boolean
    officeLocationCode?: string
    /** Format: date-time */
    updatedAppointmentEnd: string
    /** Format: date-time */
    updatedAppointmentStart: string
  }
  /** ContextlessNotificationCreateRequest */
  ContextlessNotificationCreateRequest: {
    /** Format: date-time */
    contactDateTime: string
    contractType: string
    notes: string
    /** Format: uuid */
    referralId?: string
    /** Format: date-time */
    referralStart: string
  }
  /** ContextlessReferralEndRequest */
  ContextlessReferralEndRequest: {
    /**
     * @description Denotes a group of services delivered through a referral to a service user, e.g. Personal Well Being
     * @example PWB
     */
    contractType: string
    endType: string
    /** Format: date-time */
    endedAt: string
    notes: string
    /** Format: uuid */
    referralId?: string
    /** Format: int64 */
    sentenceId: number
    /** Format: date-time */
    startedAt: string
  }
  /** ContextlessReferralStartRequest */
  ContextlessReferralStartRequest: {
    /**
     * @description Denotes a group of services delivered through a referral to a service user, e.g. Personal Well Being
     * @example PWB
     */
    contractType: string
    notes: string
    /** Format: uuid */
    referralId?: string
    /** Format: int64 */
    sentenceId: number
    /** Format: date-time */
    startedAt: string
  }
  /** Conviction */
  Conviction: {
    /** @example true */
    active?: boolean
    /** @example true */
    awaitingPsr?: boolean
    /**
     * Format: date
     * @example 2021-05-13
     */
    breachEnd?: string
    /**
     * Format: date
     * @example 2021-06-10
     */
    convictionDate?: string
    /**
     * Format: int64
     * @example 2500000001
     */
    convictionId?: number
    courtAppearance?: definitions['CourtAppearanceBasic']
    custody?: definitions['Custody']
    /**
     * Format: int64
     * @example 3
     */
    failureToComplyCount?: number
    /** @example true */
    inBreach?: boolean
    /** @example 1 */
    index?: string
    latestCourtAppearanceOutcome?: definitions['KeyValue']
    offences?: definitions['Offence'][]
    orderManagers?: definitions['OrderManager'][]
    /**
     * Format: date
     * @example 2021-06-10
     */
    referralDate?: string
    responsibleCourt?: definitions['Court']
    sentence?: definitions['Sentence']
  }
  /** ConvictionDocuments */
  ConvictionDocuments: {
    convictionId?: string
    documents?: definitions['OffenderDocumentDetail'][]
  }
  /** ConvictionRequirements */
  ConvictionRequirements: {
    /** @description List of requirements associated with this conviction */
    requirements?: definitions['Requirement'][]
  }
  /** Court */
  Court: {
    /** @example Sheffield Magistrates Court */
    buildingName?: string
    /** @example SHEFMC */
    code?: string
    /** @example England */
    country?: string
    /** @example South Yorkshire */
    county?: string
    /**
     * Format: int64
     * @example 2500000001
     */
    courtId?: number
    /** @example Sheffield Magistrates Court */
    courtName?: string
    courtType?: definitions['KeyValue']
    /**
     * Format: int64
     * @example 310
     */
    courtTypeId?: number
    /**
     * Format: date-time
     * @example 2014-05-29T21:50:16
     */
    createdDatetime?: string
    /** @example 0114 2756 373 */
    fax?: string
    /**
     * Format: date-time
     * @example 2014-05-29T21:50:16
     */
    lastUpdatedDatetime?: string
    /** @example Sheffield City Centre */
    locality?: string
    /** @example S3 8LU */
    postcode?: string
    probationArea?: definitions['KeyValue']
    /**
     * Format: int64
     * @example 1500001001
     */
    probationAreaId?: number
    /** @example example@example.com */
    secureEmailAddress?: string
    /** @example true */
    selectable?: boolean
    /** @example Castle Street */
    street?: string
    /** @example 0300 047 0777 */
    telephoneNumber?: string
    /** @example Sheffield */
    town?: string
  }
  /** CourtAppearanceBasic */
  CourtAppearanceBasic: {
    /**
     * Format: date-time
     * @example 2019-09-04T00:00:00
     */
    appearanceDate?: string
    appearanceType?: definitions['KeyValue']
    /**
     * Format: int64
     * @example 2500000001
     */
    courtAppearanceId?: number
    /** @example SHEFMC */
    courtCode?: string
    /** @example Sheffield Magistrates Court */
    courtName?: string
    crn?: string
  }
  /**
   * CourtAppearanceBasicWrapper
   * @description Court appearance list Wrapper
   */
  CourtAppearanceBasicWrapper: {
    /** @description List of court appearances */
    courtAppearances?: definitions['CourtAppearanceBasic'][]
  }
  /** CourtAppearanceMinimal */
  CourtAppearanceMinimal: {
    /** Format: date-time */
    appearanceDate?: string
    appearanceType?: definitions['KeyValue']
    /** Format: int64 */
    courtAppearanceId?: number
    courtCode?: string
    courtName?: string
    /** Format: int64 */
    offenderId?: number
  }
  /**
   * CourtAppearanceMinimalWrapper
   * @description Court appearance list Wrapper
   */
  CourtAppearanceMinimalWrapper: {
    /** @description List of court appearances */
    courtAppearances?: definitions['CourtAppearanceMinimal'][]
  }
  /** CourtReportMinimal */
  CourtReportMinimal: {
    /** Format: date-time */
    allocationDate?: string
    /** Format: date-time */
    completedDate?: string
    /** Format: int64 */
    courtReportId?: number
    courtReportType?: definitions['KeyValue']
    /** Format: int64 */
    offenderId?: number
    /** Format: date-time */
    receivedByCourtDate?: string
    reportManagers?: definitions['ReportManager'][]
    /** Format: date-time */
    requestedDate?: string
    /** Format: date-time */
    requiredDate?: string
    /** Format: date-time */
    sentToCourtDate?: string
  }
  /** CreateCustodyKeyDate */
  CreateCustodyKeyDate: {
    /** Format: date */
    date?: string
  }
  /**
   * CreatePrisonOffenderManager
   * @description Request body for assigning an offender manager to an offender. Must pass exactly one of officer / officerCode (not both)
   */
  CreatePrisonOffenderManager: {
    /**
     * @description Prison institution code in NOMIS
     * @example MDI
     */
    nomsPrisonInstitutionCode: string
    /**
     * @description Name and contact details of offender manager. If passed then must contain both forename(s) and surname
     * @example officer: {"forenames": "John", "surname": "Smith" }
     */
    officer?: definitions['ContactableHuman']
    /**
     * Format: int64
     * @description Officer staff ID. If not present officer will be used to lookup staff member
     * @example 1234567
     */
    staffId?: number
  }
  /** Custody */
  Custody: {
    /**
     * @description Human readable id of the prison booking, AKA book number
     * @example V74111
     */
    bookingNumber?: string
    /** @description Institution where the offender currently resides */
    institution?: definitions['Institution']
    /** @description Key sentence dates of particular interest to custody */
    keyDates?: definitions['CustodyRelatedKeyDates']
    /**
     * Format: date
     * @description Date when related sentence started
     */
    sentenceStartDate?: string
    /** @description Custodial status */
    status?: definitions['KeyValue']
  }
  /** CustodyKeyDate */
  CustodyKeyDate: {
    /** Format: date */
    date?: string
    type?: definitions['KeyValue']
  }
  /**
   * CustodyRelatedKeyDates
   * @description Key sentence dates that are related to their time in custody
   */
  CustodyRelatedKeyDates: {
    /**
     * Format: date
     * @description Conditional release date
     * @example 2020-06-23
     */
    conditionalReleaseDate?: string
    /**
     * Format: date
     * @description Expected actual handover date from prison offender manager to community offender manager
     * @example 2020-06-23
     */
    expectedPrisonOffenderManagerHandoverDate?: string
    /**
     * Format: date
     * @description Expected start date of the handover process from prison offender manager to community offender manager
     * @example 2020-06-23
     */
    expectedPrisonOffenderManagerHandoverStartDate?: string
    /**
     * Format: date
     * @description Expected release date
     * @example 2020-06-23
     */
    expectedReleaseDate?: string
    /**
     * Format: date
     * @description Home detention curfew eligibility date
     * @example 2020-06-23
     */
    hdcEligibilityDate?: string
    /**
     * Format: date
     * @description Licence expiry date
     * @example 2020-06-23
     */
    licenceExpiryDate?: string
    /**
     * Format: date
     * @description Parole eligibility date
     * @example 2020-06-23
     */
    paroleEligibilityDate?: string
    /**
     * Format: date
     * @description Post sentence Supervision end date. AKA Top-up supervision end date
     * @example 2020-06-23
     */
    postSentenceSupervisionEndDate?: string
    /**
     * Format: date
     * @description Sentence expiry date
     * @example 2020-06-23
     */
    sentenceExpiryDate?: string
  }
  /** Disability */
  Disability: {
    /** Format: int64 */
    disabilityId?: number
    disabilityType?: definitions['KeyValue']
    /** Format: date */
    endDate?: string
    /**
     * @description The active status of this disability, if the start date is before or on today and the end date is after today or null
     * @example true
     */
    isActive?: boolean
    /**
     * Format: date-time
     * @example 2020-09-20T11:00:00+01:00
     */
    lastUpdatedDateTime?: string
    notes?: string
    provisions?: definitions['Provision'][]
    /** Format: date */
    startDate?: string
  }
  /** Enforcement */
  Enforcement: {
    enforcementAction: definitions['KeyValue']
  }
  /** EnforcementAction */
  EnforcementAction: {
    code: string
    description: string
    /** @description Contact will be added to the enforcement diary */
    outstandingContactAction?: boolean
    /**
     * Format: int64
     * @description Enforcement response date on the contact will be populated as this many days from the outcome date
     */
    responseByPeriod?: number
  }
  /** ErrorResponse */
  ErrorResponse: {
    /**
     * @description Reason for error
     * @example Surname required
     */
    developerMessage?: string
    /**
     * Format: int32
     * @description Http status code
     * @example 400
     */
    status: number
  }
  /** Human */
  Human: {
    /**
     * @description Given names
     * @example Sheila Linda
     */
    forenames?: string
    /**
     * @description Family name
     * @example Hancock
     */
    surname?: string
  }
  /** IDs */
  IDs: {
    /**
     * @description case reference number
     * @example 12345C
     */
    crn: string
    /**
     * @description Number from the crime records office
     * @example 123456/04A
     */
    croNumber?: string
    /**
     * @description Immigration number
     * @example A1234567
     */
    immigrationNumber?: string
    /**
     * @description Book number of latest booking from NOMIS
     * @example G12345
     */
    mostRecentPrisonerNumber?: string
    /**
     * @description National insurance number from HMRC
     * @example AA112233B
     */
    niNumber?: string
    /**
     * @description Offender number from NOMIS
     * @example A1234CR
     */
    nomsNumber?: string
    /**
     * @description Number from the police national computer
     * @example 2004/0712343H
     */
    pncNumber?: string
  }
  /** InputStream */
  InputStream: { [key: string]: unknown }
  /** Institution */
  Institution: {
    code?: string
    description?: string
    establishmentType?: definitions['KeyValue']
    /** Format: int64 */
    institutionId: number
    institutionName?: string
    isEstablishment?: boolean
    isPrivate?: boolean
    /** @description Prison institution code in NOMIS */
    nomsPrisonInstitutionCode?: string
  }
  /** KeyValue */
  KeyValue: {
    /** @example ABC123 */
    code?: string
    /** @example Some description */
    description?: string
  }
  /** LicenceCondition */
  LicenceCondition: {
    active?: boolean
    /** Format: date */
    commencementDate?: string
    commencementNotes?: string
    /** Format: date-time */
    createdDateTime?: string
    licenceConditionNotes?: string
    licenceConditionTypeMainCat?: definitions['KeyValue']
    licenceConditionTypeSubCat?: definitions['KeyValue']
    /** Format: date */
    startDate?: string
    /** Format: date */
    terminationDate?: string
    terminationNotes?: string
  }
  /** LicenceConditions */
  LicenceConditions: {
    /** @description List of licenceConditions associated with this conviction */
    licenceConditions?: definitions['LicenceCondition'][]
  }
  /** LocalDeliveryUnit */
  LocalDeliveryUnit: {
    /**
     * @description LDU code
     * @example N01KSCT
     */
    code?: string
    /**
     * @description description
     * @example NPS Manchester City South
     */
    description?: string
    /** Format: int64 */
    localDeliveryUnitId: number
  }
  /** ManagedEventId */
  ManagedEventId: {
    /** Format: date */
    allocationDate?: string
    /** Format: int64 */
    eventId?: number
    staff?: definitions['StaffHuman']
    /** Format: int64 */
    staffIdentifier?: number
    team?: definitions['Team']
    /** Format: int64 */
    teamIdentifier?: number
  }
  /** ManagedOffender */
  ManagedOffender: {
    crnNumber: string
    currentOm?: boolean
    currentPom?: boolean
    currentRo?: boolean
    nomsNumber: string
    /** Format: int64 */
    offenderId: number
    offenderSurname: string
    /** Format: date */
    omEndDate: string
    /** Format: date */
    omStartDate: string
    staffCode: string
    /** Format: int64 */
    staffIdentifier: number
  }
  /** ManagedOffenderCrn */
  ManagedOffenderCrn: {
    /** Format: date */
    allocationDate?: string
    offenderCrn?: string
    staff?: definitions['StaffHuman']
    /** Format: int64 */
    staffIdentifier?: number
    team?: definitions['Team']
    /** Format: int64 */
    teamIdentifier?: number
  }
  /**
   * MappaDetails
   * @description MAPPA Details
   */
  MappaDetails: {
    /**
     * Format: int32
     * @description MAPPA Category (0 = unknown)
     * @example 3
     * @enum {integer}
     */
    category?: 0 | 1 | 2 | 3
    /**
     * @description MAPPA Category Description
     * @example MAPPA Cat 1
     */
    categoryDescription?: string
    /**
     * Format: int32
     * @description MAPPA Level (0=unknown)
     * @example 1
     * @enum {integer}
     */
    level?: 0 | 1 | 2 | 3
    /**
     * @description MAPPA Level Description
     * @example MAPPA Level 1
     */
    levelDescription?: string
    /** @description Notes */
    notes?: string
    /** @description Officer */
    officer?: definitions['StaffHuman']
    /** @description Probation area */
    probationArea?: definitions['KeyValue']
    /**
     * Format: date
     * @description Next review date
     * @example 2021-04-27
     */
    reviewDate?: string
    /**
     * Format: date
     * @description Start date
     * @example 2021-01-27
     */
    startDate?: string
    /** @description Team */
    team?: definitions['KeyValue']
  }
  /**
   * NewCourtDto
   * @description Court details for a new court
   */
  NewCourtDto: {
    /** @description true when this court is open */
    active?: boolean
    buildingName?: string
    /**
     * @description unique code for this court
     * @example SALEMC
     */
    code?: string
    /** @example England */
    country?: string
    /** @example South Yorkshire */
    county?: string
    courtName: string
    /**
     * @description type code from standard reference data
     * @example MAG
     */
    courtTypeCode?: string
    fax?: string
    locality?: string
    postcode?: string
    /**
     * @description probation area code from probation areas
     * @example N51
     */
    probationAreaCode?: string
    street?: string
    telephoneNumber?: string
    town?: string
  }
  /** NotificationResponse */
  NotificationResponse: {
    /** Format: int64 */
    contactId: number
  }
  /** Nsi */
  Nsi: {
    active?: boolean
    /** Format: date */
    actualEndDate?: string
    /** Format: date */
    actualStartDate?: string
    /** Format: date */
    expectedEndDate?: string
    /** Format: date */
    expectedStartDate?: string
    intendedProvider?: definitions['ProbationArea']
    /** Format: int64 */
    length?: number
    lengthUnit?: string
    notes?: string
    /** Format: int64 */
    nsiId?: number
    nsiManagers?: definitions['NsiManager'][]
    nsiOutcome?: definitions['KeyValue']
    nsiStatus?: definitions['KeyValue']
    nsiSubType?: definitions['KeyValue']
    nsiType?: definitions['KeyValue']
    /** @description present only for recalls, convenience property indicating this resulted in a recall */
    outcomeRecall?: boolean
    /** @description present only for recalls, convenience property indicating the recall was never accepted */
    recallRejectedOrWithdrawn?: boolean
    /** Format: date */
    referralDate?: string
    requirement?: definitions['Requirement']
    softDeleted?: boolean
    /** Format: date-time */
    statusDateTime?: string
  }
  /** NsiManager */
  NsiManager: {
    /** Format: date */
    endDate?: string
    probationArea?: definitions['ProbationArea']
    staff?: definitions['StaffDetails']
    /** Format: date */
    startDate?: string
    team?: definitions['Team']
  }
  /**
   * NsiWrapper
   * @description NSI Wrapper
   */
  NsiWrapper: {
    /** @description List of NSIs */
    nsis?: definitions['Nsi'][]
  }
  /** Offence */
  Offence: {
    /** Format: date-time */
    createdDatetime?: string
    detail?: definitions['OffenceDetail']
    /** Format: date-time */
    lastUpdatedDatetime?: string
    mainOffence?: boolean
    /** Format: int64 */
    offenceCount?: number
    /** Format: date-time */
    offenceDate?: string
    offenceId?: string
    /** Format: int64 */
    offenderId?: number
    /** Format: int64 */
    tics?: number
    verdict?: string
  }
  /** OffenceDetail */
  OffenceDetail: {
    abbreviation?: string
    cjitCode?: string
    code?: string
    description?: string
    form20Code?: string
    mainCategoryAbbreviation?: string
    mainCategoryCode?: string
    mainCategoryDescription?: string
    ogrsOffenceCategory?: string
    subCategoryAbbreviation?: string
    subCategoryCode?: string
    subCategoryDescription?: string
  }
  /** OffenderAlias */
  OffenderAlias: {
    /** Format: date */
    dateOfBirth?: string
    firstName?: string
    gender?: string
    id?: string
    middleNames?: string[]
    surname?: string
  }
  /** OffenderAssessments */
  OffenderAssessments: {
    /**
     * Format: int32
     * @description Offender Group Reconviction Scale
     */
    ogrsScore?: number
    /**
     * Format: double
     * @description Risk of Serious Recidivism
     */
    rsrScore?: number
  }
  /** OffenderDelta */
  OffenderDelta: {
    /**
     * @description Type of delta
     * @example UPSERT
     * @enum {string}
     */
    action?: 'DELETE' | 'UPSERT'
    /**
     * Format: date-time
     * @description The datetime the change occurred
     * @example 2019-11-27T15:12:43.000Z
     */
    dateChanged?: string
    /**
     * Format: int64
     * @description Offender ID
     * @example 232423
     */
    offenderId?: number
  }
  /** OffenderDetail */
  OffenderDetail: {
    /** @description identifies if this person is on an active sentence of interest to probation */
    activeProbationManagedSentence?: boolean
    contactDetails?: definitions['ContactDetails']
    /**
     * @description deprecated, use activeProbationManagedSentence
     * @example 1
     */
    currentDisposal?: string
    /** @description When true this record can not be viewed by specific probation staff */
    currentExclusion?: boolean
    /** @description When true this record can only be viewed by specific probation staff */
    currentRestriction?: boolean
    /**
     * @description current tier
     * @example D2
     */
    currentTier?: string
    /**
     * Format: date
     * @example 1982-10-24
     */
    dateOfBirth?: string
    /** @description Message to show staff who have been excluded from viewing this record */
    exclusionMessage?: string
    /** @example John */
    firstName?: string
    /** @example Male */
    gender?: string
    middleNames?: string[]
    offenderAliases?: definitions['OffenderAlias'][]
    /** Format: int64 */
    offenderId: number
    offenderManagers?: definitions['OffenderManager'][]
    offenderProfile?: definitions['OffenderProfile']
    otherIds?: definitions['IDs']
    /** @example National Data */
    partitionArea?: string
    /** @example Bob */
    preferredName?: string
    /** @example Davis */
    previousSurname?: string
    /** @description Message to show staff who have not been included to view this record */
    restrictionMessage?: string
    /** @description When true this record has been deleted */
    softDeleted?: boolean
    /** @example Smith */
    surname?: string
    /** @example Mr */
    title?: string
  }
  /** OffenderDetailSummary */
  OffenderDetailSummary: {
    /** @description identifies if this person is on an active sentence of interest to probation */
    activeProbationManagedSentence?: boolean
    contactDetails?: definitions['ContactDetailsSummary']
    /**
     * @description deprecated, use activeProbationManagedSentence
     * @example 1
     */
    currentDisposal?: string
    /** @description When true this record can not be viewed by specific probation staff */
    currentExclusion?: boolean
    /** @description When true this record can only be viewed by specific probation staff */
    currentRestriction?: boolean
    /**
     * Format: date
     * @example 1982-10-24
     */
    dateOfBirth?: string
    /** @example John */
    firstName?: string
    /** @example Male */
    gender?: string
    middleNames?: string[]
    /** Format: int64 */
    offenderId: number
    offenderProfile?: definitions['OffenderProfile']
    otherIds?: definitions['IDs']
    /** @example National Data */
    partitionArea?: string
    /** @example Bob */
    preferredName?: string
    /** @example Davis */
    previousSurname?: string
    /** @description When true this record has been deleted */
    softDeleted?: boolean
    /** @example Smith */
    surname?: string
    /** @example Mr */
    title?: string
  }
  /** OffenderDocumentDetail */
  OffenderDocumentDetail: {
    author?: string
    /** Format: date-time */
    createdAt?: string
    documentName?: string
    extendedDescription?: string
    id?: string
    /** Format: date-time */
    lastModifiedAt?: string
    /** Format: int64 */
    parentPrimaryKeyId?: number
    reportDocumentDates?: definitions['ReportDocumentDates']
    subType?: definitions['KeyValue']
    type?: definitions['KeyValue']
  }
  /** OffenderDocuments */
  OffenderDocuments: {
    convictions?: definitions['ConvictionDocuments'][]
    documents?: definitions['OffenderDocumentDetail'][]
  }
  /**
   * OffenderIdentifiers
   * @description Offender Identifiers
   */
  OffenderIdentifiers: {
    /** @description Additional identifiers */
    additionalIdentifiers?: definitions['AdditionalIdentifier'][]
    /**
     * Format: int64
     * @description unique identifier for this offender
     * @example 1234567
     */
    offenderId?: number
    /** @description Primary identifiers */
    primaryIdentifiers?: definitions['IDs']
  }
  /** OffenderLanguages */
  OffenderLanguages: {
    languageConcerns?: string
    otherLanguages?: string[]
    primaryLanguage?: string
    requiresInterpreter?: boolean
  }
  /** OffenderLatestRecall */
  OffenderLatestRecall: {
    /** @description Last recall */
    lastRecall?: definitions['OffenderRecall']
    /** @description Last release */
    lastRelease?: definitions['OffenderRelease']
  }
  /** OffenderManager */
  OffenderManager: {
    active?: boolean
    allocationReason?: definitions['KeyValue']
    /** Format: date */
    fromDate?: string
    partitionArea?: string
    probationArea?: definitions['ProbationArea']
    providerEmployee?: definitions['Human']
    softDeleted?: boolean
    staff?: definitions['StaffHuman']
    team?: definitions['Team']
    /** Format: date */
    toDate?: string
    trustOfficer?: definitions['Human']
  }
  /** OffenderProfile */
  OffenderProfile: {
    disabilities?: definitions['Disability'][]
    ethnicity?: string
    /** @example Prefer to self-describe */
    genderIdentity?: string
    immigrationStatus?: string
    nationality?: string
    notes?: string
    offenderDetails?: string
    offenderLanguages?: definitions['OffenderLanguages']
    previousConviction?: definitions['PreviousConviction']
    religion?: string
    remandStatus?: string
    riskColour?: string
    secondaryNationality?: string
    /** @example Jedi */
    selfDescribedGender?: string
    sexualOrientation?: string
  }
  /** OffenderRecall */
  OffenderRecall: {
    /**
     * Format: date
     * @description The date the recall occurred
     * @example 2019-11-27
     */
    date?: string
    /** @description Some notes */
    notes?: string
    /** @description The reason for the recall */
    reason?: definitions['KeyValue']
  }
  /** OffenderRecalledNotification */
  OffenderRecalledNotification: {
    /**
     * @description The Prison institution code in NOMIS the offender was recalled to
     * @example MDI
     */
    nomsPrisonInstitutionCode: string
    /**
     * Format: date
     * @description The date the offender was returned to custody
     * @example 2020-10-25
     */
    recallDate: string
  }
  /** OffenderRelease */
  OffenderRelease: {
    /**
     * Format: date
     * @description The date the release occurred
     * @example 2019-11-26
     */
    date?: string
    /** @description The institution the offender was released from */
    institution?: definitions['Institution']
    /** @description Some notes */
    notes?: string
    /** @description The reason for the release */
    reason?: definitions['KeyValue']
  }
  /** OffenderReleasedNotification */
  OffenderReleasedNotification: {
    /**
     * @description The Prison institution code in NOMIS the offender was released from
     * @example MDI
     */
    nomsPrisonInstitutionCode: string
    /**
     * Format: date
     * @description The date the offender was released from custody
     * @example 2020-10-25
     */
    releaseDate?: string
  }
  /** OffenderUpdate */
  OffenderUpdate: {
    /**
     * @description Type of delta
     * @example UPSERT
     * @enum {string}
     */
    action?: 'DELETE' | 'UPSERT'
    /**
     * Format: date-time
     * @description The datetime the change occurred
     * @example 2019-11-27T15:12:43.000Z
     */
    dateChanged?: string
    /** @description A previously failed update */
    failedUpdate?: boolean
    /**
     * Format: int64
     * @description Offender Delta ID
     * @example 341256
     */
    offenderDeltaId?: number
    /**
     * Format: int64
     * @description Offender ID
     * @example 232423
     */
    offenderId?: number
    /**
     * Format: int64
     * @description Record number from source table
     * @example 13256
     */
    sourceRecordId?: number
    /**
     * @description Source table
     * @example OFFENDER
     */
    sourceTable?: string
    /**
     * @description Status
     * @example CREATED
     */
    status?: string
  }
  /** OfficeLocation */
  OfficeLocation: {
    /** @example Ashley House */
    buildingName?: string
    /** @example 14 */
    buildingNumber?: string
    /** @example ASP_ASH */
    code?: string
    /** @example Somerset */
    county?: string
    /** @example Ashley House Approved Premises */
    description?: string
    /** @example BS2 8NB */
    postcode?: string
    /** @example Somerset Street */
    streetName?: string
    /** @example Bristol */
    townCity?: string
  }
  /** OrderManager */
  OrderManager: {
    /** Format: date */
    dateEndOfAllocation?: string
    /** Format: date */
    dateStartOfAllocation?: string
    gradeCode?: string
    name?: string
    /** Format: int64 */
    officerId?: number
    /** Format: int64 */
    probationAreaId?: number
    staffCode?: string
    /** Format: int64 */
    teamId?: number
  }
  /** PageOfActivityLogGroup */
  PageOfActivityLogGroup: {
    content?: definitions['ActivityLogGroup'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    /** Format: int32 */
    number?: number
    /** Format: int32 */
    numberOfElements?: number
    pageable?: definitions['Pageable']
    /** Format: int32 */
    size?: number
    sort?: definitions['Sort']
    /** Format: int64 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
  }
  /** PageOfContactSummary */
  PageOfContactSummary: {
    content?: definitions['ContactSummary'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    /** Format: int32 */
    number?: number
    /** Format: int32 */
    numberOfElements?: number
    pageable?: definitions['Pageable']
    /** Format: int32 */
    size?: number
    sort?: definitions['Sort']
    /** Format: int64 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
  }
  /** PageOfKeyValue */
  PageOfKeyValue: {
    content?: definitions['KeyValue'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    /** Format: int32 */
    number?: number
    /** Format: int32 */
    numberOfElements?: number
    pageable?: definitions['Pageable']
    /** Format: int32 */
    size?: number
    sort?: definitions['Sort']
    /** Format: int64 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
  }
  /** PageOfPrimaryIdentifiers */
  PageOfPrimaryIdentifiers: {
    content?: definitions['PrimaryIdentifiers'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    /** Format: int32 */
    number?: number
    /** Format: int32 */
    numberOfElements?: number
    pageable?: definitions['Pageable']
    /** Format: int32 */
    size?: number
    sort?: definitions['Sort']
    /** Format: int64 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
  }
  /** PageOfStaffCaseloadEntry */
  PageOfStaffCaseloadEntry: {
    content?: definitions['StaffCaseloadEntry'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    /** Format: int32 */
    number?: number
    /** Format: int32 */
    numberOfElements?: number
    pageable?: definitions['Pageable']
    /** Format: int32 */
    size?: number
    sort?: definitions['Sort']
    /** Format: int64 */
    totalElements?: number
    /** Format: int32 */
    totalPages?: number
  }
  /** Pageable */
  Pageable: {
    /** Format: int64 */
    offset?: number
    /** Format: int32 */
    pageNumber?: number
    /** Format: int32 */
    pageSize?: number
    paged?: boolean
    sort?: definitions['Sort']
    unpaged?: boolean
  }
  /** PersonalCircumstance */
  PersonalCircumstance: {
    /**
     * Format: date-time
     * @example 2021-06-11T13:00:00
     */
    createdDatetime?: string
    /**
     * Format: date
     * @description When the offender ended this circumstance
     * @example 2019-09-11
     */
    endDate?: string
    /**
     * @description true if evidence was supplied for this circumstance
     * @example true
     */
    evidenced?: boolean
    /**
     * @description The active status of this personal circumstance, if the start date is before or on today and the end date is after today or null
     * @example true
     */
    isActive?: boolean
    /**
     * Format: date-time
     * @example 2021-06-11T14:00:00
     */
    lastUpdatedDatetime?: string
    /** @description Additional notes */
    notes?: string
    /**
     * Format: int64
     * @description Unique id of this offender
     * @example 2500343964
     */
    offenderId?: number
    /**
     * Format: int64
     * @description Unique id of this personal circumstance
     * @example 2500064995
     */
    personalCircumstanceId?: number
    /** @description The type of sub personal circumstance */
    personalCircumstanceSubType?: definitions['KeyValue']
    /** @description The type of personal circumstance */
    personalCircumstanceType?: definitions['KeyValue']
    /** @description The probation area that added this circumstance */
    probationArea?: definitions['KeyValue']
    /**
     * Format: date
     * @description When the offender started this circumstance
     * @example 2019-09-11
     */
    startDate?: string
  }
  /**
   * PersonalCircumstances
   * @description Personal circumstances Wrapper
   */
  PersonalCircumstances: {
    /** @description List of personal circumstances */
    personalCircumstances?: definitions['PersonalCircumstance'][]
  }
  /** PersonalContact */
  PersonalContact: {
    address?: definitions['AddressSummary']
    /**
     * Format: date-time
     * @example 2021-06-10T12:00:00Z
     */
    createdDatetime?: string
    /** @example example@example.com */
    emailAddress?: string
    /**
     * Format: date-time
     * @example 2021-07-10T00:00:00Z
     */
    endDate?: string
    /** @example Brian */
    firstName?: string
    /** @example Male */
    gender?: string
    /**
     * @description The active status of this record, if the start date is before or on today and the end date is after today or null
     * @example true
     */
    isActive?: boolean
    /**
     * Format: date-time
     * @example 2021-06-10T14:00:00Z
     */
    lastUpdatedDatetime?: string
    /** @example 0123456789 */
    mobileNumber?: string
    /** @example Some notes about this personal contact */
    notes?: string
    /** @example Danger */
    otherNames?: string
    /**
     * Format: int64
     * @example 1
     */
    personalContactId?: number
    /** @example Haggis */
    previousSurname?: string
    /** @example Father */
    relationship?: string
    relationshipType?: definitions['KeyValue']
    /**
     * Format: date-time
     * @example 2021-06-10T00:00:00Z
     */
    startDate?: string
    /** @example Cheese */
    surname?: string
    /** @example Mr */
    title?: string
  }
  /** PhoneNumber */
  PhoneNumber: {
    number?: string
    /** @enum {string} */
    type?: 'MOBILE' | 'TELEPHONE'
  }
  /** PreviousConviction */
  PreviousConviction: {
    /** Format: date */
    convictionDate?: string
    detail?: { [key: string]: string }
  }
  /**
   * PrimaryIdentifiers
   * @description Offender primary identifiers
   */
  PrimaryIdentifiers: {
    /**
     * @description case reference number
     * @example 12345C
     */
    crn: string
    /**
     * Format: int64
     * @description unique identifier for this offender
     * @example 1234567
     */
    offenderId?: number
  }
  /** ProbationArea */
  ProbationArea: {
    /**
     * @description area code
     * @example N01
     */
    code?: string
    /**
     * @description description
     * @example NPS North West
     */
    description?: string
    institution?: definitions['Institution']
    /**
     * @description True if NPS else CRC
     * @example true
     */
    nps?: boolean
    organisation?: definitions['KeyValue']
    /** Format: int64 */
    probationAreaId: number
    teams?: definitions['AllTeam'][]
  }
  /** ProbationAreaWithLocalDeliveryUnits */
  ProbationAreaWithLocalDeliveryUnits: {
    /**
     * @description area code
     * @example N01
     */
    code?: string
    /**
     * @description description
     * @example NPS North West
     */
    description?: string
    localDeliveryUnits?: definitions['LocalDeliveryUnit'][]
  }
  /** ProbationStatusDetail */
  ProbationStatusDetail: {
    /** @description True if the offender has a event with no sentence which has been adjourned for a pre-sentence report */
    awaitingPsr?: boolean
    /** @description True if the offender is in breach of a current sentence */
    inBreach?: boolean
    /** @description True if the offender has a conviction with no sentence */
    preSentenceActivity?: boolean
    /**
     * Format: date
     * @description The termination date of the most recently terminated sentence
     */
    previouslyKnownTerminationDate?: string
    /** @enum {string} */
    status?: 'CURRENT' | 'NOT_SENTENCED' | 'PREVIOUSLY_KNOWN'
  }
  /** Provision */
  Provision: {
    /** Format: date */
    finishDate?: string
    notes?: string
    /** Format: int64 */
    provisionId?: number
    provisionType?: definitions['KeyValue']
    /** Format: date */
    startDate?: string
  }
  /** PssRequirement */
  PssRequirement: {
    /** @description Is the requirement currently active */
    active?: boolean
    subType?: definitions['KeyValue']
    type?: definitions['KeyValue']
  }
  /** PssRequirements */
  PssRequirements: {
    /** @description List of pssRequirements associated with this conviction */
    pssRequirements?: definitions['PssRequirement'][]
  }
  /** ReferenceData */
  ReferenceData: {
    /** @description true if this item is currently selectable in Delius */
    active?: boolean
    /**
     * @description code of reference data
     * @example VISO
     */
    code?: string
    /**
     * @description description of reference data
     * @example ViSOR Number
     */
    description?: string
  }
  /**
   * ReferenceDataList
   * @description Reference data list
   */
  ReferenceDataList: {
    /** @description List of reference data items */
    referenceData?: definitions['ReferenceData'][]
  }
  /**
   * ReferenceDataSets
   * @description Reference data sets
   */
  ReferenceDataSets: {
    /**
     * @description List of reference data sets, for example
     * {
     *             "code": "ADDITIONAL SENTENCE",
     *             "description": "Additional Sentence"
     *         }
     */
    referenceDataSets?: definitions['KeyValue'][]
  }
  /** ReferralEndResponse */
  ReferralEndResponse: {
    /** Format: int64 */
    nsiId?: number
  }
  /** ReferralStartResponse */
  ReferralStartResponse: {
    /** Format: int64 */
    nsiId?: number
  }
  /** Registration */
  Registration: {
    /** @description true if active */
    active?: boolean
    /** @description Latest Additional notes about the de-registration */
    deregisteringNotes?: string
    /** @description Latest Probation officer who removed the offender from the register */
    deregisteringOfficer?: definitions['StaffHuman']
    /** @description Latest Probation area that removed the offender from the register */
    deregisteringProbationArea?: definitions['KeyValue']
    /** @description Latest Probation team that removed the offender from the register */
    deregisteringTeam?: definitions['KeyValue']
    /**
     * Format: date
     * @description Latest Date removed from register
     * @example 2021-01-30
     */
    endDate?: string
    /**
     * Format: date
     * @description Date probation should review if the offender should still be on still register
     * @example 2021-01-30
     */
    nextReviewDate?: string
    /** @description Additional notes */
    notes?: string
    /**
     * Format: int32
     * @description Count of number times this was de-registered
     */
    numberOfPreviousDeregistrations?: number
    /**
     * Format: int64
     * @description Unique id of this offender
     * @example 2500343964
     */
    offenderId?: number
    /** @description Register this offender has been added to. For example RoSH */
    register?: definitions['KeyValue']
    /** @description Category of register. Only used for certain registers for example Hate Crime category */
    registerCategory?: definitions['KeyValue']
    /** @description Level of register. Only used for certain registers for example Lifer - Supervised */
    registerLevel?: definitions['KeyValue']
    /** @description Probation officer who added the offender to the register */
    registeringOfficer?: definitions['StaffHuman']
    /** @description Probation area that added the offender to the register */
    registeringProbationArea?: definitions['KeyValue']
    /** @description Probation team that added the offender to the register */
    registeringTeam?: definitions['KeyValue']
    /**
     * Format: int64
     * @description Unique id of this registration
     * @example 2500064995
     */
    registrationId?: number
    registrationReviews?: definitions['RegistrationReview'][]
    /**
     * Format: int64
     * @description Number of months a review should take place
     * @example 6
     */
    reviewPeriodMonths?: number
    /**
     * @description Literal visual colour this register represents
     * @example Amber
     */
    riskColour?: string
    /**
     * Format: date
     * @description Date added to register
     * @example 2021-01-30
     */
    startDate?: string
    /** @description Type of register. For example Low RoSH */
    type?: definitions['KeyValue']
    /** @description true if the register is serious enough to warn the probation officer of risk to themselves */
    warnUser?: boolean
  }
  /** RegistrationReview */
  RegistrationReview: {
    /** @description If the review has been completed */
    completed?: boolean
    /** @description Notes attached to the registration review */
    notes?: string
    /**
     * Format: date
     * @description Date the registration was reviewed
     */
    reviewDate?: string
    /**
     * Format: date
     * @description Date the next registration review is due
     */
    reviewDateDue?: string
    /** @description Probation office that reviewed the registration */
    reviewingOfficer?: definitions['StaffHuman']
    /** @description Probation team that reviewed the registration */
    reviewingTeam?: definitions['KeyValue']
  }
  /**
   * Registrations
   * @description Registration Wrapper
   */
  Registrations: {
    /** @description List of registrations */
    registrations?: definitions['Registration'][]
  }
  /**
   * ReplaceCustodyKeyDates
   * @description Any dates not supplied will be removed from the associated conviction
   */
  ReplaceCustodyKeyDates: {
    /**
     * Format: date
     * @description Conditional release date
     * @example 2020-06-23
     */
    conditionalReleaseDate?: string
    /**
     * Format: date
     * @description Expected release date
     * @example 2020-06-23
     */
    expectedReleaseDate?: string
    /**
     * Format: date
     * @description Home detention curfew eligibility date
     * @example 2020-06-23
     */
    hdcEligibilityDate?: string
    /**
     * Format: date
     * @description Licence expiry date
     * @example 2020-06-23
     */
    licenceExpiryDate?: string
    /**
     * Format: date
     * @description Parole eligibility date
     * @example 2020-06-23
     */
    paroleEligibilityDate?: string
    /**
     * Format: date
     * @description Post sentence Supervision end date. AKA Top-up supervision end data
     * @example 2020-06-23
     */
    postSentenceSupervisionEndDate?: string
    /**
     * Format: date
     * @description Sentence expiry date
     * @example 2020-06-23
     */
    sentenceExpiryDate?: string
  }
  /** ReportDocumentDates */
  ReportDocumentDates: {
    /** Format: date-time */
    completedDate?: string
    /** Format: date */
    requestedDate?: string
    /** Format: date */
    requiredDate?: string
  }
  /** ReportManager */
  ReportManager: {
    active?: boolean
    staff?: definitions['StaffHuman']
  }
  /** Requirement */
  Requirement: {
    /** @description Is the requirement currently active */
    active?: boolean
    adRequirementTypeMainCategory?: definitions['KeyValue']
    adRequirementTypeSubCategory?: definitions['KeyValue']
    /** Format: date */
    commencementDate?: string
    /** Format: date-time */
    createdDatetime?: string
    /** Format: date */
    expectedEndDate?: string
    /** Format: date */
    expectedStartDate?: string
    /**
     * Format: int64
     * @description The number of temporal units to complete the requirement (see lengthUnit field for unit)
     */
    length?: number
    /** @description The temporal unit corresponding to the length field */
    lengthUnit?: string
    /**
     * Format: int64
     * @description Total RAR days completed
     */
    rarCount?: number
    /**
     * Format: int64
     * @description Unique identifier for the requirement
     */
    requirementId: number
    /** @description Notes added by probation relating to the requirement */
    requirementNotes?: string
    requirementTypeMainCategory?: definitions['KeyValue']
    requirementTypeSubCategory?: definitions['KeyValue']
    /** @description Is the main category restrictive */
    restrictive?: boolean
    softDeleted?: boolean
    /** Format: date */
    startDate?: string
    /** Format: date */
    terminationDate?: string
    terminationReason?: definitions['KeyValue']
  }
  /** Resource */
  Resource: {
    description?: string
    file?: unknown
    filename?: string
    inputStream?: definitions['InputStream']
    open?: boolean
    readable?: boolean
    /** Format: uri */
    uri?: string
    /** Format: url */
    url?: string
  }
  /**
   * ResourcingDecision
   * @description Risk Resourcing Details
   */
  ResourcingDecision: {
    /**
     * @description The decision code
     * @example R
     */
    code?: string
    /**
     * Format: date
     * @description Date decision was made
     * @example 2021-04-27
     */
    date?: string
    /**
     * @description The decision description
     * @example Retained
     */
    description?: string
  }
  /** ResponsibleOfficer */
  ResponsibleOfficer: {
    currentOm?: boolean
    currentPom?: boolean
    currentRo?: boolean
    forenames?: string
    lduCode?: string
    lduDescription?: string
    nomsNumber: string
    /** Format: int64 */
    offenderManagerId?: number
    /** Format: date */
    omEndDate: string
    /** Format: date */
    omStartDate: string
    /** Format: int64 */
    prisonOffenderManagerId?: number
    probationAreaCode?: string
    probationAreaDescription?: string
    providerTeamCode?: string
    providerTeamDescription?: string
    /** Format: int64 */
    responsibleOfficerId?: number
    staffCode: string
    surname: string
  }
  /**
   * ResponsibleOfficerSwitch
   * @description Request body for switching the responsible officer
   */
  ResponsibleOfficerSwitch: {
    /**
     * @description true if the RO should be set the the current community offender manager
     * @example true
     */
    switchToCommunityOffenderManager?: boolean
    /** @description true if the RO should be set the the current prison offender manager */
    switchToPrisonOffenderManager?: boolean
  }
  /**
   * RiskResourcingDetails
   * @description Risk Resourcing Details
   */
  RiskResourcingDetails: {
    /** @description decision */
    decision?: definitions['ResourcingDecision']
    /**
     * @description This is equivalent to indicating if the person is retained by NPS when there was a NPS/CRC split. true = requires enhanced resourcing as if they were allocated to the NPS
     * @example true
     */
    enhancedResourcing?: boolean
    /**
     * Format: int64
     * @description id of the conviction that lead to the decision
     * @example 1219491
     */
    relatedConvictionId?: number
  }
  /** Sentence */
  Sentence: {
    additionalSentences?: definitions['AdditionalSentence'][]
    cja2003Order?: boolean
    /** Format: int64 */
    defaultLength?: number
    description?: string
    /** Format: int64 */
    effectiveLength?: number
    /**
     * Format: date
     * @description The expected end date of the sentence
     */
    expectedSentenceEndDate?: string
    /** Format: int64 */
    failureToComplyLimit?: number
    legacyOrder?: boolean
    /** Format: int64 */
    lengthInDays?: number
    /** Format: int64 */
    originalLength?: number
    originalLengthUnits?: string
    /** Format: int64 */
    secondLength?: number
    secondLengthUnits?: string
    /** Format: int64 */
    sentenceId?: number
    /** @description Sentence type and description */
    sentenceType?: definitions['KeyValue']
    /**
     * Format: date
     * @description Date sentence started
     */
    startDate?: string
    /** Format: date */
    terminationDate?: string
    terminationReason?: string
    /** @description Unpaid Work to date associated with this sentence */
    unpaidWork?: definitions['UnpaidWork']
  }
  /** SentenceStatus */
  SentenceStatus: {
    /** Format: date */
    actualReleaseDate?: string
    custodialType?: definitions['KeyValue']
    /** Format: int64 */
    length?: number
    lengthUnit?: string
    /** Format: date */
    licenceExpiryDate?: string
    mainOffence?: definitions['KeyValue']
    /** Format: date */
    pssEndDate?: string
    sentence?: definitions['KeyValue']
    /** Format: date */
    sentenceDate?: string
    /** Format: int64 */
    sentenceId?: number
  }
  /** Sort */
  Sort: {
    empty?: boolean
    sorted?: boolean
    unsorted?: boolean
  }
  /** StaffCaseloadEntry */
  StaffCaseloadEntry: {
    crn?: string
    firstName?: string
    middleNames?: string[]
    preferredName?: string
    surname?: string
  }
  /** StaffDetails */
  StaffDetails: {
    /**
     * @description the optional email address of this staff member, will be absent if the staff member is not a user of Delius
     * @example sheila.hancock@test.justice.gov.uk
     */
    email?: string
    /** @description provider this staff member is associated with */
    probationArea?: definitions['ProbationArea']
    /** @description staff name details */
    staff?: definitions['Human']
    /**
     * @description staff code AKA officer code
     * @example SH00001
     */
    staffCode?: string
    /**
     * Format: int64
     * @description staff identifier
     * @example 123456
     */
    staffIdentifier?: number
    /** @description all teams related to this staff member */
    teams?: definitions['Team'][]
    /**
     * @description the optional telephone number of this staff member, will be absent if the staff member is not a user of Delius
     * @example 020 1111 2222
     */
    telephoneNumber?: string
    /**
     * @description the optional username of this staff member, will be absent if the staff member is not a user of Delius
     * @example SheilaHancockNPS
     */
    username?: string
  }
  /** StaffHuman */
  StaffHuman: {
    /**
     * @description Staff code
     * @example AN001A
     */
    code?: string
    /**
     * @description Given names
     * @example Sheila Linda
     */
    forenames?: string
    /**
     * @description Family name
     * @example Hancock
     */
    surname?: string
    unallocated?: boolean
  }
  /** Team */
  Team: {
    /** @description Team's borough */
    borough?: definitions['KeyValue']
    /**
     * @description Team code
     * @example C01T04
     */
    code?: string
    /**
     * @description Team description
     * @example OMU A
     */
    description?: string
    /** @description Team's district */
    district?: definitions['KeyValue']
    /**
     * @description Team email address
     * @example first.last@digital.justice.gov.uk
     */
    emailAddress?: string
    /**
     * Format: date
     * @description Team's end date
     */
    endDate?: string
    /** @description Local Delivery Unit - provides a geographic grouping of teams */
    localDeliveryUnit?: definitions['KeyValue']
    /**
     * Format: date
     * @description Team's start date
     */
    startDate?: string
    /** @description Team Type - provides a logical, not necessarily geographic, grouping of teams */
    teamType?: definitions['KeyValue']
    /**
     * @description Team telephone, often not populated
     * @example OMU A
     */
    telephone?: string
  }
  /** TeamCreationResult */
  TeamCreationResult: {
    /** @description List of teams created */
    teams?: definitions['Team'][]
    /** @description List of unallocated staff created */
    unallocatedStaff?: definitions['StaffHuman'][]
  }
  /** UnpaidWork */
  UnpaidWork: {
    /** @description Details of appointment history to date */
    appointments?: definitions['Appointments']
    /**
     * Format: int64
     * @description Minutes of unpaid work credited to the service user to date
     */
    minutesCompleted?: number
    /**
     * Format: int64
     * @description Minutes of unpaid work ordered for this sentence
     */
    minutesOrdered?: number
    /** @description Status description */
    status?: string
  }
  /**
   * UpdateCourtDto
   * @description Court details for updating an exiting court
   */
  UpdateCourtDto: {
    /** @description true when this court is open */
    active?: boolean
    buildingName?: string
    /** @example England */
    country?: string
    /** @example South Yorkshire */
    county?: string
    courtName: string
    /**
     * @description type code from standard reference data
     * @example MAG
     */
    courtTypeCode?: string
    fax?: string
    locality?: string
    postcode?: string
    street?: string
    telephoneNumber?: string
    town?: string
  }
  /** UpdateCustody */
  UpdateCustody: {
    /**
     * @description Prison institution code in NOMIS
     * @example MDI
     */
    nomsPrisonInstitutionCode?: string
  }
  /** UpdateCustodyBookingNumber */
  UpdateCustodyBookingNumber: {
    /**
     * @description Prison Booking number to be set on the conviction. AKA bookNo, prison number
     * @example 38339A
     */
    bookingNumber?: string
    /**
     * Format: date
     * @description Sentence start date from prison used to match with probation conviction
     * @example 2020-02-28
     */
    sentenceStartDate?: string
  }
  /** UpdateOffenderDetails */
  UpdateOffenderDetails: {
    /** @example John */
    firstName?: string
    /** @example Smith */
    surname?: string
  }
  /** UpdateOffenderNomsNumber */
  UpdateOffenderNomsNumber: {
    /**
     * @description NOMS number to be set on the offender. AKA offenderNo
     * @example G5555TT
     */
    nomsNumber?: string
  }
  /** UploadedDocumentCreateResponse */
  UploadedDocumentCreateResponse: {
    /** Format: date-time */
    creationDate?: string
    crn?: string
    /** Format: date-time */
    dateLastModified?: string
    documentName?: string
    /** Format: int64 */
    id?: number
    lastModifiedUser?: string
  }
  /**
   * UserDetails
   * @description User Details
   */
  UserDetails: {
    /**
     * @description Email address of the user
     * @example test@digital.justice.gov.uk
     */
    email?: string
    /** @description Account is enabled if true */
    enabled: boolean
    /**
     * @description First name of the user
     * @example John
     */
    firstName: string
    /** @description Roles For this User */
    roles?: definitions['UserRole'][]
    /**
     * @description Surname of the user
     * @example Smith
     */
    surname: string
    /**
     * Format: int64
     * @description User ID of the user
     * @example 12345
     */
    userId: number
    /**
     * @description The username of the user
     * @example test.user
     */
    username?: string
  }
  /**
   * UserRole
   * @description User Roles
   */
  UserRole: {
    /**
     * @description Code/Name of the Role
     * @example TEST_ROLE
     */
    name: string
  }
}

export interface operations {
  handleUsingGET: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  handleUsingGET_1: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  handleUsingGET_2: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  handleUsingGET_3: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getAllAppointmentTypesUsingGET: {
    responses: {
      /** All valid appointment types */
      200: {
        schema: definitions['AppointmentType'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  authenticateUsingPOST: {
    parameters: {
      body: {
        /** Authentication Details */
        authUser: definitions['AuthUser']
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_AUTH_INT */
      403: unknown
    }
  }
  getContactTypesUsingGET: {
    parameters: {
      query: {
        /** Contact category codes */
        categories?: string[]
      }
    }
    responses: {
      /** Contact types belonging to specified categories */
      200: {
        schema: definitions['ContactType'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getContactTypeOutcomesUsingGET: {
    parameters: {
      path: {
        /** contact type code */
        contactTypeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AvailableContactOutcomeTypes']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The contact type does not exit */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getCourtAppearancesUsingGET: {
    parameters: {
      query: {
        /** Return court appearances from the given date. Defaults to today if not provided. */
        fromDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtAppearanceMinimalWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and read scope */
  getCourtsUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['Court'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and read scope */
      403: unknown
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and write scope */
  insertCourtUsingPOST: {
    parameters: {
      body: {
        /** court */
        court: definitions['NewCourtDto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Court']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and write scope */
      403: unknown
      /** Court not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and read scope */
  getCourtUsingGET: {
    parameters: {
      path: {
        /** code */
        code: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Court']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and read scope */
      403: unknown
      /** Court not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and write scope */
  updateCourtUsingPUT: {
    parameters: {
      path: {
        /** unique code for this court */
        code: string
      }
      body: {
        /** court */
        court: definitions['UpdateCourtDto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Court']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and write scope */
      403: unknown
      /** Court not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  upsertCaseNotesToDeliusUsingPUT: {
    parameters: {
      body: {
        /** caseNote */
        caseNote: string
      }
      path: {
        /** caseNotesId */
        caseNotesId: number
        /** nomisId */
        nomisId: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: string
      }
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_DELIUS_CASE_NOTES */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDeltasUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDelta'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_PROBATION_OFFENDER_EVENTS */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  deleteOffenderDeltasUsingDELETE: {
    parameters: {
      query: {
        /** Delete records before the date time provided */
        before: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_PROBATION_OFFENDER_EVENTS */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderSummaryByCrnUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetailSummary']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender not found */
      404: unknown
    }
  }
  getActivityLogByCrnUsingGET: {
    parameters: {
      query: {
        /** appointmentsOnly */
        appointmentsOnly?: boolean
        /** attended */
        attended?: boolean
        /** complied */
        complied?: boolean
        /** contactDateFrom */
        contactDateFrom?: string
        /** contactDateTo */
        contactDateTo?: string
        /** contactTypes */
        contactTypes?: string[]
        /** Filters to the specified conviction ID or any offender level contact within the dates of the conviction. */
        convictionDatesOf?: number
        /** convictionId */
        convictionId?: number
        /** nationalStandard */
        nationalStandard?: boolean
        /** Has an outcome */
        outcome?: boolean
        /** Page number (0-based) */
        page?: number
        /** Optional size of page */
        pageSize?: number
        /** Counts toward the RAR day calculation, if this filter is set to false then no filter will be applied */
        rarActivity?: boolean
      }
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfActivityLogGroup']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender does not exist */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDetailByCrnUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender is not found */
      404: unknown
    }
  }
  /** Accepts an offender CRN in the format A999999 */
  getAllOffenderManagersForOffenderbyCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** include teams on the ProbationArea records */
        includeProbationAreaTeams?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderAppointmentsByCrnUsingGET: {
    parameters: {
      query: {
        /** attended */
        attended?: 'ATTENDED' | 'NOT_RECORDED' | 'UNATTENDED'
        /** date of the earliest appointment */
        from?: string
        /** date of the latest appointment */
        to?: string
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentDetail'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderAppointmentByCrnUsingGET: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Appointment or offender not found */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateAppointmentOutcomeWithContextUsingPOST: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
      }
      body: {
        /** appointmentOutcomeRequest */
        appointmentOutcomeRequest: definitions['ContextlessAppointmentOutcomeRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  relocateAppointmentUsingPOST: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** crn */
        crn: string
      }
      body: {
        /** appointmentRelocateRequest */
        appointmentRelocateRequest: definitions['AppointmentRelocateRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  rescheduleAppointmentWithContextNameUsingPOST: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
      }
      body: {
        /** appointmentRescheduleRequest */
        appointmentRescheduleRequest: definitions['ContextlessAppointmentRescheduleRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAssessmentsByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderAssessments']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderContactSummariesByCrnUsingGET: {
    parameters: {
      query: {
        /** appointmentsOnly */
        appointmentsOnly?: boolean
        /** attended */
        attended?: boolean
        /** complied */
        complied?: boolean
        /** contactDateFrom */
        contactDateFrom?: string
        /** contactDateTo */
        contactDateTo?: string
        /** contactTypes */
        contactTypes?: string[]
        /** convictionId */
        convictionId?: number
        /** from */
        from?: string
        /** Contacts to include. Can be a contact type code, prefixed with 'type_' or appointments */
        include?: string[]
        /** nationalStandard */
        nationalStandard?: boolean
        /** outcome */
        outcome?: boolean
        /** Page number (0-based) */
        page?: number
        /** Optional size of page */
        pageSize?: number
        /** Counts toward the RAR day calculation. If this filter is set to false then no filter will be applied. */
        rarActivity?: boolean
        /** to */
        to?: string
      }
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfContactSummary']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender does not exist */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderInitialAppointmentsByCrnUsingGET: {
    parameters: {
      query: {
        /** Show contacts from this date */
        contactDateFrom?: string
      }
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ContactSummary'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender does not exist */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderContactSummaryByCrnUsingGET: {
    parameters: {
      path: {
        /** contactId */
        contactId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** Contact with matching id and crn */
      200: {
        schema: definitions['ContactSummary']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Contact or offender not found */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getConvictionsForOffenderByCrnUsingGET: {
    parameters: {
      query: {
        /** retrieve only active convictions */
        activeOnly?: boolean
      }
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderConvictionsWithRarByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getNsisForOffenderByCrnAndActiveConvictionsUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** list of NSI codes to constrain by */
        nsiCodes: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['NsiWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getConvictionForOffenderByCrnAndConvictionIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN or conviction ID is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAttendancesUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Attendances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAttendancesByConvictionUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Attendances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderCourtAppearancesByCrnUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtAppearanceBasicWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderCourtReportsByCrnAndConvictionIdUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtReportMinimal'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender or conviction ID is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  createUPWDocumentInDeliusUsingPOST: {
    parameters: {
      formData: {
        fileData?: unknown
      }
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_PROBATION */
      403: unknown
      /** Active Offender Manager could not be found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getLicenceConditionsByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['LicenceConditions']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getNsiForOffenderByCrnAndConvictionIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** list of NSI codes to constrain by */
        nsiCodes: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['NsiWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getNsiByNsiIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
        /** ID for the nsi */
        nsiId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Nsi']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getPssRequirementsByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PssRequirements']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getRequirementsByConvictionIdUsingGET: {
    parameters: {
      query: {
        /** retrieve only active requirements */
        activeOnly?: boolean
      }
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ConvictionRequirements']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getSentenceStatusByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['SentenceStatus']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN / conviction ID is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderCourtReportByCrnAndCourtReportIdUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** courtReportId */
        courtReportId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtReportMinimal']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender or report is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getCustodyByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the conviction id. */
      404: unknown
    }
  }
  getAllCustodyKeyDateByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByCrnUsingPUT: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** typeCode */
        typeCode: string
      }
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByCrnUsingDELETE: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** The keyDate is not valid or a key date can not be deleted from an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getOffenderDocumentsByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** Optional filter for subtype within a type. Can only be used if type is also present<div>Supported sub-types are <ul>   <li>for type <b>COURT_REPORT_DOCUMENT</b>       <ul>           <li><b>PSR</b> - for Pre-Sentence Reports</li>       </ul>   </li></ul></div> */
        subtype?: string
        /** Optional filter for type<div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
        type?: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDocuments']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found. For example if the CRN is not known. */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDocumentByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
        /** Document Id */
        documentId: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Resource']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderIdentifiersByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderIdentifiers']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** No backward compatibility guaranteed - intended for the use of the Manage a Supervision service, behaviour or responses may be modified in the future. */
  getManageSupervisionsEligibilityUsingGET: {
    parameters: {
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffCaseloadEntry']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found or offender is not eligible */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateOffenderNomsNumberUsingPUT: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
      body: {
        /** updateOffenderNomsNumber */
        updateOffenderNomsNumber: definitions['UpdateOffenderNomsNumber']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['IDs']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderPersonalCircumstancesByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalCircumstances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAllOffenderPersonalContactsByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalContact'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getOffenderProbationStatusByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ProbationStatusDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender was not found */
      404: unknown
    }
  }
  endReferralContextLessUsingPOST: {
    parameters: {
      path: {
        /** Name identifying preprocessing applied to the request */
        context: string
        /** crn */
        crn: string
      }
      body: {
        /** referralEndRequest */
        referralEndRequest: definitions['ContextlessReferralEndRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  startReferralContextLessUsingPOST: {
    parameters: {
      path: {
        /** Name identifying preprocessing applied to the request */
        context: string
        /** crn */
        crn: string
      }
      body: {
        /** referralStartRequest */
        referralStartRequest: definitions['ContextlessReferralStartRequest']
      }
    }
    responses: {
      /** Created */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationsByCrnUsingGET: {
    parameters: {
      query: {
        /** retrieve only active registrations */
        activeOnly?: boolean
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registrations']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationDetailsByCrnUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
        /** registrationId */
        registrationId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registration']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts an offender CRN in the format A999999 */
  getLatestRecallAndReleaseForOffenderByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderLatestRecall']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderMappaDetailsByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['MappaDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderResourcingDetailsByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['RiskResourcingDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  createAppointmentUsingPOST: {
    parameters: {
      body: {
        /** appointmentCreateRequest */
        appointmentCreateRequest: definitions['AppointmentCreateRequest']
      }
      path: {
        /** crn */
        crn: string
        /** sentenceId */
        sentenceId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentCreateResponse']
      }
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Conflicts with another appointment */
      409: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  createAppointmentWithContextNameUsingPOST: {
    parameters: {
      body: {
        /** contextlessAppointmentCreateRequest */
        contextlessAppointmentCreateRequest: definitions['ContextlessAppointmentCreateRequest']
      }
      path: {
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
        /** sentenceId */
        sentenceId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentCreateResponse']
      }
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Conflicts with another appointment */
      409: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  notifyWithContextNameUsingPOST: {
    parameters: {
      body: {
        /** contextlessNotificationCreateRequest */
        contextlessNotificationCreateRequest: definitions['ContextlessNotificationCreateRequest']
      }
      path: {
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
        /** sentenceId */
        sentenceId: number
      }
    }
    responses: {
      /** Notified */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Conflicts with another appointment */
      409: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateTierUsingPOST: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
        /** New tier */
        tier:
          | 'A0'
          | 'A1'
          | 'A2'
          | 'A3'
          | 'B0'
          | 'B1'
          | 'B2'
          | 'B3'
          | 'C0'
          | 'C1'
          | 'C2'
          | 'C3'
          | 'D0'
          | 'D1'
          | 'D2'
          | 'D3'
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_MANAGEMENT_TIER_UPDATE */
      403: unknown
      /** The offender CRN or Tier is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  checkUserAccessByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AccessLimitation']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** User is restricted from access to offender */
      403: {
        schema: definitions['AccessLimitation']
      }
      /** No such offender, or no such User (see body for detail) */
      404: unknown
    }
  }
  checkUserAccessByCrnUsingGET_1: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AccessLimitation']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** User is restricted from access to offender */
      403: {
        schema: definitions['AccessLimitation']
      }
      /** No such offender, or no such User (see body for detail) */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY_EVENTS */
  getAndLockNextOffenderUpdateUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderUpdate']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_EVENTS */
      403: unknown
      /** No updates found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDetailsUsingGET: {
    parameters: {
      query: {
        /** Should fail if multiple offenders found regardless of status */
        failOnDuplicate?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetailSummary']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDetailByNomsNumberUsingGET: {
    parameters: {
      query: {
        /** Should fail if multiple offenders found */
        failOnDuplicate?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender is not found */
      404: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
  getAllOffenderManagersForOffenderUsingGET: {
    parameters: {
      query: {
        /** include teams on the ProbationArea records */
        includeProbationAreaTeams?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST: {
    parameters: {
      path: {
        /** bookingNumber */
        bookingNumber: string
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** replaceCustodyKeyDates */
        replaceCustodyKeyDates: definitions['ReplaceCustodyKeyDates']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender or conviction was not found. */
      404: unknown
    }
  }
  getOffenderContactReportByNomsNumberUsingGET: {
    parameters: {
      query: {
        /** contactTypes */
        contactTypes?: string[]
        /** from */
        from?: string
        /** to */
        to?: string
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Contact'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender does not exist */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getConvictionsForOffenderUsingGET: {
    parameters: {
      query: {
        /** retrieve only active convictions */
        activeOnly?: boolean
        /** Should fail if multiple offenders found regardless of status */
        failOnDuplicate?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getRecallNsisForOffenderByNomsNumberAndActiveConvictionsUsingGET: {
    parameters: {
      path: {
        /** NOMS number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['NsiWrapper']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender NOMS number is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateCustodyBookingNumberUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** updateCustodyBookingNumber */
        updateCustodyBookingNumber: definitions['UpdateCustodyBookingNumber']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** The booking number custody request is invalid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the sentence start date */
      404: unknown
    }
  }
  getCustodyByBookNumberUsingGET: {
    parameters: {
      path: {
        /** bookingNumber */
        bookingNumber: string
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the booking number. */
      404: unknown
    }
  }
  updateCustodyUsingPUT: {
    parameters: {
      path: {
        /** bookingNumber */
        bookingNumber: string
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** updateCustody */
        updateCustody: definitions['UpdateCustody']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** The custody request is invalid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the booking number. */
      404: unknown
    }
  }
  getAllCustodyKeyDateByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByNomsNumberUsingPUT: {
    parameters: {
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
      path: {
        /** nomsNumber */
        nomsNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByNomsNumberUsingDELETE: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** Key date has been deleted */
      200: unknown
      /** The keyDate is not valid or a key date can not be deleted from an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
  getOffenderDocumentsByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
      query: {
        /** Optional filter for subtype within a type. Can only be used if type is also present<div>Supported sub-types are <ul>   <li>for type <b>COURT_REPORT_DOCUMENT</b>       <ul>           <li><b>PSR</b> - for Pre-Sentence Reports</li>       </ul>   </li></ul></div> */
        subtype?: string
        /** Optional filter for type<div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
        type?: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDocuments']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDocumentUsingGET: {
    parameters: {
      path: {
        /** Document Id */
        documentId: string
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Resource']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderIdentifiersByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderIdentifiers']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderPersonalCircumstancesByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalCircumstances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  allocatePrisonOffenderManagerByNomsNumberUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** prisonOffenderManager */
        prisonOffenderManager: definitions['CreatePrisonOffenderManager']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager']
      }
      /** Staff id does belong to the probation area related prison institution */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The offender or prison institution is not found */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deallocatePrisonOffenderManagerByNomsNumberUsingDELETE: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** The noms number must be passed in the URL */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The offender is not found */
      404: unknown
      /** The offender does not have a POM to deallocate or the offender has multiple active noms numbers */
      409: unknown
    }
  }
  offenderRecalledUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** recallNotification */
        recallNotification: definitions['OffenderRecalledNotification']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
      /** The requested offender did not have a single active event */
      409: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationsByNomsNumberUsingGET: {
    parameters: {
      query: {
        /** failOnDuplicate */
        failOnDuplicate?: boolean
      }
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registrations']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
  getLatestRecallAndReleaseForOffenderUsingGET: {
    parameters: {
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderLatestRecall']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  offenderReleasedUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** releasedNotification */
        releasedNotification: definitions['OffenderReleasedNotification']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
      /** The requested offender did not have a single active event */
      409: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  switchResponsibleOfficerUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** responsibleOfficerSwitch */
        responsibleOfficerSwitch: definitions['ResponsibleOfficerSwitch']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager']
      }
      /** Either set true for the prisoner offender manager or the community offender manager */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The offender is not found */
      404: unknown
      /** Cannot find a current RO for offender or Cannot find an active POM for offender or Cannot find an active COM for offender */
      409: unknown
    }
  }
  /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
  getResponsibleOfficersForOffenderUsingGET: {
    parameters: {
      query: {
        /** Current only */
        current?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ResponsibleOfficer'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderMappaDetailsByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['MappaDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderResourcingDetailsByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['RiskResourcingDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned. */
  replaceOffenderNomsNumberUsingPUT: {
    parameters: {
      path: {
        /** originalNomsNumber */
        originalNomsNumber: string
      }
      body: {
        /** updateOffenderNomsNumber */
        updateOffenderNomsNumber: definitions['UpdateOffenderNomsNumber']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['IDs'][]
      }
      /** The new noms number is not present in request */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
      /** The new noms number is assigned to an existing offender already */
      409: unknown
    }
  }
  getAllCustodyKeyDateByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByOffenderIdUsingPUT: {
    parameters: {
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
      path: {
        /** offenderId */
        offenderId: number
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByOffenderIdUsingDELETE: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** Key date has been deleted */
      200: unknown
      /** The keyDate is not valid or a key date can not be deleted from an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderIdentifiersByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderIdentifiers']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderPersonalCircumstancesByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalCircumstances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationsByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registrations']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderIdsUsingGET: {
    parameters: {
      query: {
        /** Filter by offenders that were active on the supplied date. Advised not to use this in conjunction with includeActiveOnly since that will effectively return offenders active of this supplied date and current date which is typically not what is required. */
        activeDate?: string
        /** Filter by offenders that are active, i.e. offenders on a sentence that probation has an interest in. */
        includeActiveOnly?: boolean
        /** Include deleted offenders */
        includeDeleted?: boolean
        offset?: number
        /** Results page you want to retrieve (0..N) */
        page?: number
        paged?: boolean
        pageNumber?: number
        pageSize?: number
        /** Number of records per page. */
        size?: number
        /** Sort column and direction. Multiple sort params allowed. */
        sort?: string
        'sort.sorted'?: boolean
        'sort.unsorted'?: boolean
        unpaged?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfPrimaryIdentifiers']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getAllCustodyKeyDateByPrisonBookingNumberUsingGET: {
    parameters: {
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByPrisonBookingNumberUsingGET: {
    parameters: {
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByPrisonBookingNumberUsingPUT: {
    parameters: {
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested conviction with associated prison booking was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE: {
    parameters: {
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** Key date has been deleted */
      200: unknown
      /** The keyDate is not valid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested prison booking was not found. */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY_EVENTS */
  deleteOffenderUpdateUsingDELETE: {
    parameters: {
      path: {
        /** offenderDeltaId */
        offenderDeltaId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_EVENTS */
      403: unknown
      /** Update not found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY_EVENTS */
  markAsFailedUsingPUT: {
    parameters: {
      path: {
        /** offenderDeltaId */
        offenderDeltaId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_EVENTS */
      403: unknown
      /** Update not found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts filtering to only return active areas */
  getProbationAreaCodesUsingGET: {
    parameters: {
      query: {
        /** Restricts to active areas only */
        active?: boolean
        /** Restricts to areas that are providers, no prisons will be returned */
        excludeEstablishments?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfKeyValue']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a probation area code */
  getLdusForProbationCodeUsingGET: {
    parameters: {
      path: {
        /** Probation area code */
        code: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfKeyValue']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a probation area code and local delivery unit code */
  getTeamsForLduUsingGET: {
    parameters: {
      path: {
        /** Probation area code */
        code: string
        /** Local delivery unit code */
        lduCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfKeyValue']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts filtering to only return active areas */
  getProbationAreasAndLocalDeliveryUnitsUsingGET: {
    parameters: {
      query: {
        /** Restricts to active areas only */
        active?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ProbationAreaWithLocalDeliveryUnits'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getReferenceDataUsingGET: {
    parameters: {
      path: {
        /** The set of reference data */
        set: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ReferenceDataList']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Data set not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint */
  getReferenceDataSetsUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['ReferenceDataSets']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Only used for smoke tests, not production ready */
  resetCustodySmokeTestDataUsingPOST: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: unknown
      /** Either the requested offender was not found or no active custodial sentences were found */
      404: unknown
    }
  }
  /** Only used for smoke tests, not production ready */
  updateOffenderDetailsUsingPOST: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
      body: {
        /** offenderDetails */
        offenderDetails: definitions['UpdateOffenderDetails']
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: unknown
      /** The requested offender was not found */
      404: unknown
    }
  }
  /** staff details for supplied usernames */
  getStaffDetailsList: {
    parameters: {
      body: {
        /** usernames */
        usernames: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffDetails'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Currently, this endpoint is restricted to offender managers and order supervisors. Additional management types (e.g. requirements, reports) may be added later. */
  getCaseloadForStaffUsingGET_1: {
    parameters: {
      path: {
        /** Delius staff/officer code */
        staffCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Caseload']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getCaseloadOffendersForStaffUsingGET_1: {
    parameters: {
      path: {
        /** Delius staff/officer code */
        staffCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedOffenderCrn'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getCaseloadOrdersForStaffUsingGET_1: {
    parameters: {
      path: {
        /** Delius staff/officer code */
        staffCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedEventId'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  /** Accepts a Delius staff officer identifier */
  getStaffDetailsForStaffIdentifierUsingGET: {
    parameters: {
      path: {
        /** Delius officer identifier */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Currently, this endpoint is restricted to offender managers and order supervisors. Additional management types (e.g. requirements, reports) may be added later. */
  getCaseloadForStaffUsingGET: {
    parameters: {
      path: {
        /** Delius staff/officer identifier */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Caseload']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getCaseloadOffendersForStaffUsingGET: {
    parameters: {
      path: {
        /** Delius staff/officer identifier */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedOffenderCrn'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getCaseloadOrdersForStaffUsingGET: {
    parameters: {
      path: {
        /** Delius staff/officer identifier */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedEventId'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  /** Accepts a Delius staff officer identifier */
  getOffendersForResponsibleOfficerIdentifierUsingGET: {
    parameters: {
      query: {
        /** Current only */
        current?: boolean
      }
      path: {
        /** Delius officer identifier of the responsible officer */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedOffender'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a Delius staff username */
  getStaffDetailsForUsernameUsingGET: {
    parameters: {
      path: {
        /** Delius username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a Delius Username. No backward compatibility guaranteed - intended for the use of the Manage a Supervision service, behaviour or responses may be modified in the future. */
  getManageSupervisionsEligibleOffendersUsingGET: {
    parameters: {
      query: {
        offset?: number
        paged?: boolean
        pageNumber?: number
        pageSize?: number
        'sort.sorted'?: boolean
        'sort.unsorted'?: boolean
        unpaged?: boolean
      }
      path: {
        /** Delius username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfStaffCaseloadEntry']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Currently, this endpoint is restricted to offender managers and order supervisors. Additional management types (e.g. requirements, reports) may be added later. */
  getCaseloadForTeamUsingGET: {
    parameters: {
      path: {
        /** teamCode */
        teamCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Caseload']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getCaseloadOffendersForTeamUsingGET: {
    parameters: {
      path: {
        /** teamCode */
        teamCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedOffenderCrn'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getCaseloadOrdersForTeamUsingGET: {
    parameters: {
      path: {
        /** teamCode */
        teamCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedEventId'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  createMissingPrisonOffenderManagerTeamsUsingPOST: {
    responses: {
      /** OK */
      200: {
        schema: definitions['TeamCreationResult']
      }
      /** The custody request is invalid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
    }
  }
  getAllOfficeLocationsUsingGET: {
    parameters: {
      path: {
        /** Team code */
        teamCode: string
      }
    }
    responses: {
      /** All active office locations for the specified team */
      200: {
        schema: definitions['OfficeLocation'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The specified team does not exist or is not active */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  findUserByEmailUsingGET: {
    parameters: {
      path: {
        /** LDAP email address */
        email: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['UserDetails'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_USERS */
      403: unknown
    }
  }
  findUserUsingGET: {
    parameters: {
      path: {
        /** LDAP username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['UserDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires any of ROLE_COMMUNITY_AUTH_INT,ROLE_COMMUNITY_USERS,ROLE_COMMUNITY_USERS_ROLES */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  changePasswordUsingPOST: {
    parameters: {
      body: {
        /** Password Credentials */
        authPassword: definitions['AuthPassword']
      }
      path: {
        /** LDAP username */
        username: string
      }
    }
    responses: {
      /** Password Changed */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_AUTH_INT */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  addRoleUsingPUT: {
    parameters: {
      path: {
        /** Delius Role ID */
        roleId: string
        /** LDAP username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_USERS_ROLES */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
}
