/* eslint-disable camelcase */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
  '/health': {
    get: operations['handleUsingGET']
  }
  '/health/**': {
    get: operations['handleUsingGET_1']
  }
  '/info': {
    get: operations['handleUsingGET_2']
  }
  '/ping': {
    get: operations['handleUsingGET_3']
  }
  '/secure/appointment-types': {
    get: operations['getAllAppointmentTypesUsingGET']
  }
  '/secure/authenticate': {
    post: operations['authenticateUsingPOST']
  }
  '/secure/contact-types': {
    get: operations['getContactTypesUsingGET']
  }
  '/secure/courtAppearances': {
    get: operations['getCourtAppearancesUsingGET']
  }
  '/secure/courts': {
    /** requires ROLE_MAINTAIN_REF_DATA and read scope */
    get: operations['getCourtsUsingGET']
    /** requires ROLE_MAINTAIN_REF_DATA and write scope */
    post: operations['insertCourtUsingPOST']
  }
  '/secure/courts/code/{code}': {
    /** requires ROLE_MAINTAIN_REF_DATA and read scope */
    get: operations['getCourtUsingGET']
    /** requires ROLE_MAINTAIN_REF_DATA and write scope */
    put: operations['updateCourtUsingPUT']
  }
  '/secure/nomisCaseNotes/{nomisId}/{caseNotesId}': {
    put: operations['upsertCaseNotesToDeliusUsingPUT']
  }
  '/secure/offenderDeltaIds': {
    get: operations['getOffenderDeltasUsingGET']
    delete: operations['deleteOffenderDeltasUsingDELETE']
  }
  '/secure/offenders/crn/{crn}': {
    get: operations['getOffenderSummaryByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/all': {
    get: operations['getOffenderDetailByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/allOffenderManagers': {
    /** Accepts an offender CRN in the format A999999 */
    get: operations['getAllOffenderManagersForOffenderbyCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/appointments': {
    get: operations['getOffenderAppointmentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}': {
    get: operations['getOffenderAppointmentByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}/outcome/context/{contextName}': {
    post: operations['updateAppointmentOutcomeWithContextUsingPOST']
  }
  '/secure/offenders/crn/{crn}/appointments/{appointmentId}/reschedule/context/{contextName}': {
    post: operations['rescheduleAppointmentWithContextNameUsingPOST']
  }
  '/secure/offenders/crn/{crn}/assessments': {
    get: operations['getAssessmentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/contact-summary': {
    get: operations['getOffenderContactSummariesByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions': {
    get: operations['getConvictionsForOffenderByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions-with-rar': {
    get: operations['getOffenderConvictionsWithRarByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/active/nsis': {
    get: operations['getNsisForOffenderByCrnAndActiveConvictionsUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}': {
    get: operations['getConvictionForOffenderByCrnAndConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/attendances': {
    get: operations['getAttendancesUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/attendancesFilter': {
    get: operations['getAttendancesByConvictionUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/courtAppearances': {
    get: operations['getOffenderCourtAppearancesByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/courtReports': {
    get: operations['getOffenderCourtReportsByCrnAndConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/licenceConditions': {
    get: operations['getLicenceConditionsByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/nsis': {
    get: operations['getNsiForOffenderByCrnAndConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/nsis/{nsiId}': {
    get: operations['getNsiByNsiIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/pssRequirements': {
    get: operations['getPssRequirementsByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/requirements': {
    get: operations['getRequirementsByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/convictions/{convictionId}/sentenceStatus': {
    get: operations['getSentenceStatusByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/courtReports/{courtReportId}': {
    get: operations['getOffenderCourtReportByCrnAndCourtReportIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/custody/convictionId/{convictionId}': {
    get: operations['getCustodyByConvictionIdUsingGET']
  }
  '/secure/offenders/crn/{crn}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByCrnUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByCrnUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByCrnUsingDELETE']
  }
  '/secure/offenders/crn/{crn}/documents/grouped': {
    get: operations['getOffenderDocumentsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/documents/{documentId}': {
    get: operations['getOffenderDocumentByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/identifiers': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderIdentifiersByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/nomsNumber': {
    put: operations['updateOffenderNomsNumberUsingPUT']
  }
  '/secure/offenders/crn/{crn}/personalCircumstances': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderPersonalCircumstancesByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/personalContacts': {
    get: operations['getAllOffenderPersonalContactsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/probationStatus': {
    get: operations['getOffenderProbationStatusByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/referral/end/context/{context}': {
    post: operations['endReferralContextLessUsingPOST']
  }
  '/secure/offenders/crn/{crn}/referral/start/context/{context}': {
    post: operations['startReferralContextLessUsingPOST']
  }
  '/secure/offenders/crn/{crn}/registrations': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/release': {
    /** Accepts an offender CRN in the format A999999 */
    get: operations['getLatestRecallAndReleaseForOffenderByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/risk/mappa': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderMappaDetailsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/risk/resourcing/latest': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderResourcingDetailsByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/sentence/{sentenceId}/appointments': {
    post: operations['createAppointmentUsingPOST']
  }
  '/secure/offenders/crn/{crn}/sentence/{sentenceId}/appointments/context/{contextName}': {
    post: operations['createAppointmentWithContextNameUsingPOST']
  }
  '/secure/offenders/crn/{crn}/sentences/{sentenceId}/notifications/context/{contextName}': {
    post: operations['notifyWithContextNameUsingPOST']
  }
  '/secure/offenders/crn/{crn}/tier/{tier}': {
    post: operations['updateTierUsingPOST']
  }
  '/secure/offenders/crn/{crn}/user/{username}/userAccess': {
    get: operations['checkUserAccessByCrnUsingGET']
  }
  '/secure/offenders/crn/{crn}/userAccess': {
    get: operations['checkUserAccessByCrnUsingGET_1']
  }
  '/secure/offenders/nextUpdate': {
    /** requires ROLE_COMMUNITY_EVENTS */
    get: operations['getAndLockNextOffenderUpdateUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}': {
    get: operations['getOffenderDetailsUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/all': {
    get: operations['getOffenderDetailByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/allOffenderManagers': {
    /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
    get: operations['getAllOffenderManagersForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/bookingNumber/{bookingNumber}/custody/keyDates': {
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    post: operations['replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/contacts': {
    get: operations['getOffenderContactReportByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/convictions': {
    get: operations['getConvictionsForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/convictions/active/nsis/recall': {
    get: operations['getRecallNsisForOffenderByNomsNumberAndActiveConvictionsUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber': {
    put: operations['updateCustodyBookingNumberUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/bookingNumber/{bookingNumber}': {
    get: operations['getCustodyByBookNumberUsingGET']
    put: operations['updateCustodyUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByNomsNumberUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByNomsNumberUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByNomsNumberUsingDELETE']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/documents/grouped': {
    /** <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
    get: operations['getOffenderDocumentsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/documents/{documentId}': {
    get: operations['getOffenderDocumentUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/identifiers': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderIdentifiersByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/personalCircumstances': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderPersonalCircumstancesByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/prisonOffenderManager': {
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['allocatePrisonOffenderManagerByNomsNumberUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deallocatePrisonOffenderManagerByNomsNumberUsingDELETE']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/recalled': {
    put: operations['offenderRecalledUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/registrations': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/release': {
    /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
    get: operations['getLatestRecallAndReleaseForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/released': {
    put: operations['offenderReleasedUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/responsibleOfficer/switch': {
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['switchResponsibleOfficerUsingPUT']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/responsibleOfficers': {
    /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
    get: operations['getResponsibleOfficersForOffenderUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/risk/mappa': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderMappaDetailsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{nomsNumber}/risk/resourcing/latest': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderResourcingDetailsByNomsNumberUsingGET']
  }
  '/secure/offenders/nomsNumber/{originalNomsNumber}/nomsNumber': {
    /** In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned. */
    put: operations['replaceOffenderNomsNumberUsingPUT']
  }
  '/secure/offenders/offenderId/{offenderId}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByOffenderIdUsingGET']
  }
  '/secure/offenders/offenderId/{offenderId}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByOffenderIdUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByOffenderIdUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByOffenderIdUsingDELETE']
  }
  '/secure/offenders/offenderId/{offenderId}/identifiers': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderIdentifiersByOffenderIdUsingGET']
  }
  '/secure/offenders/offenderId/{offenderId}/personalCircumstances': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderPersonalCircumstancesByOffenderIdUsingGET']
  }
  '/secure/offenders/offenderId/{offenderId}/registrations': {
    /** requires ROLE_COMMUNITY */
    get: operations['getOffenderRegistrationsByOffenderIdUsingGET']
  }
  '/secure/offenders/primaryIdentifiers': {
    get: operations['getOffenderIdsUsingGET']
  }
  '/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates': {
    get: operations['getAllCustodyKeyDateByPrisonBookingNumberUsingGET']
  }
  '/secure/offenders/prisonBookingNumber/{prisonBookingNumber}/custody/keyDates/{typeCode}': {
    get: operations['getCustodyKeyDateByPrisonBookingNumberUsingGET']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    put: operations['putCustodyKeyDateByPrisonBookingNumberUsingPUT']
    /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
    delete: operations['deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE']
  }
  '/secure/offenders/update/{offenderDeltaId}': {
    /** requires ROLE_COMMUNITY_EVENTS */
    delete: operations['deleteOffenderUpdateUsingDELETE']
  }
  '/secure/offenders/update/{offenderDeltaId}/markAsFailed': {
    /** requires ROLE_COMMUNITY_EVENTS */
    put: operations['markAsFailedUsingPUT']
  }
  '/secure/probationAreas': {
    /** Accepts filtering to only return active areas */
    get: operations['getProbationAreaCodesUsingGET']
  }
  '/secure/probationAreas/code/{code}/localDeliveryUnits': {
    /** Accepts a probation area code */
    get: operations['getLdusForProbationCodeUsingGET']
  }
  '/secure/probationAreas/code/{code}/localDeliveryUnits/code/{lduCode}/teams': {
    /** Accepts a probation area code and local delivery unit code */
    get: operations['getTeamsForLduUsingGET']
  }
  '/secure/probationAreas/localDeliveryUnits': {
    /** Accepts filtering to only return active areas */
    get: operations['getProbationAreasAndLocalDeliveryUnitsUsingGET']
  }
  '/secure/referenceData/set/{set}': {
    get: operations['getReferenceDataUsingGET']
  }
  '/secure/referenceData/sets': {
    /** It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint */
    get: operations['getReferenceDataSetsUsingGET']
  }
  '/secure/smoketest/offenders/crn/{crn}/custody/reset': {
    /** Only used for smoke tests, not production ready */
    post: operations['resetCustodySmokeTestDataUsingPOST']
  }
  '/secure/smoketest/offenders/crn/{crn}/details': {
    /** Only used for smoke tests, not production ready */
    post: operations['updateOffenderDetailsUsingPOST']
  }
  '/secure/staff/list': {
    /** staff details for supplied usernames */
    post: operations['getStaffDetailsList']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}': {
    /** Accepts a Delius staff officer identifier */
    get: operations['getStaffDetailsForStaffIdentifierUsingGET']
  }
  '/secure/staff/staffIdentifier/{staffIdentifier}/managedOffenders': {
    /** Accepts a Delius staff officer identifier */
    get: operations['getOffendersForResponsibleOfficerIdentifierUsingGET']
  }
  '/secure/staff/username/{username}': {
    /** Accepts a Delius staff username */
    get: operations['getStaffDetailsForUsernameUsingGET']
  }
  '/secure/teams/prisonOffenderManagers/create': {
    post: operations['createMissingPrisonOffenderManagerTeamsUsingPOST']
  }
  '/secure/teams/{teamCode}/office-locations': {
    get: operations['getAllOfficeLocationsUsingGET']
  }
  '/secure/users/search/email/{email}/details': {
    get: operations['findUserByEmailUsingGET']
  }
  '/secure/users/{username}/details': {
    get: operations['findUserUsingGET']
  }
  '/secure/users/{username}/password': {
    post: operations['changePasswordUsingPOST']
  }
  '/secure/users/{username}/roles/{roleId}': {
    put: operations['addRoleUsingPUT']
  }
}

export interface definitions {
  AccessLimitation: {
    exclusionMessage?: string
    restrictionMessage?: string
    userExcluded: boolean
    userRestricted: boolean
  }
  /**
   * Additional Identifier.
   * Current active values for the type are
   *  LIFN  Lifer Number
   * OTHR  Other Personal Identifier
   * SPNC  Scottish/Old PNC Number
   * NPNC  Verified No PNC Date
   * VISO  ViSOR Number
   * PCRN  Other Previous CRN
   * IMMN  Immigration Number
   * YCRN  YOT Identifier/CRN
   * APNC  Additional PNC
   * URN  CPS Unique Reference Number
   * AI02  Previous Prison Number
   * DOFF  Duplicate Offender CRN
   * NINO  National Insurance Number
   * DNOMS  Duplicate NOMIS Number
   * Full list can be found calling '/secure/referenceData/set/ADDITIONAL IDENTIFIER TYPE'
   */
  AdditionalIdentifier: {
    /** unique id of identifier */
    additionalIdentifierId?: number
    /** identifier name and description */
    type?: definitions['KeyValue']
    /** value of identifier */
    value?: string
  }
  AdditionalSentence: {
    additionalSentenceId?: number
    amount?: number
    length?: number
    notes?: string
    type?: definitions['KeyValue']
  }
  Address: {
    addressNumber?: string
    buildingName?: string
    county?: string
    createdDatetime?: string
    district?: string
    from: string
    lastUpdatedDatetime?: string
    latestAssessmentDate?: string
    noFixedAbode?: boolean
    notes?: string
    postcode?: string
    status?: definitions['KeyValue']
    streetName?: string
    telephoneNumber?: string
    to?: string
    town?: string
    type?: definitions['KeyValue']
    typeVerified?: boolean
  }
  AddressSummary: {
    addressNumber?: string
    buildingName?: string
    county?: string
    district?: string
    postcode?: string
    streetName?: string
    telephoneNumber?: string
    town?: string
  }
  AllTeam: {
    borough?: definitions['KeyValue']
    code?: string
    description?: string
    district?: definitions['KeyValue']
    externalProvider?: definitions['KeyValue']
    isPrivate?: boolean
    localDeliveryUnit?: definitions['KeyValue']
    name?: string
    providerTeamId: number
    scProvider?: definitions['KeyValue']
    teamId: number
  }
  AppointmentCreateRequest: {
    appointmentEnd: string
    appointmentStart: string
    contactType: string
    notes: string
    nsiId?: number
    officeLocationCode: string
    providerCode: string
    rarActivity?: boolean
    requirementId?: number
    sensitive?: boolean
    staffCode: string
    teamCode: string
  }
  AppointmentCreateResponse: {
    appointmentEnd: string
    appointmentId: number
    appointmentStart: string
    sensitive?: boolean
    type: string
    typeDescription: string
  }
  AppointmentDetail: {
    appointmentEnd?: string
    appointmentId?: number
    appointmentStart?: string
    notes?: string
    officeLocation: definitions['OfficeLocation']
    outcome?: definitions['AppointmentOutcome']
    provider?: definitions['KeyValue']
    rarActivity?: boolean
    requirement?: definitions['AppointmentRequirementDetail']
    sensitive?: boolean
    staff?: definitions['StaffHuman']
    team?: definitions['KeyValue']
    type: definitions['AppointmentType']
  }
  AppointmentOutcome: {
    attended?: boolean
    code?: string
    complied?: boolean
    description?: string
    hoursCredited?: number
  }
  AppointmentRequirementDetail: {
    isActive?: boolean
    isRar?: boolean
    requirementId?: number
  }
  AppointmentRescheduleResponse: {
    appointmentId: number
  }
  AppointmentType: {
    contactType?: string
    description?: string
    orderTypes?: ('CJA' | 'LEGACY')[]
    requiresLocation?: 'NOT_REQUIRED' | 'OPTIONAL' | 'REQUIRED'
  }
  AppointmentUpdateResponse: {
    appointmentId: number
  }
  Appointments: {
    /** Number of appointments recorded to date as not attended and compliant - i.e. with an acceptable reason for absence */
    acceptableAbsences?: number
    /** Number of appointments recorded to date as attended */
    attended?: number
    /** Number of appointments to date where no attendance or compliance information has been recorded */
    noOutcomeRecorded?: number
    /** Total number of appointments to date */
    total?: number
    /** Number of appointments recorded to date as not attended and uncompliant - i.e. without an acceptable reason for absence */
    unacceptableAbsences?: number
  }
  Attendance: {
    attendanceDate: string
    attended: boolean
    complied: boolean
    contactId: number
    contactType?: definitions['ContactTypeDetail']
    outcome?: string
  }
  /** Attendance Wrapper */
  Attendances: {
    /** List of Attendances */
    attendances?: definitions['Attendance'][]
  }
  /** Password Credentials */
  AuthPassword: {
    /** LDAP password */
    password: string
  }
  /** Authentication Details */
  AuthUser: {
    /** LDAP password */
    password: string
    /** LDAP username */
    username: string
  }
  CommunityOrPrisonOffenderManager: {
    /** Date since the offender manager was assigned */
    fromDate?: string
    /** True if this offender manager is the prison OM else False */
    isPrisonOffenderManager?: boolean
    /** True if this offender manager is the current responsible officer */
    isResponsibleOfficer?: boolean
    /** True if no real offender manager has been allocated and this is just a placeholder */
    isUnallocated?: boolean
    /** Probation area / prison institution for this OM */
    probationArea?: definitions['ProbationArea']
    /** staff name and contact details */
    staff?: definitions['ContactableHuman']
    /** Staff code */
    staffCode?: string
    /** Staff id */
    staffId?: number
    /** Team details for this offender manager */
    team?: definitions['Team']
  }
  Contact: {
    alertActive?: boolean
    attended?: boolean
    complied?: boolean
    contactEndTime?: { [key: string]: unknown }
    contactId: number
    contactOutcomeType?: definitions['KeyValue']
    contactStartTime?: { [key: string]: unknown }
    contactType: definitions['ContactType']
    createdDateTime?: string
    documentLinked?: boolean
    eventId?: number
    explanation?: definitions['KeyValue']
    hoursCredited?: number
    lastUpdatedDateTime?: string
    licenceCondition?: definitions['LicenceCondition']
    linkedContactId?: number
    notes?: string
    nsi?: definitions['Nsi']
    partitionArea?: string
    probationArea?: definitions['KeyValue']
    providerEmployee?: definitions['Human']
    providerLocation?: definitions['KeyValue']
    providerTeam?: definitions['KeyValue']
    requirement?: definitions['Requirement']
    softDeleted?: boolean
    staff?: definitions['StaffHuman']
    team?: definitions['KeyValue']
    uploadLinked?: boolean
    visorContact?: boolean
  }
  ContactDetails: {
    addresses?: definitions['Address'][]
    allowSMS?: boolean
    emailAddresses?: string[]
    phoneNumbers?: definitions['PhoneNumber'][]
  }
  ContactDetailsSummary: {
    allowSMS?: boolean
    emailAddresses?: string[]
    phoneNumbers?: definitions['PhoneNumber'][]
  }
  ContactSummary: {
    contactEnd?: string
    contactId: number
    contactStart?: string
    notes?: string
    officeLocation?: definitions['OfficeLocation']
    outcome?: definitions['AppointmentOutcome']
    provider: definitions['KeyValue']
    rarActivity?: boolean
    sensitive?: boolean
    staff: definitions['StaffHuman']
    team: definitions['KeyValue']
    type: definitions['ContactType']
  }
  ContactType: {
    appointment?: boolean
    code: string
    description: string
    shortDescription?: string
  }
  ContactTypeDetail: {
    code: string
    description: string
  }
  ContactableHuman: {
    /** Email address */
    email?: string
    /** Given names */
    forenames?: string
    /** Phone number */
    phoneNumber?: string
    /** Family name */
    surname?: string
  }
  ContextlessAppointmentCreateRequest: {
    appointmentEnd: string
    appointmentStart: string
    contractType: string
    countsTowardsRarDays: boolean
    notes: string
    officeLocationCode?: string
    referralId?: string
    referralStart: string
  }
  ContextlessAppointmentOutcomeRequest: {
    attended: string
    notes: string
    notifyPPOfAttendanceBehaviour: boolean
  }
  ContextlessAppointmentRescheduleRequest: {
    initiatedByServiceProvider: boolean
    officeLocationCode?: string
    updatedAppointmentEnd: string
    updatedAppointmentStart: string
  }
  ContextlessNotificationCreateRequest: {
    contactDateTime: string
    contractType: string
    notes: string
    referralId?: string
    referralStart: string
  }
  ContextlessReferralEndRequest: {
    /** Denotes a group of services delivered through a referral to a service user, e.g. Personal Well Being */
    contractType: string
    endType: string
    endedAt: string
    notes: string
    referralId?: string
    sentenceId: number
    startedAt: string
  }
  ContextlessReferralStartRequest: {
    /** Denotes a group of services delivered through a referral to a service user, e.g. Personal Well Being */
    contractType: string
    notes: string
    referralId?: string
    sentenceId: number
    startedAt: string
  }
  Conviction: {
    active?: boolean
    awaitingPsr?: boolean
    convictionDate?: string
    convictionId?: number
    courtAppearance?: definitions['CourtAppearanceBasic']
    custody?: definitions['Custody']
    inBreach?: boolean
    index?: string
    latestCourtAppearanceOutcome?: definitions['KeyValue']
    offences?: definitions['Offence'][]
    referralDate?: string
    responsibleCourt?: definitions['Court']
    sentence?: definitions['Sentence']
  }
  ConvictionDocuments: {
    convictionId?: string
    documents?: definitions['OffenderDocumentDetail'][]
  }
  ConvictionRequirements: {
    /** List of requirements associated with this conviction */
    requirements?: definitions['Requirement'][]
  }
  Court: {
    buildingName?: string
    code?: string
    country?: string
    county?: string
    courtId?: number
    courtName?: string
    courtType?: definitions['KeyValue']
    courtTypeId?: number
    createdDatetime?: string
    fax?: string
    lastUpdatedDatetime?: string
    locality?: string
    postcode?: string
    probationArea?: definitions['KeyValue']
    probationAreaId?: number
    secureEmailAddress?: string
    selectable?: boolean
    street?: string
    telephoneNumber?: string
    town?: string
  }
  CourtAppearanceBasic: {
    appearanceDate?: string
    appearanceType?: definitions['KeyValue']
    courtAppearanceId?: number
    courtCode?: string
    courtName?: string
    crn?: string
  }
  /** Court appearance list Wrapper */
  CourtAppearanceBasicWrapper: {
    /** List of court appearances */
    courtAppearances?: definitions['CourtAppearanceBasic'][]
  }
  CourtAppearanceMinimal: {
    appearanceDate?: string
    appearanceType?: definitions['KeyValue']
    courtAppearanceId?: number
    courtCode?: string
    courtName?: string
    offenderId?: number
  }
  /** Court appearance list Wrapper */
  CourtAppearanceMinimalWrapper: {
    /** List of court appearances */
    courtAppearances?: definitions['CourtAppearanceMinimal'][]
  }
  CourtReportMinimal: {
    allocationDate?: string
    completedDate?: string
    courtReportId?: number
    courtReportType?: definitions['KeyValue']
    offenderId?: number
    receivedByCourtDate?: string
    reportManagers?: definitions['ReportManager'][]
    requestedDate?: string
    requiredDate?: string
    sentToCourtDate?: string
  }
  CreateCustodyKeyDate: {
    date?: string
  }
  /** Request body for assigning an offender manager to an offender. Must pass exactly one of officer / officerCode (not both) */
  CreatePrisonOffenderManager: {
    /** Prison institution code in NOMIS */
    nomsPrisonInstitutionCode: string
    /** Name and contact details of offender manager. If passed then must contain both forename(s) and surname */
    officer?: definitions['ContactableHuman']
    /** Officer staff ID. If not present officer will be used to lookup staff member */
    staffId?: number
  }
  Custody: {
    /** Human readable id of the prison booking, AKA book number */
    bookingNumber?: string
    /** Institution where the offender currently resides */
    institution?: definitions['Institution']
    /** Key sentence dates of particular interest to custody */
    keyDates?: definitions['CustodyRelatedKeyDates']
    /** Date when related sentence started */
    sentenceStartDate?: string
    /** Custodial status */
    status?: definitions['KeyValue']
  }
  CustodyKeyDate: {
    date?: string
    type?: definitions['KeyValue']
  }
  /** Key sentence dates that are related to their time in custody */
  CustodyRelatedKeyDates: {
    /** Conditional release date */
    conditionalReleaseDate?: string
    /** Expected actual handover date from prison offender manager to community offender manager */
    expectedPrisonOffenderManagerHandoverDate?: string
    /** Expected start date of the handover process from prison offender manager to community offender manager */
    expectedPrisonOffenderManagerHandoverStartDate?: string
    /** Expected release date */
    expectedReleaseDate?: string
    /** Home detention curfew eligibility date */
    hdcEligibilityDate?: string
    /** Licence expiry date */
    licenceExpiryDate?: string
    /** Parole eligibility date */
    paroleEligibilityDate?: string
    /** Post sentence Supervision end date. AKA Top-up supervision end date */
    postSentenceSupervisionEndDate?: string
    /** Sentence expiry date */
    sentenceExpiryDate?: string
  }
  Disability: {
    disabilityId?: number
    disabilityType?: definitions['KeyValue']
    endDate?: string
    notes?: string
    provisions?: definitions['Provision'][]
    startDate?: string
  }
  ErrorResponse: {
    /** Reason for error */
    developerMessage?: string
    /** Http status code */
    status: number
  }
  Human: {
    /** Given names */
    forenames?: string
    /** Family name */
    surname?: string
  }
  IDs: {
    /** case reference number */
    crn: string
    /** Number from the crime records office */
    croNumber?: string
    /** Immigration number */
    immigrationNumber?: string
    /** Book number of latest booking from NOMIS */
    mostRecentPrisonerNumber?: string
    /** National insurance number from HMRC */
    niNumber?: string
    /** Offender number from NOMIS */
    nomsNumber?: string
    /** Number from the police national computer */
    pncNumber?: string
  }
  InputStream: { [key: string]: unknown }
  Institution: {
    code?: string
    description?: string
    establishmentType?: definitions['KeyValue']
    institutionId: number
    institutionName?: string
    isEstablishment?: boolean
    isPrivate?: boolean
    /** Prison institution code in NOMIS */
    nomsPrisonInstitutionCode?: string
  }
  KeyValue: {
    code?: string
    description?: string
  }
  LicenceCondition: {
    active?: boolean
    commencementDate?: string
    commencementNotes?: string
    createdDateTime?: string
    licenceConditionNotes?: string
    licenceConditionTypeMainCat?: definitions['KeyValue']
    licenceConditionTypeSubCat?: definitions['KeyValue']
    startDate?: string
    terminationDate?: string
    terminationNotes?: string
  }
  LicenceConditions: {
    /** List of licenceConditions associated with this conviction */
    licenceConditions?: definitions['LicenceCondition'][]
  }
  LocalDeliveryUnit: {
    /** LDU code */
    code?: string
    /** description */
    description?: string
    localDeliveryUnitId: number
  }
  LocalTime: {
    hour?: number
    minute?: number
    nano?: number
    second?: number
  }
  ManagedOffender: {
    crnNumber: string
    currentOm?: boolean
    currentPom?: boolean
    currentRo?: boolean
    nomsNumber: string
    offenderId: number
    offenderSurname: string
    omEndDate: string
    omStartDate: string
    staffCode: string
    staffIdentifier: number
  }
  /** MAPPA Details */
  MappaDetails: {
    /** MAPPA Category (0 = unknown) */
    category?: 0 | 1 | 2 | 3
    /** MAPPA Category Description */
    categoryDescription?: string
    /** MAPPA Level (0=unknown) */
    level?: 0 | 1 | 2 | 3
    /** MAPPA Level Description */
    levelDescription?: string
    /** Notes */
    notes?: string
    /** Officer */
    officer?: definitions['StaffHuman']
    /** Probation area */
    probationArea?: definitions['KeyValue']
    /** Next review date */
    reviewDate?: string
    /** Start date */
    startDate?: string
    /** Team */
    team?: definitions['KeyValue']
  }
  /** Court details for a new court */
  NewCourtDto: {
    /** true when this court is open */
    active?: boolean
    buildingName?: string
    /** unique code for this court */
    code?: string
    country?: string
    county?: string
    courtName: string
    /** type code from standard reference data */
    courtTypeCode?: string
    fax?: string
    locality?: string
    postcode?: string
    /** probation area code from probation areas */
    probationAreaCode?: string
    street?: string
    telephoneNumber?: string
    town?: string
  }
  NotificationResponse: {
    contactId: number
  }
  Nsi: {
    active?: boolean
    actualStartDate?: string
    expectedStartDate?: string
    intendedProvider?: definitions['ProbationArea']
    length?: number
    lengthUnit?: string
    notes?: string
    nsiId?: number
    nsiManagers?: definitions['NsiManager'][]
    nsiOutcome?: definitions['KeyValue']
    nsiStatus?: definitions['KeyValue']
    nsiSubType?: definitions['KeyValue']
    nsiType?: definitions['KeyValue']
    /** present only for recalls, convenience property indicating this resulted in a recall */
    outcomeRecall?: boolean
    /** present only for recalls, convenience property indicating the recall was never accepted */
    recallRejectedOrWithdrawn?: boolean
    referralDate?: string
    requirement?: definitions['Requirement']
    statusDateTime?: string
  }
  NsiManager: {
    endDate?: string
    probationArea?: definitions['ProbationArea']
    staff?: definitions['StaffDetails']
    startDate?: string
    team?: definitions['Team']
  }
  /** NSI Wrapper */
  NsiWrapper: {
    /** List of NSIs */
    nsis?: definitions['Nsi'][]
  }
  Offence: {
    createdDatetime?: string
    detail?: definitions['OffenceDetail']
    lastUpdatedDatetime?: string
    mainOffence?: boolean
    offenceCount?: number
    offenceDate?: string
    offenceId?: string
    offenderId?: number
    tics?: number
    verdict?: string
  }
  OffenceDetail: {
    abbreviation?: string
    cjitCode?: string
    code?: string
    description?: string
    form20Code?: string
    mainCategoryAbbreviation?: string
    mainCategoryCode?: string
    mainCategoryDescription?: string
    ogrsOffenceCategory?: string
    subCategoryAbbreviation?: string
    subCategoryCode?: string
    subCategoryDescription?: string
  }
  OffenderAlias: {
    dateOfBirth?: string
    firstName?: string
    gender?: string
    id?: string
    middleNames?: string[]
    surname?: string
  }
  OffenderAssessments: {
    /** Offender Group Reconviction Scale */
    ogrsScore?: number
    /** Risk of Serious Recidivism */
    rsrScore?: number
  }
  OffenderDelta: {
    /** Type of delta */
    action?: 'DELETE' | 'UPSERT'
    /** The datetime the change occurred */
    dateChanged?: string
    /** Offender ID */
    offenderId?: number
  }
  OffenderDetail: {
    /** identifies if this person is on an active sentence of interest to probation */
    activeProbationManagedSentence?: boolean
    contactDetails?: definitions['ContactDetails']
    /** deprecated, use activeProbationManagedSentence */
    currentDisposal?: string
    /** When true this record can not be viewed by specific probation staff */
    currentExclusion?: boolean
    /** When true this record can only be viewed by specific probation staff */
    currentRestriction?: boolean
    /** current tier */
    currentTier?: string
    dateOfBirth?: string
    /** Message to show staff who have been excluded from viewing this record */
    exclusionMessage?: string
    firstName?: string
    gender?: string
    middleNames?: string[]
    offenderAliases?: definitions['OffenderAlias'][]
    offenderId: number
    offenderManagers?: definitions['OffenderManager'][]
    offenderProfile?: definitions['OffenderProfile']
    otherIds?: definitions['IDs']
    partitionArea?: string
    preferredName?: string
    previousSurname?: string
    /** Message to show staff who have not been included to view this record */
    restrictionMessage?: string
    /** When true this record has been deleted */
    softDeleted?: boolean
    surname?: string
    title?: string
  }
  OffenderDetailSummary: {
    /** identifies if this person is on an active sentence of interest to probation */
    activeProbationManagedSentence?: boolean
    contactDetails?: definitions['ContactDetailsSummary']
    /** deprecated, use activeProbationManagedSentence */
    currentDisposal?: string
    /** When true this record can not be viewed by specific probation staff */
    currentExclusion?: boolean
    /** When true this record can only be viewed by specific probation staff */
    currentRestriction?: boolean
    dateOfBirth?: string
    firstName?: string
    gender?: string
    middleNames?: string[]
    offenderId: number
    offenderProfile?: definitions['OffenderProfile']
    otherIds?: definitions['IDs']
    partitionArea?: string
    preferredName?: string
    previousSurname?: string
    /** When true this record has been deleted */
    softDeleted?: boolean
    surname?: string
    title?: string
  }
  OffenderDocumentDetail: {
    author?: string
    createdAt?: string
    documentName?: string
    extendedDescription?: string
    id?: string
    lastModifiedAt?: string
    parentPrimaryKeyId?: number
    reportDocumentDates?: definitions['ReportDocumentDates']
    subType?: definitions['KeyValue']
    type?: definitions['KeyValue']
  }
  OffenderDocuments: {
    convictions?: definitions['ConvictionDocuments'][]
    documents?: definitions['OffenderDocumentDetail'][]
  }
  /** Offender Identifiers */
  OffenderIdentifiers: {
    /** Additional identifiers */
    additionalIdentifiers?: definitions['AdditionalIdentifier'][]
    /** unique identifier for this offender */
    offenderId?: number
    /** Primary identifiers */
    primaryIdentifiers?: definitions['IDs']
  }
  OffenderLanguages: {
    languageConcerns?: string
    otherLanguages?: string[]
    primaryLanguage?: string
    requiresInterpreter?: boolean
  }
  OffenderLatestRecall: {
    /** Last recall */
    lastRecall?: definitions['OffenderRecall']
    /** Last release */
    lastRelease?: definitions['OffenderRelease']
  }
  OffenderManager: {
    active?: boolean
    allocationReason?: definitions['KeyValue']
    fromDate?: string
    partitionArea?: string
    probationArea?: definitions['ProbationArea']
    providerEmployee?: definitions['Human']
    softDeleted?: boolean
    staff?: definitions['StaffHuman']
    team?: definitions['Team']
    toDate?: string
    trustOfficer?: definitions['Human']
  }
  OffenderProfile: {
    disabilities?: definitions['Disability'][]
    ethnicity?: string
    genderIdentity?: string
    immigrationStatus?: string
    nationality?: string
    notes?: string
    offenderDetails?: string
    offenderLanguages?: definitions['OffenderLanguages']
    previousConviction?: definitions['PreviousConviction']
    religion?: string
    remandStatus?: string
    riskColour?: string
    secondaryNationality?: string
    selfDescribedGender?: string
    sexualOrientation?: string
  }
  OffenderRecall: {
    /** The date the recall occurred */
    date?: string
    /** Some notes */
    notes?: string
    /** The reason for the recall */
    reason?: definitions['KeyValue']
  }
  OffenderRecalledNotification: {
    /** The Prison institution code in NOMIS the offender was recalled to */
    nomsPrisonInstitutionCode: string
    /** The date the offender was returned to custody */
    recallDate: string
  }
  OffenderRelease: {
    /** The date the release occurred */
    date?: string
    /** The institution the offender was released from */
    institution?: definitions['Institution']
    /** Some notes */
    notes?: string
    /** The reason for the release */
    reason?: definitions['KeyValue']
  }
  OffenderReleasedNotification: {
    /** The Prison institution code in NOMIS the offender was released from */
    nomsPrisonInstitutionCode: string
    /** The date the offender was released from custody */
    releaseDate?: string
  }
  OffenderUpdate: {
    /** Type of delta */
    action?: 'DELETE' | 'UPSERT'
    /** The datetime the change occurred */
    dateChanged?: string
    /** A previously failed update */
    failedUpdate?: boolean
    /** Offender Delta ID */
    offenderDeltaId?: number
    /** Offender ID */
    offenderId?: number
    /** Record number from source table */
    sourceRecordId?: number
    /** Source table */
    sourceTable?: string
    /** Status */
    status?: string
  }
  OfficeLocation: {
    buildingName?: string
    buildingNumber?: string
    code?: string
    county?: string
    description?: string
    postcode?: string
    streetName?: string
    townCity?: string
  }
  PageOfContactSummary: {
    content?: definitions['ContactSummary'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: definitions['Pageable']
    size?: number
    sort?: definitions['Sort']
    totalElements?: number
    totalPages?: number
  }
  PageOfKeyValue: {
    content?: definitions['KeyValue'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: definitions['Pageable']
    size?: number
    sort?: definitions['Sort']
    totalElements?: number
    totalPages?: number
  }
  PageOfPrimaryIdentifiers: {
    content?: definitions['PrimaryIdentifiers'][]
    empty?: boolean
    first?: boolean
    last?: boolean
    number?: number
    numberOfElements?: number
    pageable?: definitions['Pageable']
    size?: number
    sort?: definitions['Sort']
    totalElements?: number
    totalPages?: number
  }
  Pageable: {
    offset?: number
    pageNumber?: number
    pageSize?: number
    paged?: boolean
    sort?: definitions['Sort']
    unpaged?: boolean
  }
  PersonalCircumstance: {
    createdDatetime?: string
    /** When the offender ended this circumstance */
    endDate?: string
    /** true if evidence was supplied for this circumstance */
    evidenced?: boolean
    lastUpdatedDatetime?: string
    /** Additional notes */
    notes?: string
    /** Unique id of this offender */
    offenderId?: number
    /** Unique id of this personal circumstance */
    personalCircumstanceId?: number
    /** The type of sub personal circumstance */
    personalCircumstanceSubType?: definitions['KeyValue']
    /** The type of personal circumstance */
    personalCircumstanceType?: definitions['KeyValue']
    /** The probation area that added this circumstance */
    probationArea?: definitions['KeyValue']
    /** When the offender started this circumstance */
    startDate?: string
  }
  /** Personal circumstances Wrapper */
  PersonalCircumstances: {
    /** List of personal circumstances */
    personalCircumstances?: definitions['PersonalCircumstance'][]
  }
  PersonalContact: {
    address?: definitions['AddressSummary']
    createdDatetime?: string
    emailAddress?: string
    endDate?: string
    firstName?: string
    gender?: string
    lastUpdatedDatetime?: string
    mobileNumber?: string
    notes?: string
    otherNames?: string
    personalContactId?: number
    previousSurname?: string
    relationship?: string
    relationshipType?: definitions['KeyValue']
    startDate?: string
    surname?: string
    title?: string
  }
  PhoneNumber: {
    number?: string
    type?: 'MOBILE' | 'TELEPHONE'
  }
  PreviousConviction: {
    convictionDate?: string
    detail?: { [key: string]: string }
  }
  /** Offender primary identifiers */
  PrimaryIdentifiers: {
    /** case reference number */
    crn: string
    /** unique identifier for this offender */
    offenderId?: number
  }
  ProbationArea: {
    /** area code */
    code?: string
    /** description */
    description?: string
    institution?: definitions['Institution']
    /** True if NPS else CRC */
    nps?: boolean
    organisation?: definitions['KeyValue']
    probationAreaId: number
    teams?: definitions['AllTeam'][]
  }
  ProbationAreaWithLocalDeliveryUnits: {
    /** area code */
    code?: string
    /** description */
    description?: string
    localDeliveryUnits?: definitions['LocalDeliveryUnit'][]
  }
  ProbationStatusDetail: {
    /** True if the offender has a event with no sentence which has been adjourned for a pre-sentence report */
    awaitingPsr?: boolean
    /** True if the offender is in breach of a current sentence */
    inBreach?: boolean
    /** True if the offender has a conviction with no sentence */
    preSentenceActivity?: boolean
    /** The termination date of the most recently terminated sentence */
    previouslyKnownTerminationDate?: string
    status?: 'CURRENT' | 'NOT_SENTENCED' | 'PREVIOUSLY_KNOWN'
  }
  Provision: {
    finishDate?: string
    notes?: string
    provisionId?: number
    provisionType?: definitions['KeyValue']
    startDate?: string
  }
  PssRequirement: {
    /** Is the requirement currently active */
    active?: boolean
    subType?: definitions['KeyValue']
    type?: definitions['KeyValue']
  }
  PssRequirements: {
    /** List of pssRequirements associated with this conviction */
    pssRequirements?: definitions['PssRequirement'][]
  }
  ReferenceData: {
    /** true if this item is currently selectable in Delius */
    active?: boolean
    /** code of reference data */
    code?: string
    /** description of reference data */
    description?: string
  }
  /** Reference data list */
  ReferenceDataList: {
    /** List of reference data items */
    referenceData?: definitions['ReferenceData'][]
  }
  /** Reference data sets */
  ReferenceDataSets: {
    /**
     * List of reference data sets, for example
     * {
     *             'code': 'ADDITIONAL SENTENCE',
     *             'description': 'Additional Sentence'
     *         }
     */
    referenceDataSets?: definitions['KeyValue'][]
  }
  ReferralEndResponse: {
    nsiId?: number
  }
  ReferralStartResponse: {
    nsiId?: number
  }
  Registration: {
    /** true if active */
    active?: boolean
    /** Latest Additional notes about the de-registration */
    deregisteringNotes?: string
    /** Latest Probation officer who removed the offender from the register */
    deregisteringOfficer?: definitions['StaffHuman']
    /** Latest Probation area that removed the offender from the register */
    deregisteringProbationArea?: definitions['KeyValue']
    /** Latest Probation team that removed the offender from the register */
    deregisteringTeam?: definitions['KeyValue']
    /** Latest Date removed from register */
    endDate?: string
    /** Date probation should review if the offender should still be on still register */
    nextReviewDate?: string
    /** Additional notes */
    notes?: string
    /** Count of number times this was de-registered */
    numberOfPreviousDeregistrations?: number
    /** Unique id of this offender */
    offenderId?: number
    /** Register this offender has been added to. For example RoSH */
    register?: definitions['KeyValue']
    /** Category of register. Only used for certain registers for example Hate Crime category */
    registerCategory?: definitions['KeyValue']
    /** Level of register. Only used for certain registers for example Lifer - Supervised */
    registerLevel?: definitions['KeyValue']
    /** Probation officer who added the offender to the register */
    registeringOfficer?: definitions['StaffHuman']
    /** Probation area that added the offender to the register */
    registeringProbationArea?: definitions['KeyValue']
    /** Probation team that added the offender to the register */
    registeringTeam?: definitions['KeyValue']
    /** Unique id of this registration */
    registrationId?: number
    /** Number of months a review should take place */
    reviewPeriodMonths?: number
    /** Literal visual colour this register represents */
    riskColour?: string
    /** Date added to register */
    startDate?: string
    /** Type of register. For example Low RoSH */
    type?: definitions['KeyValue']
    /** true if the register is serious enough to warn the probation officer of risk to themselves */
    warnUser?: boolean
  }
  /** Registration Wrapper */
  Registrations: {
    /** List of registrations */
    registrations?: definitions['Registration'][]
  }
  /** Any dates not supplied will be removed from the associated conviction */
  ReplaceCustodyKeyDates: {
    /** Conditional release date */
    conditionalReleaseDate?: string
    /** Expected release date */
    expectedReleaseDate?: string
    /** Home detention curfew eligibility date */
    hdcEligibilityDate?: string
    /** Licence expiry date */
    licenceExpiryDate?: string
    /** Parole eligibility date */
    paroleEligibilityDate?: string
    /** Post sentence Supervision end date. AKA Top-up supervision end data */
    postSentenceSupervisionEndDate?: string
    /** Sentence expiry date */
    sentenceExpiryDate?: string
  }
  ReportDocumentDates: {
    completedDate?: string
    requestedDate?: string
    requiredDate?: string
  }
  ReportManager: {
    active?: boolean
    staff?: definitions['StaffHuman']
  }
  Requirement: {
    /** Is the requirement currently active */
    active?: boolean
    adRequirementTypeMainCategory?: definitions['KeyValue']
    adRequirementTypeSubCategory?: definitions['KeyValue']
    commencementDate?: string
    createdDatetime?: string
    expectedEndDate?: string
    expectedStartDate?: string
    /** The number of temporal units to complete the requirement (see lengthUnit field for unit) */
    length?: number
    /** The temporal unit corresponding to the length field */
    lengthUnit?: string
    /** Total RAR days completed */
    rarCount?: number
    /** Unique identifier for the requirement */
    requirementId: number
    /** Notes added by probation relating to the requirement */
    requirementNotes?: string
    requirementTypeMainCategory?: definitions['KeyValue']
    requirementTypeSubCategory?: definitions['KeyValue']
    /** Is the main category restrictive */
    restrictive?: boolean
    softDeleted?: boolean
    startDate?: string
    terminationDate?: string
    terminationReason?: definitions['KeyValue']
  }
  Resource: {
    description?: string
    file?: { [key: string]: unknown }
    filename?: string
    inputStream?: definitions['InputStream']
    open?: boolean
    readable?: boolean
    uri?: string
    url?: string
  }
  /** Risk Resourcing Details */
  ResourcingDecision: {
    /** The decision code */
    code?: string
    /** Date decision was made */
    date?: string
    /** The decision description */
    description?: string
  }
  ResponsibleOfficer: {
    currentOm?: boolean
    currentPom?: boolean
    currentRo?: boolean
    forenames?: string
    lduCode?: string
    lduDescription?: string
    nomsNumber: string
    offenderManagerId?: number
    omEndDate: string
    omStartDate: string
    prisonOffenderManagerId?: number
    probationAreaCode?: string
    probationAreaDescription?: string
    providerTeamCode?: string
    providerTeamDescription?: string
    responsibleOfficerId?: number
    staffCode: string
    surname: string
  }
  /** Request body for switching the responsible officer */
  ResponsibleOfficerSwitch: {
    /** true if the RO should be set the the current community offender manager */
    switchToCommunityOffenderManager?: boolean
    /** true if the RO should be set the the current prison offender manager */
    switchToPrisonOffenderManager?: boolean
  }
  /** Risk Resourcing Details */
  RiskResourcingDetails: {
    /** decision */
    decision?: definitions['ResourcingDecision']
    /** This is equivalent to indicating if the person is retained by NPS when there was a NPS/CRC split. true = requires enhanced resourcing as if they were allocated to the NPS */
    enhancedResourcing?: boolean
    /** id of the conviction that lead to the decision */
    relatedConvictionId?: number
  }
  Sentence: {
    additionalSentences?: definitions['AdditionalSentence'][]
    defaultLength?: number
    description?: string
    effectiveLength?: number
    /** The expected end date of the sentence */
    expectedSentenceEndDate?: string
    lengthInDays?: number
    originalLength?: number
    originalLengthUnits?: string
    secondLength?: number
    secondLengthUnits?: string
    sentenceId?: number
    /** Sentence type and description */
    sentenceType?: definitions['KeyValue']
    /** Date sentence started */
    startDate?: string
    terminationDate?: string
    terminationReason?: string
    /** Unpaid Work to date associated with this sentence */
    unpaidWork?: definitions['UnpaidWork']
  }
  SentenceStatus: {
    actualReleaseDate?: string
    custodialType?: definitions['KeyValue']
    length?: number
    lengthUnit?: string
    licenceExpiryDate?: string
    mainOffence?: definitions['KeyValue']
    pssEndDate?: string
    sentence?: definitions['KeyValue']
    sentenceDate?: string
    sentenceId?: number
  }
  Sort: {
    empty?: boolean
    sorted?: boolean
    unsorted?: boolean
  }
  StaffDetails: {
    /** the optional email address of this staff member, will be absent if the staff member is not a user of Delius */
    email?: string
    /** staff name details */
    staff?: definitions['Human']
    /** staff code AKA officer code */
    staffCode?: string
    /** staff identifier */
    staffIdentifier?: number
    /** all teams related to this staff member */
    teams?: definitions['Team'][]
    /** the optional telephone number of this staff member, will be absent if the staff member is not a user of Delius */
    telephoneNumber?: string
    /** the optional username of this staff member, will be absent if the staff member is not a user of Delius */
    username?: string
  }
  StaffHuman: {
    /** Staff code */
    code?: string
    /** Given names */
    forenames?: string
    /** Family name */
    surname?: string
    unallocated?: boolean
  }
  Team: {
    /** Team's borough */
    borough?: definitions['KeyValue']
    /** Team code */
    code?: string
    /** Team description */
    description?: string
    /** Team's district */
    district?: definitions['KeyValue']
    /** Team email address */
    emailAddress?: string
    /** Team's end date */
    endDate?: string
    /** Local Delivery Unit - provides a geographic grouping of teams */
    localDeliveryUnit?: definitions['KeyValue']
    /** Team's start date */
    startDate?: string
    /** Team Type - provides a logical, not necessarily geographic, grouping of teams */
    teamType?: definitions['KeyValue']
    /** Team telephone, often not populated */
    telephone?: string
  }
  TeamCreationResult: {
    /** List of teams created */
    teams?: definitions['Team'][]
    /** List of unallocated staff created */
    unallocatedStaff?: definitions['StaffHuman'][]
  }
  UnpaidWork: {
    /** Details of appointment history to date */
    appointments?: definitions['Appointments']
    /** Minutes of unpaid work credited to the service user to date */
    minutesCompleted?: number
    /** Minutes of unpaid work ordered for this sentence */
    minutesOrdered?: number
    /** Status description */
    status?: string
  }
  /** Court details for updating an exiting court */
  UpdateCourtDto: {
    /** true when this court is open */
    active?: boolean
    buildingName?: string
    country?: string
    county?: string
    courtName: string
    /** type code from standard reference data */
    courtTypeCode?: string
    fax?: string
    locality?: string
    postcode?: string
    street?: string
    telephoneNumber?: string
    town?: string
  }
  UpdateCustody: {
    /** Prison institution code in NOMIS */
    nomsPrisonInstitutionCode?: string
  }
  UpdateCustodyBookingNumber: {
    /** Prison Booking number to be set on the conviction. AKA bookNo, prison number */
    bookingNumber?: string
    /** Sentence start date from prison used to match with probation conviction */
    sentenceStartDate?: string
  }
  UpdateOffenderDetails: {
    firstName?: string
    surname?: string
  }
  UpdateOffenderNomsNumber: {
    /** NOMS number to be set on the offender. AKA offenderNo */
    nomsNumber?: string
  }
  /** User Details */
  UserDetails: {
    /** Email address of the user */
    email?: string
    /** Account is enabled if true */
    enabled: boolean
    /** First name of the user */
    firstName: string
    /** Roles For this User */
    roles?: definitions['UserRole'][]
    /** Surname of the user */
    surname: string
    /** User ID of the user */
    userId: number
    /** The username of the user */
    username?: string
  }
  /** User Roles */
  UserRole: {
    /** Code/Name of the Role */
    name: string
  }
}

export interface operations {
  handleUsingGET: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  handleUsingGET_1: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  handleUsingGET_2: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  handleUsingGET_3: {
    parameters: {
      body: {
        /** body */
        body?: { [key: string]: string }
      }
    }
    responses: {
      /** OK */
      200: {
        schema: { [key: string]: unknown }
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getAllAppointmentTypesUsingGET: {
    responses: {
      /** All valid appointment types */
      200: {
        schema: definitions['AppointmentType'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  authenticateUsingPOST: {
    parameters: {
      body: {
        /** Authentication Details */
        authUser: definitions['AuthUser']
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_AUTH_INT */
      403: unknown
    }
  }
  getContactTypesUsingGET: {
    parameters: {
      query: {
        /** Contact category codes */
        categories?: string[]
      }
    }
    responses: {
      /** Contact types belonging to specified categories */
      200: {
        schema: definitions['ContactType'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getCourtAppearancesUsingGET: {
    parameters: {
      query: {
        /** Return court appearances from the given date. Defaults to today if not provided. */
        fromDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtAppearanceMinimalWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and read scope */
  getCourtsUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['Court'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and read scope */
      403: unknown
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and write scope */
  insertCourtUsingPOST: {
    parameters: {
      body: {
        /** court */
        court: definitions['NewCourtDto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Court']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and write scope */
      403: unknown
      /** Court not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and read scope */
  getCourtUsingGET: {
    parameters: {
      path: {
        /** code */
        code: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Court']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and read scope */
      403: unknown
      /** Court not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_MAINTAIN_REF_DATA and write scope */
  updateCourtUsingPUT: {
    parameters: {
      path: {
        /** unique code for this court */
        code: string
      }
      body: {
        /** court */
        court: definitions['UpdateCourtDto']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Court']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_MAINTAIN_REF_DATA and write scope */
      403: unknown
      /** Court not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  upsertCaseNotesToDeliusUsingPUT: {
    parameters: {
      body: {
        /** caseNote */
        caseNote: string
      }
      path: {
        /** caseNotesId */
        caseNotesId: number
        /** nomisId */
        nomisId: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: string
      }
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_DELIUS_CASE_NOTES */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDeltasUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDelta'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_PROBATION_OFFENDER_EVENTS */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  deleteOffenderDeltasUsingDELETE: {
    parameters: {
      query: {
        /** Delete records before the date time provided */
        before: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_PROBATION_OFFENDER_EVENTS */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderSummaryByCrnUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetailSummary']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender not found */
      404: unknown
    }
  }
  getOffenderDetailByCrnUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender is not found */
      404: unknown
    }
  }
  /** Accepts an offender CRN in the format A999999 */
  getAllOffenderManagersForOffenderbyCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** include teams on the ProbationArea records */
        includeProbationAreaTeams?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderAppointmentsByCrnUsingGET: {
    parameters: {
      query: {
        /** attended */
        attended?: 'ATTENDED' | 'NOT_RECORDED' | 'UNATTENDED'
        /** date of the earliest appointment */
        from?: string
        /** date of the latest appointment */
        to?: string
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentDetail'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderAppointmentByCrnUsingGET: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Appointment or offender not found */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateAppointmentOutcomeWithContextUsingPOST: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
      }
      body: {
        /** appointmentOutcomeRequest */
        appointmentOutcomeRequest: definitions['ContextlessAppointmentOutcomeRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  rescheduleAppointmentWithContextNameUsingPOST: {
    parameters: {
      path: {
        /** appointmentId */
        appointmentId: number
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
      }
      body: {
        /** appointmentRescheduleRequest */
        appointmentRescheduleRequest: definitions['ContextlessAppointmentRescheduleRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAssessmentsByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderAssessments']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderContactSummariesByCrnUsingGET: {
    parameters: {
      query: {
        /** appointmentsOnly */
        appointmentsOnly?: boolean
        /** contactTypes */
        contactTypes?: string[]
        /** from */
        from?: string
        /** Page number (0-based) */
        page?: number
        /** Optional size of page */
        pageSize?: number
        /** to */
        to?: string
      }
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfContactSummary']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender does not exist */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getConvictionsForOffenderByCrnUsingGET: {
    parameters: {
      query: {
        /** retrieve only active convictions */
        activeOnly?: boolean
      }
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderConvictionsWithRarByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getNsisForOffenderByCrnAndActiveConvictionsUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** list of NSI codes to constrain by */
        nsiCodes: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['NsiWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getConvictionForOffenderByCrnAndConvictionIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN or conviction ID is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAttendancesUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Attendances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAttendancesByConvictionUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Attendances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderCourtAppearancesByCrnUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtAppearanceBasicWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderCourtReportsByCrnAndConvictionIdUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtReportMinimal'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender or conviction ID is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getLicenceConditionsByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['LicenceConditions']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getNsiForOffenderByCrnAndConvictionIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** list of NSI codes to constrain by */
        nsiCodes: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['NsiWrapper']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getNsiByNsiIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
        /** ID for the nsi */
        nsiId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Nsi']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getPssRequirementsByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PssRequirements']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getRequirementsByConvictionIdUsingGET: {
    parameters: {
      query: {
        /** retrieve only active requirements */
        activeOnly?: boolean
      }
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ConvictionRequirements']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getSentenceStatusByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** ID for the conviction / event */
        convictionId: number
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['SentenceStatus']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender CRN / conviction ID is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderCourtReportByCrnAndCourtReportIdUsingGET: {
    parameters: {
      query: {
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** courtReportId */
        courtReportId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CourtReportMinimal']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, the offender may have exclusions or restrictions in place preventing some users from viewing. Adopting the client scopes SCOPE_IGNORE_DELIUS_INCLUSIONS_ALWAYS and SCOPE_IGNORE_DELIUS_EXCLUSIONS_ALWAYS can bypass these restrictions. */
      403: unknown
      /** The offender or report is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getCustodyByConvictionIdUsingGET: {
    parameters: {
      path: {
        /** convictionId */
        convictionId: number
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the conviction id. */
      404: unknown
    }
  }
  getAllCustodyKeyDateByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByCrnUsingPUT: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** typeCode */
        typeCode: string
      }
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByCrnUsingDELETE: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** The keyDate is not valid or a key date can not be deleted from an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getOffenderDocumentsByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
      query: {
        /** Optional filter for subtype within a type. Can only be used if type is also present<div>Supported sub-types are <ul>   <li>for type <b>COURT_REPORT_DOCUMENT</b>       <ul>           <li><b>PSR</b> - for Pre-Sentence Reports</li>       </ul>   </li></ul></div> */
        subtype?: string
        /** Optional filter for type<div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
        type?: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDocuments']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not Found. For example if the CRN is not known. */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDocumentByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
        /** Document Id */
        documentId: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Resource']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderIdentifiersByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderIdentifiers']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateOffenderNomsNumberUsingPUT: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
      body: {
        /** updateOffenderNomsNumber */
        updateOffenderNomsNumber: definitions['UpdateOffenderNomsNumber']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['IDs']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderPersonalCircumstancesByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalCircumstances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getAllOffenderPersonalContactsByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN of the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalContact'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getOffenderProbationStatusByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ProbationStatusDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender was not found */
      404: unknown
    }
  }
  endReferralContextLessUsingPOST: {
    parameters: {
      path: {
        /** Name identifying preprocessing applied to the request */
        context: string
        /** crn */
        crn: string
      }
      body: {
        /** referralEndRequest */
        referralEndRequest: definitions['ContextlessReferralEndRequest']
      }
    }
    responses: {
      /** Updated */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  startReferralContextLessUsingPOST: {
    parameters: {
      path: {
        /** Name identifying preprocessing applied to the request */
        context: string
        /** crn */
        crn: string
      }
      body: {
        /** referralStartRequest */
        referralStartRequest: definitions['ContextlessReferralStartRequest']
      }
    }
    responses: {
      /** Created */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationsByCrnUsingGET: {
    parameters: {
      query: {
        /** retrieve only active registrations */
        activeOnly?: boolean
        authenticated?: boolean
        'authorities[0].authority'?: string
        credentials?: { [key: string]: unknown }
        details?: { [key: string]: unknown }
        principal?: { [key: string]: unknown }
      }
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registrations']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts an offender CRN in the format A999999 */
  getLatestRecallAndReleaseForOffenderByCrnUsingGET: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderLatestRecall']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderMappaDetailsByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['MappaDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderResourcingDetailsByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['RiskResourcingDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  createAppointmentUsingPOST: {
    parameters: {
      body: {
        /** appointmentCreateRequest */
        appointmentCreateRequest: definitions['AppointmentCreateRequest']
      }
      path: {
        /** crn */
        crn: string
        /** sentenceId */
        sentenceId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentCreateResponse']
      }
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Conflicts with another appointment */
      409: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  createAppointmentWithContextNameUsingPOST: {
    parameters: {
      body: {
        /** contextlessAppointmentCreateRequest */
        contextlessAppointmentCreateRequest: definitions['ContextlessAppointmentCreateRequest']
      }
      path: {
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
        /** sentenceId */
        sentenceId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AppointmentCreateResponse']
      }
      /** Created */
      201: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Conflicts with another appointment */
      409: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  notifyWithContextNameUsingPOST: {
    parameters: {
      body: {
        /** contextlessNotificationCreateRequest */
        contextlessNotificationCreateRequest: definitions['ContextlessNotificationCreateRequest']
      }
      path: {
        /** Name identifying preprocessing applied to the request */
        contextName: string
        /** crn */
        crn: string
        /** sentenceId */
        sentenceId: number
      }
    }
    responses: {
      /** Notified */
      200: {
        schema: string
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_INTERVENTIONS_UPDATE */
      403: unknown
      /** Conflicts with another appointment */
      409: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateTierUsingPOST: {
    parameters: {
      path: {
        /** CRN for the offender */
        crn: string
        /** New tier */
        tier:
          | 'A0'
          | 'A1'
          | 'A2'
          | 'A3'
          | 'B0'
          | 'B1'
          | 'B2'
          | 'B3'
          | 'C0'
          | 'C1'
          | 'C2'
          | 'C3'
          | 'D0'
          | 'D1'
          | 'D2'
          | 'D3'
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_MANAGEMENT_TIER_UPDATE */
      403: unknown
      /** The offender CRN or Tier is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  checkUserAccessByCrnUsingGET: {
    parameters: {
      path: {
        /** crn */
        crn: string
        /** username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AccessLimitation']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** User is restricted from access to offender */
      403: {
        schema: definitions['AccessLimitation']
      }
      /** No such offender, or no such User (see body for detail) */
      404: unknown
    }
  }
  checkUserAccessByCrnUsingGET_1: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['AccessLimitation']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** User is restricted from access to offender */
      403: {
        schema: definitions['AccessLimitation']
      }
      /** No such offender, or no such User (see body for detail) */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY_EVENTS */
  getAndLockNextOffenderUpdateUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderUpdate']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_EVENTS */
      403: unknown
      /** No updates found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Attempt to retrieve the latest update that is already in progress */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDetailsUsingGET: {
    parameters: {
      query: {
        /** Should fail if multiple offenders found regardless of status */
        failOnDuplicate?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetailSummary']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDetailByNomsNumberUsingGET: {
    parameters: {
      query: {
        /** Should fail if multiple offenders found */
        failOnDuplicate?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDetail']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender is not found */
      404: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
  getAllOffenderManagersForOffenderUsingGET: {
    parameters: {
      query: {
        /** include teams on the ProbationArea records */
        includeProbationAreaTeams?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  replaceAllCustodyKeyDateByNomsNumberAndBookingNumberUsingPOST: {
    parameters: {
      path: {
        /** bookingNumber */
        bookingNumber: string
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** replaceCustodyKeyDates */
        replaceCustodyKeyDates: definitions['ReplaceCustodyKeyDates']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender or conviction was not found. */
      404: unknown
    }
  }
  getOffenderContactReportByNomsNumberUsingGET: {
    parameters: {
      query: {
        /** contactTypes */
        contactTypes?: string[]
        /** from */
        from?: string
        /** to */
        to?: string
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Contact'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender does not exist */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getConvictionsForOffenderUsingGET: {
    parameters: {
      query: {
        /** retrieve only active convictions */
        activeOnly?: boolean
        /** Should fail if multiple offenders found regardless of status */
        failOnDuplicate?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Conviction'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getRecallNsisForOffenderByNomsNumberAndActiveConvictionsUsingGET: {
    parameters: {
      path: {
        /** NOMS number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['NsiWrapper']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The offender NOMS number is not found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  updateCustodyBookingNumberUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** updateCustodyBookingNumber */
        updateCustodyBookingNumber: definitions['UpdateCustodyBookingNumber']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** The booking number custody request is invalid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the sentence start date */
      404: unknown
    }
  }
  getCustodyByBookNumberUsingGET: {
    parameters: {
      path: {
        /** bookingNumber */
        bookingNumber: string
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the booking number. */
      404: unknown
    }
  }
  updateCustodyUsingPUT: {
    parameters: {
      path: {
        /** bookingNumber */
        bookingNumber: string
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** updateCustody */
        updateCustody: definitions['UpdateCustody']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** The custody request is invalid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** Either the requested offender was not found or the conviction associated the booking number. */
      404: unknown
    }
  }
  getAllCustodyKeyDateByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByNomsNumberUsingPUT: {
    parameters: {
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
      path: {
        /** nomsNumber */
        nomsNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByNomsNumberUsingDELETE: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** Key date has been deleted */
      200: unknown
      /** The keyDate is not valid or a key date can not be deleted from an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** <div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
  getOffenderDocumentsByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
      query: {
        /** Optional filter for subtype within a type. Can only be used if type is also present<div>Supported sub-types are <ul>   <li>for type <b>COURT_REPORT_DOCUMENT</b>       <ul>           <li><b>PSR</b> - for Pre-Sentence Reports</li>       </ul>   </li></ul></div> */
        subtype?: string
        /** Optional filter for type<div>Supported types are <ul><li>OFFENDER_DOCUMENT</li><li>CONVICTION_DOCUMENT</li><li>CPSPACK_DOCUMENT</li><li>PRECONS_DOCUMENT</li><li>COURT_REPORT_DOCUMENT</li><li>INSTITUTION_REPORT_DOCUMENT</li><li>ADDRESS_ASSESSMENT_DOCUMENT</li><li>APPROVED_PREMISES_REFERRAL_DOCUMENT</li><li>ASSESSMENT_DOCUMENT</li><li>CASE_ALLOCATION_DOCUMENT</li><li>PERSONAL_CONTACT_DOCUMENT</li><li>REFERRAL_DOCUMENT</li><li>NSI_DOCUMENT</li><li>PERSONAL_CIRCUMSTANCE_DOCUMENT</li><li>UPW_APPOINTMENT_DOCUMENT</li><li>CONTACT_DOCUMENT</li></ul></div> */
        type?: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderDocuments']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderDocumentUsingGET: {
    parameters: {
      path: {
        /** Document Id */
        documentId: string
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Resource']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderIdentifiersByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderIdentifiers']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderPersonalCircumstancesByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalCircumstances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  allocatePrisonOffenderManagerByNomsNumberUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** prisonOffenderManager */
        prisonOffenderManager: definitions['CreatePrisonOffenderManager']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager']
      }
      /** Staff id does belong to the probation area related prison institution */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The offender or prison institution is not found */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deallocatePrisonOffenderManagerByNomsNumberUsingDELETE: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** The noms number must be passed in the URL */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The offender is not found */
      404: unknown
      /** The offender does not have a POM to deallocate or the offender has multiple active noms numbers */
      409: unknown
    }
  }
  offenderRecalledUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** recallNotification */
        recallNotification: definitions['OffenderRecalledNotification']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
      /** The requested offender did not have a single active event */
      409: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationsByNomsNumberUsingGET: {
    parameters: {
      query: {
        /** failOnDuplicate */
        failOnDuplicate?: boolean
      }
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registrations']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Multiple offenders found in the same state */
      409: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
  getLatestRecallAndReleaseForOffenderUsingGET: {
    parameters: {
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderLatestRecall']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  offenderReleasedUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** releasedNotification */
        releasedNotification: definitions['OffenderReleasedNotification']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Custody']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
      /** The requested offender did not have a single active event */
      409: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  switchResponsibleOfficerUsingPUT: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
      body: {
        /** responsibleOfficerSwitch */
        responsibleOfficerSwitch: definitions['ResponsibleOfficerSwitch']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CommunityOrPrisonOffenderManager']
      }
      /** Either set true for the prisoner offender manager or the community offender manager */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden, requires ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The offender is not found */
      404: unknown
      /** Cannot find a current RO for offender or Cannot find an active POM for offender or Cannot find an active COM for offender */
      409: unknown
    }
  }
  /** Accepts a NOMIS offender nomsNumber in the format A9999AA */
  getResponsibleOfficersForOffenderUsingGET: {
    parameters: {
      query: {
        /** Current only */
        current?: boolean
      }
      path: {
        /** Nomis number for the offender */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ResponsibleOfficer'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderMappaDetailsByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['MappaDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderResourcingDetailsByNomsNumberUsingGET: {
    parameters: {
      path: {
        /** nomsNumber */
        nomsNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['RiskResourcingDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Forbidden - requires ROLE_COMMUNITY */
      403: {
        schema: definitions['ErrorResponse']
      }
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** In the very rare circumstances more than one offender is found with matching noms number, all will be updated and their identifiers returned. */
  replaceOffenderNomsNumberUsingPUT: {
    parameters: {
      path: {
        /** originalNomsNumber */
        originalNomsNumber: string
      }
      body: {
        /** updateOffenderNomsNumber */
        updateOffenderNomsNumber: definitions['UpdateOffenderNomsNumber']
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['IDs'][]
      }
      /** The new noms number is not present in request */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found */
      404: unknown
      /** The new noms number is assigned to an existing offender already */
      409: unknown
    }
  }
  getAllCustodyKeyDateByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByOffenderIdUsingPUT: {
    parameters: {
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
      path: {
        /** offenderId */
        offenderId: number
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByOffenderIdUsingDELETE: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** Key date has been deleted */
      200: unknown
      /** The keyDate is not valid or a key date can not be deleted from an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderIdentifiersByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['OffenderIdentifiers']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderPersonalCircumstancesByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PersonalCircumstances']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY */
  getOffenderRegistrationsByOffenderIdUsingGET: {
    parameters: {
      path: {
        /** offenderId */
        offenderId: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['Registrations']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Offender not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getOffenderIdsUsingGET: {
    parameters: {
      query: {
        /** Filter by offenders that were active on the supplied date. Advised not to use this in conjunction with includeActiveOnly since that will effectively return offenders active of this supplied date and current date which is typically not what is required. */
        activeDate?: string
        /** Filter by offenders that are active, i.e. offenders on a sentence that probation has an interest in. */
        includeActiveOnly?: boolean
        /** Include deleted offenders */
        includeDeleted?: boolean
        offset?: number
        /** Results page you want to retrieve (0..N) */
        page?: number
        paged?: boolean
        pageNumber?: number
        pageSize?: number
        /** Number of records per page. */
        size?: number
        /** Sort column and direction. Multiple sort params allowed. */
        sort?: string
        'sort.sorted'?: boolean
        'sort.unsorted'?: boolean
        unpaged?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfPrimaryIdentifiers']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
    }
  }
  getAllCustodyKeyDateByPrisonBookingNumberUsingGET: {
    parameters: {
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate'][]
      }
      /** The the offender does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found. */
      404: unknown
    }
  }
  getCustodyKeyDateByPrisonBookingNumberUsingGET: {
    parameters: {
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be retrieved for an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The requested offender was not found or does not have the supplied key date type. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  putCustodyKeyDateByPrisonBookingNumberUsingPUT: {
    parameters: {
      body: {
        /** custodyKeyDate */
        custodyKeyDate: definitions['CreateCustodyKeyDate']
      }
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['CustodyKeyDate']
      }
      /** The keyDate is not valid or a key date can not be added to an offender which does not have a single custody event */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested conviction with associated prison booking was not found. */
      404: unknown
    }
  }
  /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
  deleteCustodyKeyDateByPrisonBookingNumberUsingDELETE: {
    parameters: {
      path: {
        /** prisonBookingNumber */
        prisonBookingNumber: string
        /** typeCode */
        typeCode: string
      }
    }
    responses: {
      /** Key date has been deleted */
      200: unknown
      /** The keyDate is not valid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
      /** The requested prison booking was not found. */
      404: unknown
    }
  }
  /** requires ROLE_COMMUNITY_EVENTS */
  deleteOffenderUpdateUsingDELETE: {
    parameters: {
      path: {
        /** offenderDeltaId */
        offenderDeltaId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_EVENTS */
      403: unknown
      /** Update not found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** requires ROLE_COMMUNITY_EVENTS */
  markAsFailedUsingPUT: {
    parameters: {
      path: {
        /** offenderDeltaId */
        offenderDeltaId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_EVENTS */
      403: unknown
      /** Update not found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts filtering to only return active areas */
  getProbationAreaCodesUsingGET: {
    parameters: {
      query: {
        /** Restricts to active areas only */
        active?: boolean
        /** Restricts to areas that are providers, no prisons will be returned */
        excludeEstablishments?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfKeyValue']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a probation area code */
  getLdusForProbationCodeUsingGET: {
    parameters: {
      path: {
        /** Probation area code */
        code: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfKeyValue']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a probation area code and local delivery unit code */
  getTeamsForLduUsingGET: {
    parameters: {
      path: {
        /** Probation area code */
        code: string
        /** Local delivery unit code */
        lduCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['PageOfKeyValue']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts filtering to only return active areas */
  getProbationAreasAndLocalDeliveryUnitsUsingGET: {
    parameters: {
      query: {
        /** Restricts to active areas only */
        active?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ProbationAreaWithLocalDeliveryUnits'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  getReferenceDataUsingGET: {
    parameters: {
      path: {
        /** The set of reference data */
        set: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ReferenceDataList']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Data set not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** It is expected that this API will be used to assist developers in understanding the available set codes available for /secure/referenceData/set/{set} endpoint */
  getReferenceDataSetsUsingGET: {
    responses: {
      /** OK */
      200: {
        schema: definitions['ReferenceDataSets']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Only used for smoke tests, not production ready */
  resetCustodySmokeTestDataUsingPOST: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: unknown
      /** Either the requested offender was not found or no active custodial sentences were found */
      404: unknown
    }
  }
  /** Only used for smoke tests, not production ready */
  updateOffenderDetailsUsingPOST: {
    parameters: {
      path: {
        /** crn */
        crn: string
      }
      body: {
        /** offenderDetails */
        offenderDetails: definitions['UpdateOffenderDetails']
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: unknown
      /** The requested offender was not found */
      404: unknown
    }
  }
  /** staff details for supplied usernames */
  getStaffDetailsList: {
    parameters: {
      body: {
        /** usernames */
        usernames: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffDetails'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a Delius staff officer identifier */
  getStaffDetailsForStaffIdentifierUsingGET: {
    parameters: {
      path: {
        /** Delius officer identifier */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a Delius staff officer identifier */
  getOffendersForResponsibleOfficerIdentifierUsingGET: {
    parameters: {
      query: {
        /** Current only */
        current?: boolean
      }
      path: {
        /** Delius officer identifier of the responsible officer */
        staffIdentifier: number
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['ManagedOffender'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  /** Accepts a Delius staff username */
  getStaffDetailsForUsernameUsingGET: {
    parameters: {
      path: {
        /** Delius username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['StaffDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** Not found */
      404: {
        schema: definitions['ErrorResponse']
      }
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  createMissingPrisonOffenderManagerTeamsUsingPOST: {
    responses: {
      /** OK */
      200: {
        schema: definitions['TeamCreationResult']
      }
      /** The custody request is invalid */
      400: unknown
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_CUSTODY_UPDATE */
      403: unknown
    }
  }
  getAllOfficeLocationsUsingGET: {
    parameters: {
      path: {
        /** Team code */
        teamCode: string
      }
    }
    responses: {
      /** All active office locations for the specified team */
      200: {
        schema: definitions['OfficeLocation'][]
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY */
      403: unknown
      /** The specified team does not exist or is not active */
      404: unknown
      /** Unrecoverable error whilst processing request. */
      500: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  findUserByEmailUsingGET: {
    parameters: {
      path: {
        /** LDAP email address */
        email: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['UserDetails'][]
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_USERS */
      403: unknown
    }
  }
  findUserUsingGET: {
    parameters: {
      path: {
        /** LDAP username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        schema: definitions['UserDetails']
      }
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires any of ROLE_COMMUNITY_AUTH_INT,ROLE_COMMUNITY_USERS,ROLE_COMMUNITY_USERS_ROLES */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  changePasswordUsingPOST: {
    parameters: {
      body: {
        /** Password Credentials */
        authPassword: definitions['AuthPassword']
      }
      path: {
        /** LDAP username */
        username: string
      }
    }
    responses: {
      /** Password Changed */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_AUTH_INT */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
  addRoleUsingPUT: {
    parameters: {
      path: {
        /** Delius Role ID */
        roleId: string
        /** LDAP username */
        username: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request */
      400: {
        schema: definitions['ErrorResponse']
      }
      /** JWT supplied invalid or absent */
      401: unknown
      /** Requires role ROLE_COMMUNITY_USERS_ROLES */
      403: unknown
      /** Not Found */
      404: {
        schema: definitions['ErrorResponse']
      }
    }
  }
}
