/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users/{username}/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['addRole']
    post?: never
    delete: operations['removeRole']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['findStaffForUsernames']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/probation-case/responsible-community-manager': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['findCommunityManagerEmails']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/team/{teamCode}/caseload/managed-offenders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getManagedOffendersByTeam']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['findStaff']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff/{staffCode}/caseload/managed-offenders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getManagedOffenders']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff/{boroughCode}/pdu-head': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['findPDUHead']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff/byid/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['findStaff_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/staff/byid/{id}/caseload/managed-offenders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getManagedOffenders_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/probation-case/{crn}/responsible-community-manager': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['findCommunityManager']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/docs/asyncapi': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['asyncApi']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Name: {
      forename: string
      middleName?: string
      surname: string
    }
    StaffName: {
      /** Format: int64 */
      id: number
      name: components['schemas']['Name']
      code: string
      username?: string
    }
    StaffEmail: {
      code: string
      email?: string
    }
    Borough: {
      code: string
      description: string
    }
    District: {
      code: string
      description: string
      borough: components['schemas']['Borough']
    }
    ManagedOffender: {
      crn: string
      name: components['schemas']['Name']
      /** Format: date */
      allocationDate?: string
      staff: components['schemas']['Staff']
      team?: components['schemas']['Team']
    }
    OfficeAddress: {
      officeName: string
      buildingName?: string
      buildingNumber?: string
      streetName?: string
      district?: string
      town?: string
      county?: string
      postcode?: string
      ldu: string
      telephoneNumber?: string
      /** Format: date */
      from: string
      /** Format: date */
      to?: string
    }
    Provider: {
      code: string
      description: string
    }
    Staff: {
      /** Format: int64 */
      id: number
      code: string
      name: components['schemas']['Name']
      teams: components['schemas']['Team'][]
      provider: components['schemas']['Provider']
      username?: string
      email?: string
      telephoneNumber?: string
      unallocated: boolean
    }
    Team: {
      code: string
      description: string
      telephone?: string
      emailAddress?: string
      addresses?: components['schemas']['OfficeAddress'][]
      district: components['schemas']['District']
      borough: components['schemas']['Borough']
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate?: string
    }
    PDUHead: {
      name: components['schemas']['Name']
      email?: string
    }
    Manager: {
      /** Format: int64 */
      id: number
      code: string
      name: components['schemas']['Name']
      provider: components['schemas']['Provider']
      team: components['schemas']['Team']
      username?: string
      email?: string
      unallocated: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  addRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  removeRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  findStaffForUsernames: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StaffName'][]
        }
      }
    }
  }
  findCommunityManagerEmails: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StaffEmail'][]
        }
      }
    }
  }
  getManagedOffendersByTeam: {
    parameters: {
      query?: never
      header?: never
      path: {
        teamCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ManagedOffender'][]
        }
      }
    }
  }
  findStaff: {
    parameters: {
      query?: never
      header?: never
      path: {
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Staff']
        }
      }
    }
  }
  getManagedOffenders: {
    parameters: {
      query?: never
      header?: never
      path: {
        staffCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ManagedOffender'][]
        }
      }
    }
  }
  findPDUHead: {
    parameters: {
      query?: never
      header?: never
      path: {
        boroughCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PDUHead'][]
        }
      }
    }
  }
  findStaff_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Staff']
        }
      }
    }
  }
  getManagedOffenders_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ManagedOffender'][]
        }
      }
    }
  }
  findCommunityManager: {
    parameters: {
      query?: never
      header?: never
      path: {
        crn: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Manager']
        }
      }
    }
  }
  asyncApi: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
}
