---
generic-service:
  nameOverride: create-and-vary-a-licence
  replicaCount: 4

  image:
    repository: quay.io/hmpps/create-and-vary-a-licence
    tag: app_version    # override at deployment time
    port: 3000

  ingress:
    enabled: true
    host: app-hostname.local    # override per environment
    tlsSecretName: create-and-vary-a-licence-cert

  livenessProbe:
    httpGet:
      path: /ping

  readinessProbe:
    httpGet:
      path: /ping

  # Environment variables to load into the deployment
  env:
    NODE_ENV: "production"
    REDIS_TLS_ENABLED: "true"
    TOKEN_VERIFICATION_ENABLED: "true"
    LICENCE_WATERMARK: "false"

  # Pre-existing kubernetes secrets to load as environment variables in the deployment.
  # namespace_secrets:
  #   [name of kubernetes secret]:
  #     [name of environment variable as seen by app]: [key of kubernetes secret to load]

  namespace_secrets:
    create-and-vary-a-licence:
      APPINSIGHTS_INSTRUMENTATIONKEY: "APPINSIGHTS_INSTRUMENTATIONKEY"
      API_CLIENT_ID: "API_CLIENT_ID"
      API_CLIENT_SECRET: "API_CLIENT_SECRET"
      SYSTEM_CLIENT_ID: "SYSTEM_CLIENT_ID"
      SYSTEM_CLIENT_SECRET: "SYSTEM_CLIENT_SECRET"
      SESSION_SECRET: "SESSION_SECRET"
      TAG_MANAGER_CONTAINER_ID: "TAG_MANAGER_CONTAINER_ID"
    elasticache-redis:
      REDIS_HOST: "primary_endpoint_address"
      REDIS_AUTH_TOKEN: "auth_token"
    create-and-vary-a-licence-prison-events-sqs-instance-output:
      SQS_PRISON_EVENTS_ACCESS_KEY_ID: "access_key_id"
      SQS_PRISON_EVENTS_SECRET_ACCESS_KEY: "secret_access_key"
      SQS_PRISON_EVENTS_QUEUE_URL: "sqs_id"
    create-and-vary-a-licence-probation-events-sqs-instance-output:
      SQS_PROBATION_EVENTS_ACCESS_KEY_ID: "access_key_id"
      SQS_PROBATION_EVENTS_SECRET_ACCESS_KEY: "secret_access_key"
      SQS_PROBATION_EVENTS_QUEUE_URL: "sqs_id"
    create-and-vary-a-licence-domain-events-sqs-instance-output:
      SQS_DOMAIN_EVENTS_ACCESS_KEY_ID: "access_key_id"
      SQS_DOMAIN_EVENTS_SECRET_ACCESS_KEY: "secret_access_key"
      SQS_DOMAIN_EVENTS_QUEUE_URL: "sqs_id"

  allowlist:
    office: "217.33.148.210/32"
    petty_france_wifi: "213.121.161.112/28"
    mojvpn: "81.134.202.29/32"
    global-protect: "35.176.93.186/32"
    quantum1: "62.25.109.197/32"
    quantum2: "212.137.36.230/32"
    quantum3: "195.92.38.16/28"
    ark-nps-hmcts-ttp1: "195.59.75.0/24"
    ark-nps-hmcts-ttp2: "194.33.192.0/25"
    ark-nps-hmcts-ttp3: "194.33.193.0/25"
    ark-nps-hmcts-ttp4: "194.33.196.0/25"
    ark-nps-hmcts-ttp5: "194.33.197.0/25"
    moj-official-ark-c-vodafone: "194.33.248.0/29"
    moj-official-ark-f-vodafone: "194.33.249.0/29"
    dxc_webproxy1: "195.92.38.20/32"
    dxc_webproxy2: "195.92.38.21/32"
    dxc_webproxy3: "195.92.38.22/32"
    dxc_webproxy4: "195.92.38.23/32"
    moj-official-ark-c-expo-e: "51.149.249.0/29"
    moj-official-ark-f-expo-e: "51.149.249.32/29"
    moj-official-tgw-prod: "51.149.250.0/24"
    moj-official-tgw-preprod: "51.149.251.0/24"
    fivewells-pttp-desktop1: "20.49.214.199/32"
    fivewells-pttp-desktop2: "20.49.214.228/32"
    fivewells-g4s-1: "195.89.157.56/29"
    fivewells-g4s-2: "195.59.215.184/29"
    health-kick: "35.177.252.195/32"
    cloudplatform-live1-1: "35.178.209.113/32"
    cloudplatform-live1-2: "3.8.51.207/32"
    cloudplatform-live1-3: "35.177.252.54/32"

gotenberg:
  nameOverride: gotenberg
  replicaCount: 2

  image:
    repository: thecodingmachine/gotenberg
    tag: 7.5.0
    port: 3000

  ingress:
    enabled: false

  livenessProbe:
    httpGet:
      path: /health
    periodSeconds: 30
    initialDelaySeconds: 60
    timeoutSeconds: 20
    failureThreshold: 10

  readinessProbe:
    httpGet:
      path: /health
    periodSeconds: 20
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 15

  podSecurityContext:
    fsGroup: 1001

  securityContext:
    runAsUser: 1001
    runAsNonRoot: true

delius-wiremock:
  nameOverride: delius-wiremock
  replicaCount: 2

  image:
    repository: smcveigh941/delius-wiremock
    tag: latest
    pullPolicy: Always
    port: 5000

  namespace_secrets:
    create-and-vary-a-licence:
      SYSTEM_CLIENT_ID: "SYSTEM_CLIENT_ID"
      SYSTEM_CLIENT_SECRET: "SYSTEM_CLIENT_SECRET"

  ingress:
    enabled: false

  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
    periodSeconds: 30
    initialDelaySeconds: 60
    timeoutSeconds: 20
    failureThreshold: 10

  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
    periodSeconds: 20
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 15

  podSecurityContext:
    fsGroup: 1001

  securityContext:
    runAsUser: 1001
    runAsNonRoot: true

generic-prometheus-alerts:
  targetApplication: create-and-vary-a-licence
